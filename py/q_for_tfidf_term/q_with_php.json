[
    {
        "ID": "1620",
        "Question": "I am excited about the changes in PHP 6 previewed in PHP 5.3+. However, I wonder why it takes so long to release PHP 6? Books about it have been published since 2008, and announcements on it since 2007, but I am yet to hear about an alpha or a beta. Why does it take so long to release it? Or is that the way it goes with all languages when they transition to a major release where I guess it takes around 4-5 years to release? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "2007": 0.21513946770947692,
                    "2008": 0.19664075312618767,
                    "alpha": 0.21043492887156673,
                    "beta": 0.18335524069528789,
                    "books": 0.13283323244861356,
                    "changes": 0.12345916578085313,
                    "goes": 0.1380565218899327,
                    "guess": 0.1438659449144142,
                    "hear": 0.15364645629112922,
                    "languages": 0.10385709567899751,
                    "long": 0.20932762938666874,
                    "major": 0.1438659449144142,
                    "php": 0.3807838350630985,
                    "published": 0.19154241408408873,
                    "release": 0.5794666421849404,
                    "takes": 0.2636429143418928,
                    "transition": 0.18717510621752803,
                    "way": 0.08108772918445553,
                    "wonder": 0.15724108763698744,
                    "years": 0.11083355132662943
                },
                "Max term": "release",
                "Max score": 0.5794666421849404
            }
        ],
        "Best answer": "The release timetable is not unusual for languages, and it's not even that unusual for PHP: 5.0 was released in 2004, but 4.0 was released in 2000.  Compare this to the last stable releases for C (2000), Fortran (2003), or C++ (2003). One other thing to keep in mind is that 5.3 was a major release in all but name. It adds a lot of stuff that was originally destined for PHP 6. Due to development problems with unicode support (a major part of PHP 6), it was decided to release what was stable at the time as a 5.x branch. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "2000": 0.3463396032447906,
                    "2003": 0.3387660597573082,
                    "adds": 0.15417608959601986,
                    "branch": 0.13714865799117967,
                    "compare": 0.1435937387677696,
                    "decided": 0.13204791578030048,
                    "development": 0.07428546288202739,
                    "fortran": 0.15417608959601986,
                    "languages": 0.08359652855559188,
                    "lot": 0.07610595420423333,
                    "major": 0.23160080673519415,
                    "mind": 0.10405726694071815,
                    "originally": 0.13714865799117967,
                    "php": 0.30650006658906953,
                    "problems": 0.09059245015100285,
                    "release": 0.3498176945715109,
                    "released": 0.2625839958985346,
                    "releases": 0.13714865799117967,
                    "stable": 0.27622426030079705,
                    "stuff": 0.09459314537554082,
                    "support": 0.09761218616412823,
                    "thing": 0.08115829168785418,
                    "time": 0.057515262854123145,
                    "unicode": 0.16610277898998085,
                    "unusual": 0.3387660597573082
                },
                "Max term": "release",
                "Max score": 0.3498176945715109
            }
        ]
    },
    {
        "ID": "2806",
        "Question": "There's around a zillion \"PHP frameworks\". And most of them bill themselves as following the MVC pattern. While it's welcome to overcome osCommerce coding style (processing logic heavily intermixed with SQL and HTML), there are certainly simpler and easier to follow approaches to get a maintainable application design. The original MVC concept was targetted at GUI applications. And for Gtk/Python it seems feasible to follow it accordingly. But PHP web apps don't operate on live Views (GUI elements) and a persistent Controller runtime. It's quite certainly a misnomer if it just describes the used code + directory grouping or class naming. \"MVC\" seems to be used like a buzzword for PHP frameworks. And I've actually seen one or two mature PHP frameworks admit it, but redefining the phrase anyway to match interna. So is it generally snake oil? Why isn't better terminology used, and a more sensible concept for maintainable PHP propagated? Some elaborative reasoning Why I suspect that PHP implementations don't follow the real MVC pattern: Models: in theory, Models should be fat and contain business logic, and controllers should be thin handlers (input->output). In reality the PHP frameworks advocate shallow Models. CI and Symfony for example equate Model == ORM. Even HTTP input is handled by the controller, isn't treated as model. Views: workarounds with AJAX discounted, there can't be Views on web pages. PHP frameworks still pump out pages. The interface still effectively follows the ordinary HTTP model, there's no advantage over non-MVC applications. (And lastly, none of the widespread php frameworks can factually output to GUI Views instead of HTML. I've seen a PHP library that can operate Gtk/Console/Web, but the frameworks don't.) Controller: I'm unsure. Controllers probably don't need to be long-running and persistently active in the MVC model. In PHP framework context, they're however mostly request handlers. Not really something to get argumentative about, but it just feels slightly buzzwordish. Would there be better descriptors? I've seen acronyms like PMVC or HMVC thrown around. Though descriptions get more ambigous there, maybe these would describe the current web frameworks less hokey? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "accordingly": 0.06059483508213696,
                    "active": 0.05683723988074065,
                    "actually": 0.0320336349145803,
                    "admit": 0.05890519374624842,
                    "advantage": 0.047747532231906906,
                    "advocate": 0.06157124996996714,
                    "ajax": 0.05683723988074065,
                    "application": 0.03216205318265842,
                    "applications": 0.07608327909169246,
                    "approaches": 0.05173975692888551,
                    "apps": 0.044966351918340794,
                    "better": 0.05582949430343897,
                    "business": 0.036474746627718,
                    "buzzword": 0.06701848650725198,
                    "certainly": 0.09211578179203674,
                    "ci": 0.05971156037584235,
                    "class": 0.03696818324718463,
                    "code": 0.019996564124680264,
                    "coding": 0.0343383985768345,
                    "concept": 0.08959260732020904,
                    "console": 0.05567730671768735,
                    "contain": 0.05567730671768735,
                    "context": 0.04729537572548444,
                    "controller": 0.18798836684293418,
                    "controllers": 0.1278005475542216,
                    "current": 0.03916371354309401,
                    "describes": 0.05747662235199577,
                    "descriptions": 0.0639002737771108,
                    "design": 0.03182348146368708,
                    "directory": 0.05816340835400053,
                    "easier": 0.0374893775286949,
                    "effectively": 0.050727766680456865,
                    "elements": 0.05105297092688074,
                    "equate": 0.06908644037275975,
                    "example": 0.02886092589509215,
                    "fat": 0.06701848650725198,
                    "feasible": 0.06157124996996714,
                    "feels": 0.053287908950727325,
                    "follow": 0.12163956016183662,
                    "following": 0.03854270049322577,
                    "follows": 0.05747662235199577,
                    "framework": 0.03689606327188491,
                    "frameworks": 0.3519194962440848,
                    "generally": 0.03916371354309401,
                    "grouping": 0.06908644037275975,
                    "gtk": 0.1278005475542216,
                    "gui": 0.15218330004137057,
                    "handled": 0.05567730671768735,
                    "handlers": 0.1306576903427269,
                    "heavily": 0.055147598544852114,
                    "html": 0.08707556104817626,
                    "http": 0.08566000773491458,
                    "implementations": 0.0562391375225297,
                    "input": 0.09331198650845864,
                    "instead": 0.03543675430366491,
                    "interface": 0.04462931950176572,
                    "library": 0.0402323418291143,
                    "like": 0.03990057005396149,
                    "live": 0.04925365529257233,
                    "logic": 0.0879798740610212,
                    "long": 0.03178201665153567,
                    "maintainable": 0.1124782750450594,
                    "match": 0.05567730671768735,
                    "mature": 0.06157124996996714,
                    "maybe": 0.037960701301630234,
                    "model": 0.17299260655305085,
                    "models": 0.1611570814517984,
                    "mvc": 0.3006582782008413,
                    "naming": 0.053719027150599466,
                    "need": 0.025296513806249542,
                    "non": 0.034842488571489055,
                    "operate": 0.11632681670800106,
                    "ordinary": 0.06266278894764472,
                    "original": 0.04479630366010452,
                    "orm": 0.053719027150599466,
                    "output": 0.1002194260669471,
                    "overcome": 0.06157124996996714,
                    "pages": 0.10278000668691163,
                    "pattern": 0.09415461979679247,
                    "persistent": 0.06532884517136345,
                    "php": 0.42396970542548346,
                    "phrase": 0.06059483508213696,
                    "probably": 0.03233609341599643,
                    "processing": 0.053719027150599466,
                    "python": 0.03916371354309401,
                    "quite": 0.03711412909897311,
                    "real": 0.03501680161123427,
                    "reality": 0.055147598544852114,
                    "really": 0.026022900629368233,
                    "reasoning": 0.05464653759747259,
                    "request": 0.04872394711973709,
                    "running": 0.041558510302374174,
                    "runtime": 0.05041358845562563,
                    "seen": 0.11614778222092315,
                    "sensible": 0.05890519374624842,
                    "shallow": 0.06266278894764472,
                    "simpler": 0.05173975692888551,
                    "slightly": 0.05210322979151416,
                    "snake": 0.06908644037275975,
                    "sql": 0.04339183467229965,
                    "style": 0.04269471139085673,
                    "suspect": 0.053719027150599466,
                    "symfony": 0.06701848650725198,
                    "terminology": 0.06059483508213696,
                    "theory": 0.051390003343455816,
                    "thrown": 0.06157124996996714,
                    "treated": 0.06157124996996714,
                    "unsure": 0.06908644037275975,
                    "used": 0.08415613210227918,
                    "views": 0.21858615038989035,
                    "web": 0.12696294615396603,
                    "welcome": 0.05890519374624842,
                    "widespread": 0.0639002737771108,
                    "workarounds": 0.06908644037275975
                },
                "Max term": "php",
                "Max score": 0.42396970542548346
            }
        ],
        "Best answer": "I think you are looking at this in completely the wrong way. A GUI app and a web page are worlds apart so the exact same definition of MVC will never work for both. MVC is more about the ideal: separating certain parts of the app like display and logic. In PHP (or the web in general), a View is the web page itself: the HTML output. It's not \"live\" as per your definition, but you simply click links to go back to the controller (i.e. another page request). The Controller and Model is where things do differ, like you explained. In PHP the model tends to be the data layer, interacting with the database and so on. But it is still modelling the situation, and the controller still controls the application flow, if only once per page load. So the name \"Model-View-Controller\" is perfectly logical, albeit a different implementation in GUI apps vs web apps. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "albeit": 0.12025790282551913,
                    "apart": 0.10028583287020502,
                    "app": 0.14110718634979957,
                    "application": 0.06052776987779898,
                    "apps": 0.16924995339694215,
                    "certain": 0.074772770646885,
                    "click": 0.10028583287020502,
                    "completely": 0.08193645926725326,
                    "controller": 0.4717160123806027,
                    "controls": 0.1010971810463862,
                    "data": 0.061529433089735255,
                    "database": 0.07405345878229876,
                    "definition": 0.17193448389464758,
                    "differ": 0.12025790282551913,
                    "different": 0.055188853463871784,
                    "display": 0.10194812252123722,
                    "exact": 0.0980563114176834,
                    "explained": 0.10816883335515953,
                    "flow": 0.1010971810463862,
                    "general": 0.06877376839902843,
                    "gui": 0.19093548354089118,
                    "html": 0.08193645926725326,
                    "ideal": 0.09951055676598047,
                    "implementation": 0.08060445032012148,
                    "interacting": 0.12294642025673692,
                    "layer": 0.09075365122079844,
                    "like": 0.07509136647785226,
                    "links": 0.10028583287020502,
                    "live": 0.09269351979048109,
                    "load": 0.09671404616883067,
                    "logic": 0.08278740074210429,
                    "logical": 0.09169662900724439,
                    "looking": 0.06353005356028989,
                    "model": 0.2441741659154126,
                    "modelling": 0.12612626146195643,
                    "mvc": 0.18860917628032664,
                    "output": 0.09430458814016332,
                    "page": 0.3245004443642884,
                    "parts": 0.08528319974202471,
                    "perfectly": 0.1010971810463862,
                    "php": 0.14507181445622294,
                    "request": 0.09169662900724439,
                    "separating": 0.11587476794796359,
                    "simply": 0.07269814877549023,
                    "situation": 0.08086283786938803,
                    "tends": 0.0980563114176834,
                    "things": 0.04991941807132802,
                    "think": 0.044660828938254044,
                    "view": 0.16675734460017197,
                    "vs": 0.08278740074210429,
                    "way": 0.04633945661443777,
                    "web": 0.2389394714376701,
                    "work": 0.043129674044656376,
                    "worlds": 0.13001807256551026,
                    "wrong": 0.07099146154280653
                },
                "Max term": "controller",
                "Max score": 0.4717160123806027
            }
        ]
    },
    {
        "ID": "6146",
        "Question": "I've recently been frequented by erroneous error messages from mod_security. Its filter sets cover outdated PHP exploits, and I have to rewrite my stuff because Wordpress&Co had bugs years ago.   Does this happen to anyone else?  Apache mod_security blocks possibly   dangerous HTTP requests before they   reach applications (PHP specifically).   It uses various filter sets, mostly   regex based.  So I have a nice shared hosting provider, technically apt and stuff. But this bugged me: Just last week I had to change a parameter name &src= in one of my apps because mod_security blocks ANY requests with that. I didn't look up its details, but this filter rule was preventing the exploitability of another app which I don't use and probably never had heard about. Still I had to rewrite my code (renaming parameter often suffices to trick mod_security) which had nothing to do or in common with that! And today, a silly regex blocks form submissions, because I wanted to submit php sample code. Given, this is the simple stuff that mod_security is there to protect against. But I don't believe mod_security can detect seriously obfuscated code, and just goes off at obvious (and in this case totally trivial) php snippets. Basically I'm getting penalized by mod_security because other people released bug-prone apps. (Not saying my apps are ultra secure - I'm pretty security wary, but make no hyperbolic claims.) I've already asked my provider to disable it anyway, the benefits are too minuscle IMO and for my apps.  What do you think? Does mod_security make much sense outside of WP hosting? Or is it really just a bunch of blacklists of long passed security bugs? Which of its rules are actually helpful? Is there an application level equivalent? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "actually": 0.04875719514611031,
                    "ago": 0.0643836947452418,
                    "apache": 0.08965738775083683,
                    "app": 0.057061176508595685,
                    "application": 0.048952655779088944,
                    "applications": 0.057901753827212,
                    "apps": 0.27376639601936836,
                    "asked": 0.0590617646902218,
                    "based": 0.053032446027003355,
                    "basically": 0.06743363339941363,
                    "believe": 0.06418913281040234,
                    "benefits": 0.07010298957403996,
                    "blocks": 0.25679845047370964,
                    "bug": 0.060034944786926926,
                    "bugs": 0.12006988957385385,
                    "bunch": 0.07582228440283811,
                    "case": 0.051775931823119244,
                    "change": 0.05107246389468933,
                    "claims": 0.09371529201043712,
                    "code": 0.09130806246733285,
                    "common": 0.05562171905334452,
                    "cover": 0.07627011619516884,
                    "dangerous": 0.09088472817671299,
                    "details": 0.06582639075328842,
                    "detect": 0.08852834400594785,
                    "disable": 0.095376682579635,
                    "equivalent": 0.0798801886624384,
                    "erroneous": 0.10200632659217086,
                    "error": 0.06187740994334995,
                    "filter": 0.2917806355802335,
                    "form": 0.06604508531443969,
                    "getting": 0.053568162942509406,
                    "given": 0.05960962060530545,
                    "goes": 0.06380787942231483,
                    "happen": 0.06767895291561044,
                    "heard": 0.06561103517111797,
                    "helpful": 0.07039995878777959,
                    "hosting": 0.16635089366561406,
                    "http": 0.06518994370269812,
                    "imo": 0.08965738775083683,
                    "level": 0.05329776137189108,
                    "long": 0.04837421641808565,
                    "look": 0.04882204821041638,
                    "make": 0.0754245467273261,
                    "messages": 0.0798801886624384,
                    "nice": 0.06478105951901995,
                    "obfuscated": 0.09943458683923527,
                    "obvious": 0.06792861459488252,
                    "outdated": 0.09088472817671299,
                    "outside": 0.06818277492405354,
                    "parameter": 0.16948868375899,
                    "passed": 0.08393809292203867,
                    "people": 0.03901238531795604,
                    "php": 0.2346575996657746,
                    "possibly": 0.06792861459488252,
                    "pretty": 0.053568162942509406,
                    "preventing": 0.10200632659217086,
                    "probably": 0.049217555895568504,
                    "prone": 0.08559948349123656,
                    "protect": 0.08852834400594785,
                    "provider": 0.1749660255433588,
                    "reach": 0.08852834400594785,
                    "really": 0.039608481761039246,
                    "recently": 0.06498402009455924,
                    "regex": 0.18445825500754487,
                    "released": 0.07538823425951639,
                    "renaming": 0.10200632659217086,
                    "requests": 0.15442166497562415,
                    "rewrite": 0.16096102802351164,
                    "rule": 0.0745582586074184,
                    "rules": 0.07070331492335738,
                    "sample": 0.0874830127716794,
                    "saying": 0.06952717425111299,
                    "secure": 0.084744341879495,
                    "security": 0.13344456030895974,
                    "sense": 0.060773622277972256,
                    "seriously": 0.07770581368328096,
                    "sets": 0.16352743588576246,
                    "shared": 0.08110752908831456,
                    "silly": 0.08852834400594785,
                    "simple": 0.05294510508764549,
                    "snippets": 0.09726021186007784,
                    "specifically": 0.06792861459488252,
                    "src": 0.09726021186007784,
                    "stuff": 0.1629469498743863,
                    "submit": 0.095376682579635,
                    "technically": 0.084744341879495,
                    "think": 0.03612005184127933,
                    "today": 0.06604508531443969,
                    "totally": 0.08110752908831456,
                    "trick": 0.0874830127716794,
                    "trivial": 0.0733982477444086,
                    "use": 0.03269006319238681,
                    "uses": 0.06272230417604392,
                    "various": 0.06307496046028951,
                    "wanted": 0.06952717425111299,
                    "wary": 0.10200632659217086,
                    "week": 0.06870526119805623,
                    "wordpress": 0.09222912750377243,
                    "years": 0.051225786237283286
                },
                "Max term": "filter",
                "Max score": 0.2917806355802335
            }
        ],
        "Best answer": "I personally see mod_security as a patch. I use it on some of our servers where we can't control the code that's uploaded (shared hosting servers, for example), but it's never really felt like a good solution to me. Based on it's wide and very general blacklist approach, it's more of a patch to cover up security holes than a good security policy. It can also provide a false sense of security. mod_security can reveal some common attacks but can by no means prevent any attack. Again, it's a blacklist of common known attacks. If you simply install mod_security and think that you're magically secure, you're horribly mistaken. I have found a much better policy to me managed servers where my team reviews all code that is placed on them, combined with lots of logs, logfile analysis, reporting systems, and intrusion detection/intrusion prevention systems (IPS). Everytime third-party or open-source software is installed (I'm looking at you, WordPress!) we keep a log of where it was installed, and when new versions are released we update every copy that was installed. Again, you're more likely to find mod_security on a shared hosting server, as you're experiencing now. As you grow you can move to a VPS or clod based hosting provider where you get your own managed environment and can more tightly control the available software. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "analysis": 0.08255586028510531,
                    "approach": 0.06631321041858425,
                    "attack": 0.10518760983462876,
                    "attacks": 0.21692726092254416,
                    "available": 0.06789664373089485,
                    "based": 0.122756734892095,
                    "better": 0.04917449005762917,
                    "code": 0.07045171058805479,
                    "combined": 0.1067435824904715,
                    "common": 0.12875024879292413,
                    "control": 0.12973974005686464,
                    "copy": 0.07951767423934625,
                    "cover": 0.08827303976505521,
                    "detection": 0.11508299286736415,
                    "environment": 0.06915306015796331,
                    "everytime": 0.12170235527345623,
                    "example": 0.05084127417556639,
                    "experiencing": 0.11508299286736415,
                    "false": 0.09463119089581107,
                    "felt": 0.1067435824904715,
                    "general": 0.06437512439646206,
                    "good": 0.08294306198710455,
                    "grow": 0.10012422008437942,
                    "holes": 0.11256642807666487,
                    "horribly": 0.10846363046127208,
                    "hosting": 0.2887952670857613,
                    "install": 0.0888083453096177,
                    "installed": 0.2914432670595311,
                    "known": 0.07921251850565657,
                    "like": 0.03514433024859775,
                    "likely": 0.06789664373089485,
                    "log": 0.0862917805189184,
                    "logs": 0.11256642807666487,
                    "looking": 0.05946678793473436,
                    "lots": 0.07069271561462569,
                    "magically": 0.12170235527345623,
                    "managed": 0.16822366588189608,
                    "means": 0.062210412803191485,
                    "new": 0.046976546494275004,
                    "open": 0.06189340563056326,
                    "party": 0.08725237265377496,
                    "patch": 0.20024844016875884,
                    "personally": 0.07363333947906366,
                    "placed": 0.1103864804986945,
                    "policy": 0.20024844016875884,
                    "prevent": 0.08676501239013734,
                    "prevention": 0.11805945726523322,
                    "provide": 0.07051429464283887,
                    "provider": 0.10125055330190313,
                    "really": 0.04584182193427877,
                    "released": 0.08725237265377496,
                    "reporting": 0.09907060572393277,
                    "reveal": 0.11508299286736415,
                    "reviews": 0.08293117236406758,
                    "secure": 0.09808088716489907,
                    "security": 0.23166787136734285,
                    "sense": 0.07033780258420143,
                    "server": 0.06617659576009424,
                    "servers": 0.28161520517960115,
                    "shared": 0.18774347011973408,
                    "simply": 0.06804850860667398,
                    "software": 0.09514984993777303,
                    "solution": 0.06730292897761796,
                    "source": 0.055274043224471194,
                    "systems": 0.1393006351528968,
                    "team": 0.05735462740123439,
                    "think": 0.0418044042878103,
                    "update": 0.0710555162434258,
                    "use": 0.03783462504134108,
                    "versions": 0.08411183294094804,
                    "vps": 0.10846363046127208,
                    "wide": 0.09387173505986704,
                    "wordpress": 0.1067435824904715
                },
                "Max term": "installed",
                "Max score": 0.2914432670595311
            }
        ]
    },
    {
        "ID": "7057",
        "Question": "How should I be keeping track of a php script's versions/changes when it pertains to a single script in one file? Should I have a separate changelog, and if so (1) what should it be named, (2) how should the contents of the log be formatted, and (3) how should the log be associated with the php script/file? Or, should I include the changes in a comment at the top of the php file?  Currently, I have the following comments at the top of the file:  /**  * @author    John Doe <contact@John Doe.com>  * @version   1.0  * @copyright Copyright (c) 2010, John Doe  */   Thanks in advance for your response! ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "2010": 0.1208241567957837,
                    "advance": 0.12410025549817796,
                    "associated": 0.12794878592322323,
                    "author": 0.12240148202892724,
                    "changes": 0.17858552525035262,
                    "com": 0.09955804529810457,
                    "comment": 0.10590809806565651,
                    "comments": 0.10044701756704512,
                    "contact": 0.1290257390832619,
                    "contents": 0.14665132820344975,
                    "copyright": 0.2707515837016277,
                    "currently": 0.09985040932365542,
                    "file": 0.3616614746742306,
                    "following": 0.09180158308685274,
                    "formatted": 0.15560122490693504,
                    "include": 0.10369893974870069,
                    "john": 0.44775351641814926,
                    "keeping": 0.11797204541431304,
                    "log": 0.23334649914117467,
                    "named": 0.1290257390832619,
                    "php": 0.2754047492605582,
                    "response": 0.12159873315567127,
                    "script": 0.3750039778945816,
                    "separate": 0.11372578961222464,
                    "single": 0.08754000402054067,
                    "thanks": 0.10169090502119357,
                    "track": 0.10751412702355716,
                    "version": 0.08787959781455985,
                    "versions": 0.11372578961222464
                },
                "Max term": "john",
                "Max score": 0.44775351641814926
            }
        ],
        "Best answer": "Aren't you using a VCS such as SVN, Git or Mercurial? There's no better way to keep track of the changes than being able to see the difference of the file. Of course, you would want to include the changelog on both: the main comment block and the last commit you do. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "able": 0.18750927397258196,
                    "better": 0.1507216841158738,
                    "block": 0.264487592447355,
                    "changes": 0.20241853121111414,
                    "comment": 0.24008397795689213,
                    "commit": 0.2689715912110902,
                    "course": 0.1933645246708416,
                    "difference": 0.22909423698240805,
                    "file": 0.2049633765014748,
                    "git": 0.2813239360317706,
                    "include": 0.23507601797688663,
                    "main": 0.21667586465409325,
                    "mercurial": 0.3006216531325084,
                    "svn": 0.2774729718506132,
                    "track": 0.2437246988079805,
                    "using": 0.14123212820720477,
                    "vcs": 0.32240402867053264,
                    "want": 0.14014823372003132,
                    "way": 0.13294807993354857
                },
                "Max term": "vcs",
                "Max score": 0.32240402867053264
            }
        ]
    },
    {
        "ID": "7181",
        "Question": "I have been using mysql for the same amount of time I have been using PHP. However I feel about 10x more confident in PHP; or any other programming language. But I just can't seem to really really grasp SQL. I mean, I can select, update, insert, delete, join, etc. but when it comes to more complex stuff I am lost. How to write a more complicated select statement, how to use indexes properly, which engine to use, etc. For some reason I really find the mysql docs hard to follow, but the php ones easy to follow. I am starting to think that maybe my brain is just wired in a way that makes programming make since but sql confusing. I don't know. Most people think Regex is so confusing but to me it makes more scientific sense than how to construct an sql statement. Please don't get me wrong, I am not hating on SQL, I really like it, I just want to understand it better. Whats the best/fastest way to really master MySQL?  When I say \"master\" I don't mean the guru among gurus, I mean smart enough to figure out most of the questions I ask on SO myself without needing help.  ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "10x": 0.11927149517147725,
                    "ask": 0.06733340130964459,
                    "best": 0.055577122558810074,
                    "better": 0.0531325478171916,
                    "brain": 0.10310868983791932,
                    "comes": 0.07758592829388859,
                    "complex": 0.08076051281216307,
                    "complicated": 0.08880437924318475,
                    "confident": 0.10704480493312876,
                    "confusing": 0.21408960986625752,
                    "construct": 0.11533538007626781,
                    "delete": 0.10401347202469005,
                    "docs": 0.10818322477890054,
                    "easy": 0.06816504150340753,
                    "engine": 0.09655453707531395,
                    "fastest": 0.11365416708469597,
                    "feel": 0.06698864664754697,
                    "figure": 0.08730224784432013,
                    "follow": 0.15435138307919635,
                    "grasp": 0.11365416708469597,
                    "guru": 0.12434603011245847,
                    "gurus": 0.13149818540982575,
                    "hard": 0.06865848305996063,
                    "help": 0.06002718926558092,
                    "indexes": 0.1275620703146163,
                    "insert": 0.11211933987410998,
                    "join": 0.10940021662707294,
                    "know": 0.0456039801006793,
                    "language": 0.053499502202424,
                    "like": 0.037973099573547886,
                    "lost": 0.09595653454055204,
                    "make": 0.04716036570724665,
                    "makes": 0.13010133901985327,
                    "master": 0.18749746725489305,
                    "maybe": 0.0722538795039294,
                    "mean": 0.2195972180142882,
                    "mysql": 0.32454967433670157,
                    "needing": 0.11365416708469597,
                    "ones": 0.07618999459913886,
                    "people": 0.048786195967691744,
                    "php": 0.22008494640803528,
                    "programming": 0.09749138438946482,
                    "properly": 0.09225719327385555,
                    "questions": 0.06653921124296243,
                    "really": 0.2476581651478015,
                    "reason": 0.06968881300358876,
                    "regex": 0.11533538007626781,
                    "say": 0.05726429580905439,
                    "scientific": 0.10940021662707294,
                    "select": 0.196961490937563,
                    "sense": 0.07599929668373763,
                    "smart": 0.09917257474270988,
                    "sql": 0.3303656978257271,
                    "starting": 0.08152204338909802,
                    "statement": 0.18265718034282843,
                    "stuff": 0.06792340230860434,
                    "think": 0.09033848677182924,
                    "time": 0.04129931743168233,
                    "understand": 0.06266978577491591,
                    "update": 0.07677477915997888,
                    "use": 0.08175987272257193,
                    "using": 0.09957456154117814,
                    "want": 0.049405185281102236,
                    "way": 0.09373396078619219,
                    "whats": 0.11927149517147725,
                    "write": 0.0553992448964431,
                    "wrong": 0.0717996213008532
                },
                "Max term": "sql",
                "Max score": 0.3303656978257271
            }
        ],
        "Best answer": "Fastest way I found to \"master\" anything was to challenge myself with it. Take a set of data and write down eight to ten different things you would like to query for. A group of students you might want to find the average age of everyone grouped by the grade point average rounded to the nearest whole number. Then write the queries for them. Start with one table, then add more. Practice data joins and built in functions.  ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "add": 0.13678598327277983,
                    "age": 0.19600245279153095,
                    "average": 0.35370130121155763,
                    "built": 0.15994539992980292,
                    "challenge": 0.2073797501078065,
                    "data": 0.23858073350090878,
                    "different": 0.10699754962216047,
                    "fastest": 0.2178671676399502,
                    "functions": 0.15120211349222223,
                    "grade": 0.2445276549959063,
                    "group": 0.16534305069967545,
                    "grouped": 0.2445276549959063,
                    "joins": 0.2445276549959063,
                    "like": 0.07279180220847958,
                    "master": 0.17970983017299516,
                    "number": 0.13234075700409895,
                    "point": 0.11536328099582216,
                    "practice": 0.14833136782938564,
                    "queries": 0.2031475486497399,
                    "query": 0.19442944916320545,
                    "rounded": 0.2520729150536311,
                    "set": 0.13113730328599457,
                    "start": 0.11611305628752218,
                    "students": 0.18627492072614124,
                    "table": 0.18394203163106174,
                    "things": 0.09678141648100796,
                    "want": 0.09470631882682716,
                    "way": 0.0898407558296721,
                    "write": 0.21239303202997578
                },
                "Max term": "average",
                "Max score": 0.35370130121155763
            }
        ]
    },
    {
        "ID": "8352",
        "Question": "I really like using ClassNames and memberNames as convention but I am not sure how I would name the file containing a class. I like making my classes defined in a file with the exact same name as the class. But I also like making php files all lowercase. So I am conflicted. If I have a class called ProductGroup should that be defined in ProductGroup.php, productgroup.php, or product_group.php? I know there is no right answer, so I am looking for what is most common or your opinion of which to use.. which do you use? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "answer": 0.11331547530707324,
                    "called": 0.14498223714015632,
                    "class": 0.37895883374729344,
                    "classes": 0.14367171487044342,
                    "common": 0.12486898654055488,
                    "containing": 0.21411761261634535,
                    "convention": 0.18510195144576444,
                    "defined": 0.3160913274865164,
                    "exact": 0.17803579061699545,
                    "file": 0.25942205485741515,
                    "files": 0.1385467231773747,
                    "know": 0.08186880973464894,
                    "like": 0.20450928562540288,
                    "looking": 0.11534824377971176,
                    "making": 0.252146357204695,
                    "opinion": 0.14978939242374792,
                    "php": 0.5267988324165725,
                    "really": 0.08891977918135971,
                    "right": 0.11218728959155981,
                    "sure": 0.11266588462531539,
                    "use": 0.14677629998688754,
                    "using": 0.08937872105930919
                },
                "Max term": "php",
                "Max score": 0.5267988324165725
            }
        ],
        "Best answer": "At work we use underscores as folder delimiters and name the files exactly the same as the path. The autoloader is very simple, it just has to replace _ with / and add '.php' to the end. ProjectName_Models_ProductGroup() will always reside in ProjectName/Models/ProductGroup.php. It can make for some very long class names, but it doesn't really matter with an IDE. You could use the same convention, but just run strtolower() before including the file. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "add": 0.16948553632909263,
                    "class": 0.16712927175079142,
                    "convention": 0.2449022288690895,
                    "end": 0.15124709947010093,
                    "exactly": 0.1981813577814767,
                    "file": 0.17161634157864508,
                    "files": 0.1833065564335206,
                    "folder": 0.2663041910207886,
                    "ide": 0.2017644637062748,
                    "including": 0.20651257366943787,
                    "long": 0.14368315754729993,
                    "make": 0.11201460026445377,
                    "matter": 0.17918223178232634,
                    "models": 0.24285807681729712,
                    "names": 0.20486935105213686,
                    "path": 0.22654074696958154,
                    "php": 0.3484949975318175,
                    "really": 0.11764679919348604,
                    "replace": 0.23555322674892532,
                    "reside": 0.31233253714822856,
                    "run": 0.15751922949531783,
                    "simple": 0.15725980571795625,
                    "use": 0.19419483550112185,
                    "work": 0.10360713903027824
                },
                "Max term": "php",
                "Max score": 0.3484949975318175
            }
        ]
    },
    {
        "ID": "12996",
        "Question": "I am a fairly adept .NET and PHP programmer. These days my pattern of choice for complex web apps is an SOA approach where I use PHP as the front end, and WCF web services as the middle tier. My ajax calls are usually to JSON webHttpBinding WCF endpoints. On the .NET side of things I am absolutely in love with the Visual Studio plugin ReSharper. So my question is as follows, I want to rethink my tool chain on the PHP side of things. On one side JetBrains, the makers of Resharper, have a PHP IDE called PHPStorm. On the other side, I can use VS.PHP and ReSharper. Does anyone use the later combination fo VS.PHP and Resharper? Can you recommend it? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "absolutely": 0.102663323026763,
                    "ajax": 0.11912009565119348,
                    "approach": 0.07889435704310521,
                    "apps": 0.09424096160962599,
                    "called": 0.08892506237159768,
                    "calls": 0.0982186124939668,
                    "chain": 0.12904168466265176,
                    "choice": 0.08838550952779961,
                    "combination": 0.1251441273076765,
                    "complex": 0.08892506237159768,
                    "days": 0.08368250723614883,
                    "end": 0.07011560666638951,
                    "fairly": 0.09285303892362495,
                    "follows": 0.12046012027753734,
                    "ide": 0.09353460546382765,
                    "json": 0.1251441273076765,
                    "later": 0.0863657533703099,
                    "love": 0.09460401242944752,
                    "makers": 0.1404580612973644,
                    "middle": 0.12046012027753734,
                    "net": 0.14439327963531345,
                    "pattern": 0.09866512993707253,
                    "php": 0.4846692252166268,
                    "plugin": 0.11557892725579691,
                    "programmer": 0.0660956866612362,
                    "question": 0.057286252781539475,
                    "recommend": 0.09155771547546489,
                    "resharper": 0.5253173749377164,
                    "services": 0.09353460546382765,
                    "soa": 0.1313293437344291,
                    "studio": 0.09778213000502255,
                    "things": 0.11118358067730824,
                    "tier": 0.1339228776843922,
                    "tool": 0.08431937259816771,
                    "use": 0.13503818007431492,
                    "usually": 0.0755995681038662,
                    "visual": 0.09285303892362495,
                    "vs": 0.18438916167496758,
                    "want": 0.05439984256688236,
                    "wcf": 0.23115785451159382,
                    "web": 0.1330451506947867
                },
                "Max term": "resharper",
                "Max score": 0.5253173749377164
            }
        ],
        "Best answer": "Since you're also working with WCF Web Services, I'd recommend you stick with Visual Studio. I've done quite a bit with that platform and it works well.  PHP Storm is probably very nice, but it's going to cost extra and be a new environment that you'll have to get used to.  If it's not broke, don't fix it :) ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "bit": 0.18170119720747713,
                    "broke": 0.3369703784321257,
                    "cost": 0.2038687669439588,
                    "environment": 0.19737963726884508,
                    "extra": 0.23670571746367997,
                    "fix": 0.20606194982060563,
                    "going": 0.15339689382410984,
                    "new": 0.1340824785772737,
                    "nice": 0.21399945347148341,
                    "php": 0.1937935194879845,
                    "platform": 0.20777735337610045,
                    "probably": 0.16258656683071782,
                    "quite": 0.18661063207248701,
                    "recommend": 0.2196544487883175,
                    "services": 0.2243971695787388,
                    "stick": 0.2534805971509872,
                    "studio": 0.23458732839786128,
                    "used": 0.141046275238402,
                    "visual": 0.22276203569708464,
                    "wcf": 0.27728330076912294,
                    "web": 0.15959309976259334,
                    "working": 0.14744755470743445,
                    "works": 0.1833958033807291
                },
                "Max term": "broke",
                "Max score": 0.3369703784321257
            }
        ]
    },
    {
        "ID": "17650",
        "Question": "I was at work last week and one of our \"lead developers\" (who said he has programmed C++ before, but I don't believe him) was talking about C++ and how our team of developers who only know PHP would not have a hard time at all learning C++. My first reaction was pure shock and then I laughed at his comment. He gave me a bad look and i asked if he was serious. Me personally I program a lot of C and C++ for mostly school projects and coding competitions. I don't think it's at all like PHP. I asked him why they were the same and he could not give me an answer (he doesn't know C++ at all I was thinking). Then I said \"OK, yeah they both use curly braces and have conditional statements. But C++ you have to worry about memory management and all the easy to use built in functions in PHP, for example the array functions, are non-existent in C++. You actually have to know the algorithms behind them.\". There are some great C++ libraries (STL, Boost) that will make your life easier but C++ is like PHP, come on! If you already know one language it will make it a little easier to learn another because you will already be good at boolean login (if this then that) or looping but there is just so much more to C++ than PHP. Like you have to compile the language and actually have to define what type of variable you are using and returning from functions. What do you think? EDIT: Actually what he said was \"C++ is not much different than PHP\" ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "actually": 0.1935324631492393,
                    "algorithms": 0.09314643981587369,
                    "answer": 0.06678407272244863,
                    "array": 0.10731366476524605,
                    "asked": 0.15628966848463555,
                    "bad": 0.07063695664469719,
                    "believe": 0.0849288735264875,
                    "boolean": 0.12619323330177565,
                    "boost": 0.12619323330177565,
                    "braces": 0.11862601365089766,
                    "built": 0.08828048992929165,
                    "coding": 0.06915226110405527,
                    "come": 0.07318007627055306,
                    "comment": 0.08954626711584879,
                    "compile": 0.10091326628952785,
                    "curly": 0.12619323330177565,
                    "define": 0.09314643981587369,
                    "developers": 0.12734754448244756,
                    "different": 0.05905637865186248,
                    "easier": 0.15099569758280793,
                    "easy": 0.07212089504787067,
                    "edit": 0.07489086651238148,
                    "example": 0.05812147234346028,
                    "existent": 0.1349649392466026,
                    "functions": 0.2503641241941815,
                    "gave": 0.11105879400001968,
                    "good": 0.04741003211994838,
                    "great": 0.07124099189210174,
                    "hard": 0.0726429727276832,
                    "know": 0.1930021483192002,
                    "language": 0.11320852737283132,
                    "lead": 0.08922168397766872,
                    "learn": 0.06279440761642474,
                    "learning": 0.0692623679722489,
                    "libraries": 0.08417723932941426,
                    "life": 0.08681019767705556,
                    "like": 0.12053043034599867,
                    "little": 0.07051846062741467,
                    "login": 0.12024991220255857,
                    "look": 0.06459662837343351,
                    "lot": 0.05781996239285302,
                    "make": 0.0997944902717182,
                    "management": 0.07444824355252559,
                    "memory": 0.09162207782028786,
                    "non": 0.07016742093605192,
                    "ok": 0.0898765953856813,
                    "personally": 0.08417723932941426,
                    "php": 0.46571447684710016,
                    "program": 0.0699370098610351,
                    "programmed": 0.11713217179298104,
                    "projects": 0.0633491891030437,
                    "pure": 0.11446147215841213,
                    "returning": 0.12024991220255857,
                    "said": 0.22983005903560882,
                    "school": 0.09569535722370398,
                    "shock": 0.1349649392466026,
                    "statements": 0.10648405885214626,
                    "stl": 0.13912948073908815,
                    "talking": 0.08858897728378709,
                    "team": 0.065567502867038,
                    "think": 0.09558114217430433,
                    "thinking": 0.07304434432664328,
                    "time": 0.043696059920834376,
                    "type": 0.076774452989157,
                    "use": 0.08650468142760695,
                    "using": 0.05267660918236259,
                    "variable": 0.09395800507022163,
                    "week": 0.09090417931224007,
                    "work": 0.04615211590108546,
                    "worry": 0.09437741732793355,
                    "yeah": 0.12024991220255857
                },
                "Max term": "php",
                "Max score": 0.46571447684710016
            }
        ],
        "Best answer": "As someone who went from PHP to C++ (though only limited C++) when I started writing C++, I often thought \"Wow, this is a lot like PHP\". When you consider that PHP itself is written in C, and whenever the developers faced a design decision they couldn't resolve internally, the final answer almost always ended up being \"Do it like C++\" it's really not that absurd a statement. Your response about Memory Management and Array Sorting/whatever is a non-starter. That's not a PHP/C++ answer, that's a C++ with zero libraries versus just about every other popular language in existence answer. It feels to me like you're asking this question so that you can get people to agree with you -- that people who write C++ are so much better than people who write PHP. Personally, I think that's a foolish point of view which will lead to nothing but poor decisions on your part. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "absurd": 0.16116898862733905,
                    "agree": 0.11521283104225065,
                    "answer": 0.2509265231688677,
                    "array": 0.1344025288782224,
                    "asking": 0.10364974178576085,
                    "better": 0.070406452121369,
                    "consider": 0.09474951983188704,
                    "decision": 0.11429608139157343,
                    "decisions": 0.12162755077074676,
                    "design": 0.08026504455980157,
                    "developers": 0.07974675015672328,
                    "ended": 0.14042905738532424,
                    "existence": 0.16903373101944077,
                    "faced": 0.15283202573267565,
                    "feels": 0.1344025288782224,
                    "final": 0.12564439927604024,
                    "internally": 0.14184610456280536,
                    "language": 0.07089270692028214,
                    "lead": 0.11174364405133787,
                    "libraries": 0.10542584548398168,
                    "like": 0.1509555626556979,
                    "limited": 0.11928818801331553,
                    "lot": 0.07241528077754994,
                    "management": 0.09324098870251002,
                    "memory": 0.11474996205806583,
                    "non": 0.08787957096888063,
                    "people": 0.1939411779612587,
                    "personally": 0.10542584548398168,
                    "php": 0.4860611457728018,
                    "point": 0.07974675015672328,
                    "poor": 0.12638649715619854,
                    "popular": 0.11985144707252597,
                    "question": 0.06894092766442116,
                    "really": 0.06563484516849366,
                    "resolve": 0.15804780984957045,
                    "response": 0.12876557805380884,
                    "sorting": 0.14184610456280536,
                    "started": 0.09657180224754053,
                    "starter": 0.17424951513633555,
                    "statement": 0.12102039663784525,
                    "think": 0.059854200531672445,
                    "thought": 0.10021006136708686,
                    "versus": 0.14857041980907715,
                    "view": 0.11174364405133787,
                    "went": 0.11716180276464223,
                    "wow": 0.15283202573267565,
                    "write": 0.14682014861329049,
                    "writing": 0.0831626884505818,
                    "written": 0.09379534163859074,
                    "zero": 0.13782925605751187
                },
                "Max term": "php",
                "Max score": 0.4860611457728018
            }
        ]
    },
    {
        "ID": "20080",
        "Question": "Over on stackoverflow, I see this issue crop up all the time:    E_NOTICE ?== E_DEBUG, avoiding isset() and @ with more sophisticated error_handler  How to set PHP not to check undefind index for $_GET when E_NOTICE is on?  How to stop PHP from logging PHP Notice errors  How do I turn off such PHP 5.3 Notices ?   Even Pekka (who offers a lot of solid PHP advice) has bumped against the dreaded E_NOTICE monster and hoped for a better solution than using isset(): isset() and empty() make code ugly  Personally, I use isset() and empty() in many places to manage the flow of my applications.  For example: public function do_something($optional_parameter = NULL) {     if (!empty($optional_parameter)) {         // do optional stuff with the contents of $optional_parameter     }     // do mandatory stuff }    Even a simple snippet like this: if (!isset($_REQUEST['form_var'])) {     // something's missing, do something about it. }  seems very logical to me.  It doesn't look like bloat, it looks like stable code.  But a lot of developers fire up their applications with E_NOTICE's enabled, discover a lot of frustrating \"uninitialized array index\" notices, and then grimace at the prospect of checking for defined variables and \"littering\" their code with isset(). I assume other languages handle things differently.  Speaking from experience, JavaScript isn't as polite as PHP.  An undefined variable will typically halt the execution of the script.  Also, (speaking from inexperience) I'm sure languages like C/C++ would simply refuse to compile. So, are PHP devs just lazy?  (not talking about you, Pekka, I know you were refactoring an old application.)  Or do other languages handle undefined variables more gracefully than requiring the programmer to first check if they are defined? (I know there are other E_NOTICE messages besides undefined variables, but those seem to be the ones that cause the most chagrin) Addendum From the answers so far, I'm not the only one who thinks isset() is not code bloat.  So, I'm wondering now, are there issues with programmers in other languages that echo this one?  Or is this solely a PHP culture issue? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "addendum": 0.09654127369208626,
                    "advice": 0.06720875461198735,
                    "answers": 0.05919811406577987,
                    "application": 0.04632998655483628,
                    "applications": 0.10959926212878075,
                    "array": 0.07676214236700887,
                    "assume": 0.06502433375457817,
                    "avoiding": 0.08378538247294695,
                    "better": 0.040211669723814514,
                    "bloat": 0.19904039306279703,
                    "cause": 0.06607191449845205,
                    "check": 0.11872383481207516,
                    "checking": 0.0717600579791432,
                    "code": 0.11522156770002347,
                    "compile": 0.07218389690243147,
                    "contents": 0.08869443648613648,
                    "culture": 0.07134926234437786,
                    "defined": 0.13325647371688146,
                    "developers": 0.04554625154697195,
                    "devs": 0.08101343749656165,
                    "differently": 0.07262163463461836,
                    "discover": 0.09654127369208626,
                    "echo": 0.08485393699134906,
                    "enabled": 0.0941073165087675,
                    "errors": 0.06502433375457817,
                    "example": 0.04157465635311851,
                    "execution": 0.08020411063280053,
                    "experience": 0.04491723647541514,
                    "far": 0.05378523404314887,
                    "flow": 0.07738317549229427,
                    "frustrating": 0.08485393699134906,
                    "function": 0.05709379843909374,
                    "halt": 0.0941073165087675,
                    "handle": 0.12300492095246938,
                    "index": 0.17738887297227296,
                    "inexperience": 0.09952019653139851,
                    "issue": 0.11179498723629026,
                    "issues": 0.05681853498103361,
                    "javascript": 0.06293051738501304,
                    "know": 0.06902782799760925,
                    "languages": 0.18171863449886627,
                    "lazy": 0.08378538247294695,
                    "like": 0.11495490437949332,
                    "logging": 0.07616872001628414,
                    "logical": 0.0701876774512996,
                    "look": 0.0462063763685398,
                    "looks": 0.06189513010042004,
                    "lot": 0.12407695314192654,
                    "make": 0.035691814674479266,
                    "manage": 0.06428929648008841,
                    "mandatory": 0.09026681701398008,
                    "messages": 0.07560055747393062,
                    "missing": 0.0709507311153821,
                    "notice": 0.0709507311153821,
                    "notices": 0.19308254738417252,
                    "null": 0.07738317549229427,
                    "offers": 0.08378538247294695,
                    "old": 0.056955457255594116,
                    "ones": 0.05766196098144727,
                    "optional": 0.08728789417466783,
                    "personally": 0.06021251108702141,
                    "php": 0.44417134329000124,
                    "places": 0.07402817694608704,
                    "polite": 0.09654127369208626,
                    "programmer": 0.04542965862471657,
                    "programmers": 0.046392223519499974,
                    "public": 0.06382083421249543,
                    "refactoring": 0.06812979597487583,
                    "refuse": 0.08601552188442732,
                    "requiring": 0.0941073165087675,
                    "script": 0.07560055747393062,
                    "set": 0.05177394879113887,
                    "simple": 0.05010853788861914,
                    "simply": 0.05564560303691841,
                    "snippet": 0.09204943503234372,
                    "solely": 0.09026681701398008,
                    "solid": 0.07453200295552852,
                    "solution": 0.05503591696266997,
                    "sophisticated": 0.09654127369208626,
                    "speaking": 0.15120111494786123,
                    "stable": 0.07505559181793713,
                    "stackoverflow": 0.06720875461198735,
                    "stop": 0.06527862343811007,
                    "stuff": 0.10281130991680519,
                    "sure": 0.04749721737937582,
                    "talking": 0.06336825511719993,
                    "things": 0.03820999803460757,
                    "thinks": 0.07871927012185828,
                    "time": 0.03125606771381747,
                    "turn": 0.0701876774512996,
                    "typically": 0.06662823685844073,
                    "ugly": 0.07803451465724938,
                    "undefined": 0.2708004510419402,
                    "use": 0.030938672561805918,
                    "using": 0.037679911335740064,
                    "variable": 0.06720875461198735,
                    "variables": 0.19904153386953652,
                    "wondering": 0.06189513010042004
                },
                "Max term": "php",
                "Max score": 0.44417134329000124
            }
        ],
        "Best answer": "I code to E_STRICT and nothing else.  Using empty and isset checks does not make your code ugly, it makes your code more verbose. In my mind what is the absolute worst thing that can happen from using them? I type a few more characters. Verses the consequences of not using them, at the very least warnings. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "absolute": 0.2911498134077976,
                    "characters": 0.2560410425552861,
                    "checks": 0.26497659420076736,
                    "code": 0.28824218627574155,
                    "consequences": 0.279467143799867,
                    "happen": 0.21364958171385848,
                    "make": 0.11905047407680663,
                    "makes": 0.16421231956181473,
                    "mind": 0.18861930705170482,
                    "thing": 0.1471115010966436,
                    "type": 0.18317714736475654,
                    "ugly": 0.2602850555239972,
                    "using": 0.37704538269661475,
                    "verbose": 0.2869058004390865,
                    "warnings": 0.2958413520845678,
                    "worst": 0.24692186824490647
                },
                "Max term": "using",
                "Max score": 0.37704538269661475
            }
        ]
    },
    {
        "ID": "20342",
        "Question": "Although questions similar to this one has already been asked and I can perhaps assemble the answer for myself by reading  already posted materials. Still I am going ahead with the question, cause I feel it has elements of new flavor and I would like to see the views of others on how to tackle this. I have developed several Web Applications of various scale. In some of them, I was only Developer, in another I led small teams and was part of a big team in another. Most of these were developed using PHP. One of them used Kohana Framework, the rest were all developed using Raw PHP. The main difficulty that I faced in regards to speedy development was, whenever a small change was  done to fix a bug or modify a feature, I had to refresh my web browser, go through several pages until I reached the page which included the fix.   I would like to know, what should be the development approach so that I can test out my code without having to, or at least minimize the number of refreshes required to test out changes in code. Although, the concepts maybe applicable for developments of any nature,  for this question, let us stick to PHP and it's framework. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "ahead": 0.11979381021395115,
                    "answer": 0.07455079043781437,
                    "applicable": 0.13075416992245442,
                    "applications": 0.08551945530826541,
                    "approach": 0.0846251764548235,
                    "asked": 0.0872327626020705,
                    "big": 0.08079762242511511,
                    "browser": 0.10896298562826817,
                    "bug": 0.0886701254846427,
                    "cause": 0.1031108062104024,
                    "change": 0.07543276334182829,
                    "changes": 0.08427794344237154,
                    "code": 0.0899064967964128,
                    "concepts": 0.1014759679301546,
                    "developed": 0.318966912488252,
                    "developer": 0.0701844957290638,
                    "development": 0.12600052397094313,
                    "developments": 0.14686242027607455,
                    "difficulty": 0.13423449093971085,
                    "elements": 0.11476956087220687,
                    "faced": 0.13622013542485056,
                    "feature": 0.08804193221004436,
                    "feel": 0.07911884897957669,
                    "fix": 0.18426225878968105,
                    "flavor": 0.15066081615061028,
                    "framework": 0.16588828829147695,
                    "going": 0.06858437031183741,
                    "included": 0.1171305938641704,
                    "know": 0.053861879512763534,
                    "led": 0.14365092232372628,
                    "let": 0.08376770981449715,
                    "like": 0.08969842147291623,
                    "main": 0.09021405380913054,
                    "materials": 0.14086899625977103,
                    "maybe": 0.0853375021999979,
                    "minimize": 0.13622013542485056,
                    "modify": 0.11552722613140247,
                    "nature": 0.12177945469909086,
                    "new": 0.059948817305369655,
                    "number": 0.08153910632546219,
                    "page": 0.09690587277873525,
                    "pages": 0.11552722613140247,
                    "php": 0.25993759403964917,
                    "posted": 0.12777287871539436,
                    "question": 0.12289495552703966,
                    "questions": 0.0785880304949387,
                    "raw": 0.13242173955031483,
                    "reached": 0.14086899625977103,
                    "reading": 0.08845861606927904,
                    "refresh": 0.14365092232372628,
                    "refreshes": 0.15530967698553075,
                    "regards": 0.13841516356661834,
                    "required": 0.09538450374012263,
                    "rest": 0.09924166833760631,
                    "scale": 0.11264907126601656,
                    "similar": 0.08169062334581807,
                    "small": 0.15743894512334855,
                    "stick": 0.11333219798963468,
                    "tackle": 0.13622013542485056,
                    "team": 0.07319273842561365,
                    "teams": 0.10108654540564276,
                    "test": 0.14997422003615715,
                    "used": 0.06306235889722744,
                    "using": 0.11760537182120437,
                    "various": 0.09316015328743397,
                    "views": 0.12284807346924102,
                    "web": 0.1427094379874772
                },
                "Max term": "developed",
                "Max score": 0.318966912488252
            }
        ],
        "Best answer": "You're going to have to refresh the page: PHP works on page generation. But you can automate the refreshes using a variety of different methods. Check out this article for four different ways: Quick Tip: 4 Ways to Auto-Refresh your Browser when Designing new Sites You'll also want to get into test-driven development. It'll automate the process of testing the same things over and over. For PHP, there's SimpleTest among other frameworks for TDD. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "article": 0.14105627163891205,
                    "auto": 0.1803301980827587,
                    "automate": 0.38856021210351416,
                    "browser": 0.15027678882966172,
                    "check": 0.1277638892184985,
                    "designing": 0.15444824727018988,
                    "development": 0.08688709300700309,
                    "different": 0.181839853173096,
                    "driven": 0.147327266792683,
                    "frameworks": 0.13638667820288494,
                    "generation": 0.18513009837508326,
                    "going": 0.09458844097323882,
                    "methods": 0.12348716546847868,
                    "new": 0.08267867943267729,
                    "page": 0.26729633546579457,
                    "php": 0.2389960633766673,
                    "process": 0.10596036339576825,
                    "quick": 0.14951054041841486,
                    "refresh": 0.3962336236430797,
                    "refreshes": 0.21419603544254068,
                    "sites": 0.13941396107911724,
                    "tdd": 0.1422057294189718,
                    "test": 0.10341880806733278,
                    "testing": 0.11183709360785994,
                    "things": 0.08223888596017828,
                    "tip": 0.19428010605175708,
                    "using": 0.08109798719494704,
                    "variety": 0.17436417666097348,
                    "want": 0.08047559580031688,
                    "ways": 0.24284684892943706,
                    "works": 0.11308653448164743
                },
                "Max term": "refresh",
                "Max score": 0.3962336236430797
            }
        ]
    },
    {
        "ID": "20369",
        "Question": "I'm planning on moving to NY in 6-12 months tops, so I'm forced to find a new job. When I'm planing to start my life in another city it's also probably a good time to think about career changes. I've found a lot of different opinions about PHP vs .Net vs Java and this is not the topic here. I don't want to start a new fight about which language is better. Knowing a programming language is not the most important thing for being a software developer. To be a really good developer you need to know OOP, design patterns, testing... and a language is just a tool to make things happen.  So back to my question. I have mixed experience in IT - 1 year as an IT support guy (Windows administration and support), around 2 years of experience in embedded programming (VB.Net 2005) and for the last 2 years I'm working with PHP/MySQL. I have worked with Magento web shop, assisted in some projects in Symfony, modified few Drupal sites. My main concerns are the following:  Do I continue to improve my skills in PHP e.g. to start learning some major PHP framework like Zend, Symfony maybe get some PHP certification. Or do I start learning .NET or Java. I'm more familiar to .NET so I'll probably choose it if choice falls between .NET and Java ( or you could convince me to choose Java :).  Career-wise, I don't know what is the best choice. Learning a new framework and language is more time consuming then improving my existing skills in PHP. But with .NET you have a lot of possibilities (Windows 7 Phone development, Silverlight, WPF) and possibly bigger chances to find better jobs. PHP jobs are less well payed then .NET, at least, according to my research (correct me if I'm wrong). But if I start now with .NET I'm just a beginner and my salary will be low. I need at least 2+ years of experience in some language to even try to find some job that is paying higher than $50-60k in NY. My main goal in the next 2-3 years is to try to find a job in the $60-80k category. Don't get me wrong, I'm not just chasing money, but money is an important factor when you're trying to start a family. I'm 27 years old and I feel that there isn't a lot of room for wrong decisions regarding my career, so any advice will be very welcome. Update Thank you all for spending time to help me with my problem. All of the answers and comments have been very helpful. I have decided to stick with PHP but also to learn C# and Silverlight 4. We'll see where the life will take me. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "12": 0.06339837917058508,
                    "2005": 0.07455198246308564,
                    "50": 0.05997870547359806,
                    "60": 0.07325334261496806,
                    "according": 0.0619889273829247,
                    "administration": 0.07455198246308564,
                    "advice": 0.0555081707868651,
                    "answers": 0.04889212789009996,
                    "beginner": 0.06339837917058508,
                    "best": 0.034739102250677785,
                    "better": 0.06642218691719058,
                    "bigger": 0.060352493648386636,
                    "career": 0.16049384663261543,
                    "category": 0.07325334261496806,
                    "certification": 0.07325334261496806,
                    "chances": 0.06444924016033102,
                    "changes": 0.04460234635273619,
                    "choice": 0.10034794614723964,
                    "choose": 0.10324938777408137,
                    "city": 0.07602425889466564,
                    "comments": 0.05017397307361982,
                    "concerns": 0.060352493648386636,
                    "consuming": 0.07209166968567933,
                    "continue": 0.058927844483852125,
                    "convince": 0.06690955293773733,
                    "correct": 0.050326054038923096,
                    "decided": 0.059267123412389,
                    "decisions": 0.05737235486350155,
                    "design": 0.03786144331969291,
                    "developer": 0.07428736533516318,
                    "development": 0.03334157658119109,
                    "different": 0.03488911402292318,
                    "drupal": 0.07455198246308564,
                    "embedded": 0.05859869481204656,
                    "existing": 0.04916438110963437,
                    "experience": 0.111292359809922,
                    "factor": 0.060739399843969,
                    "falls": 0.07772387730170101,
                    "familiar": 0.05309697031862068,
                    "family": 0.06690955293773733,
                    "feel": 0.04187200305415529,
                    "fight": 0.06838182936931732,
                    "following": 0.045855519352190156,
                    "forced": 0.06624112433739489,
                    "framework": 0.08779292170671413,
                    "goal": 0.05434649785757638,
                    "good": 0.05601745498870557,
                    "guy": 0.05708595706835623,
                    "happen": 0.052901820176768595,
                    "help": 0.03752066623296682,
                    "helpful": 0.055028717197898806,
                    "higher": 0.055028717197898806,
                    "important": 0.08196801221307883,
                    "improve": 0.05215402890345431,
                    "improving": 0.06838182936931732,
                    "java": 0.15367673435053442,
                    "job": 0.1170199430834957,
                    "jobs": 0.11151189929047352,
                    "know": 0.05701055595596824,
                    "knowing": 0.05309697031862068,
                    "language": 0.167202312012801,
                    "learn": 0.037097453269974,
                    "learning": 0.12275571456523324,
                    "life": 0.10257082991700761,
                    "like": 0.02373551073042261,
                    "lot": 0.10247600547693383,
                    "low": 0.05479658872565605,
                    "main": 0.09548781827194508,
                    "major": 0.051974745356909914,
                    "make": 0.029478114214167704,
                    "maybe": 0.04516309575831513,
                    "mixed": 0.07602425889466564,
                    "modified": 0.06501478438884987,
                    "money": 0.09751696292749021,
                    "months": 0.050023961301374424,
                    "moving": 0.05859869481204656,
                    "mysql": 0.06762113499894638,
                    "need": 0.06019219014450216,
                    "net": 0.3278720488523153,
                    "new": 0.09517998910543045,
                    "old": 0.04703990226927416,
                    "oop": 0.059617174882258234,
                    "opinions": 0.059267123412389,
                    "patterns": 0.053497948877538476,
                    "paying": 0.06561091308961974,
                    "phone": 0.05997870547359806,
                    "php": 0.36684415481752125,
                    "planning": 0.05271006412303832,
                    "possibilities": 0.07455198246308564,
                    "possibly": 0.05309697031862068,
                    "probably": 0.0769426292624237,
                    "problem": 0.03547056834825266,
                    "programming": 0.0609380805435182,
                    "projects": 0.03742520507234168,
                    "question": 0.03251979787077544,
                    "really": 0.030960301383652362,
                    "regarding": 0.06243901825100437,
                    "research": 0.05680681063498269,
                    "room": 0.06243901825100437,
                    "salary": 0.06624112433739489,
                    "shop": 0.06762113499894638,
                    "silverlight": 0.12889848032066203,
                    "sites": 0.053497948877538476,
                    "skills": 0.09233224570896283,
                    "software": 0.032130791342740474,
                    "spending": 0.06290826758641808,
                    "start": 0.2271686599181575,
                    "stick": 0.05997870547359806,
                    "support": 0.08762263985397246,
                    "symfony": 0.1594681984220553,
                    "testing": 0.04291575298581754,
                    "thank": 0.06561091308961974,
                    "thing": 0.036426311320245014,
                    "things": 0.03155789909983664,
                    "think": 0.028233540930598246,
                    "time": 0.07744380124884588,
                    "tool": 0.0478657412615168,
                    "topic": 0.058927844483852125,
                    "try": 0.07757877117469066,
                    "trying": 0.0418010980176596,
                    "update": 0.04798893466802783,
                    "vb": 0.06762113499894638,
                    "vs": 0.10467255189649947,
                    "want": 0.030881263803784774,
                    "web": 0.03776299895876216,
                    "welcome": 0.0700814477763527,
                    "windows": 0.09297146119993058,
                    "wise": 0.06762113499894638,
                    "worked": 0.04442159320336701,
                    "working": 0.03488911402292318,
                    "wpf": 0.060739399843969,
                    "wrong": 0.1346374697587628,
                    "year": 0.050326054038923096,
                    "years": 0.20020532345686526,
                    "zend": 0.07209166968567933
                },
                "Max term": "php",
                "Max score": 0.36684415481752125
            }
        ],
        "Best answer": "What on earth does the choice of programming language have anything to do with your career? This question is like asking, \"I have two choices for a place to work. Should I work at the one where the boss has a norwegian accent, or the one where the boss has a spanish accent?\" There are much more important career considerations.  Startup or established company? Product company or company where IT is a support function? Will you be learning new things or rehashing the old? 9 to 5 or \"work any 80 hours you want?\" Nice co-workers or mean co-workers? Smart co-workers or stupid co-workers? Suit and tie or t-shirt?  This list could go on for hours. The choice of a programming language is just about as relevant to a programmer's career as the choice of whether to comb your hair to the left or to the right. It's all software development no matter what programming language dialect you happen to be speaking. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "80": 0.11364016479944668,
                    "asking": 0.08898457449300476,
                    "boss": 0.20677888612339135,
                    "career": 0.2921017609102808,
                    "choice": 0.2739526691054646,
                    "choices": 0.12056006800012595,
                    "company": 0.21208657306537607,
                    "considerations": 0.14145889017521826,
                    "development": 0.060682284307040334,
                    "dialect": 0.14145889017521826,
                    "earth": 0.14145889017521826,
                    "established": 0.12177662038078989,
                    "function": 0.0858214394236751,
                    "happen": 0.09628228840676836,
                    "hours": 0.1854826852487087,
                    "important": 0.07459164699492613,
                    "language": 0.18258677497714404,
                    "learning": 0.07447255484376843,
                    "left": 0.10193818661868996,
                    "like": 0.04319906729092225,
                    "list": 0.08052445111139302,
                    "matter": 0.0858214394236751,
                    "mean": 0.0832729406205474,
                    "new": 0.05774311186887092,
                    "nice": 0.09215965063294669,
                    "old": 0.08561348970191718,
                    "place": 0.08540767283540615,
                    "product": 0.08364456177007108,
                    "programmer": 0.06828830454954818,
                    "programming": 0.1663626457343274,
                    "question": 0.05918663189775843,
                    "relevant": 0.09593328885236153,
                    "right": 0.07109290305471566,
                    "smart": 0.11282099111837303,
                    "software": 0.058478632842164,
                    "spanish": 0.14511753112535306,
                    "speaking": 0.11364016479944668,
                    "startup": 0.11631973505858349,
                    "stupid": 0.11631973505858349,
                    "suit": 0.1383655533278125,
                    "support": 0.07973741029318493,
                    "things": 0.05743595839404567,
                    "tie": 0.1383655533278125,
                    "want": 0.05620446967583189,
                    "work": 0.14887157701466372,
                    "workers": 0.524832673749869
                },
                "Max term": "workers",
                "Max score": 0.524832673749869
            }
        ]
    },
    {
        "ID": "20927",
        "Question": "Just as the title says, what is your favorite whiteboard interview problem, and why has it proven effective for you? Junior, senior, Java, C, Javascript, PHP, SQL, pseudo-code, etc. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "code": 0.10475365802090764,
                    "effective": 0.24027705487142353,
                    "favorite": 0.26744521829253587,
                    "interview": 0.22655902576580103,
                    "java": 0.16916576336958852,
                    "javascript": 0.2288530534280205,
                    "junior": 0.2946133817136482,
                    "php": 0.2019091300633227,
                    "problem": 0.15618254245560648,
                    "proven": 0.3422305683772688,
                    "pseudo": 0.33474687876144654,
                    "says": 0.23209077866776592,
                    "senior": 0.24661838858378088,
                    "sql": 0.22731172124473759,
                    "title": 0.28141157472170114,
                    "whiteboard": 0.3174310642793473
                },
                "Max term": "proven",
                "Max score": 0.3422305683772688
            }
        ],
        "Best answer": "I've found this one extremely illuminating when interviewing candidates and filtering out those with no business being there. It is similar in complexity to Fizz Buzz, but focuses on database skills. Assuming the following basic  table structure Documents (DocID, DocDate) Keywords (KeyWordID, KeyWord) DocumentKeywords (DocID,KeywordID)  Write a query to return the following: Part 1: Documents with a DocDate after 4/1/1995   Part 2: Documents that contain the keyword \"Blue\"   Part 3: Documents that contain the either the keyword \"Blue\" or \"Yellow\" Part 4: Documents that contain the both the keywords \"Blue\" and \"Yellow\"  I let them write it in any SQL variant they want, and am not too picky on minor syntax problems. I mainly want to know that they understand basic relational DB concepts. Most candidates can get through part 3 with no issues at all. You'd be amazed how many think that the answer to part 4 is just to change the operator from OR to AND in the where clause. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "amazed": 0.12908865937368477,
                    "answer": 0.061964339760764243,
                    "assuming": 0.09056670523767589,
                    "basic": 0.1535729519945434,
                    "business": 0.06815340489048356,
                    "buzz": 0.11708600666386426,
                    "candidates": 0.19913791158325914,
                    "change": 0.06269740869756771,
                    "clause": 0.11504645588483643,
                    "complexity": 0.08756630308180906,
                    "concepts": 0.08434372482772647,
                    "contain": 0.3121007035365053,
                    "database": 0.0735240995929607,
                    "db": 0.09735537171310944,
                    "documents": 0.49784477895814777,
                    "extremely": 0.09010491340315051,
                    "filtering": 0.12522466825321762,
                    "fizz": 0.12908865937368477,
                    "focuses": 0.1220675576292606,
                    "following": 0.14403479202190145,
                    "interviewing": 0.10210756611297102,
                    "issues": 0.07369989975817996,
                    "keyword": 0.3396660466301913,
                    "keywords": 0.23417201332772852,
                    "know": 0.04476834896963534,
                    "let": 0.06962516160383694,
                    "mainly": 0.10304380317501591,
                    "minor": 0.09667621927303165,
                    "operator": 0.10620091379897294,
                    "picky": 0.12908865937368477,
                    "problems": 0.06385870415037379,
                    "query": 0.09956895579162957,
                    "relational": 0.11708600666386426,
                    "return": 0.08248664325599607,
                    "similar": 0.06789875077838668,
                    "skills": 0.07250520763631027,
                    "sql": 0.08107804853440272,
                    "structure": 0.08467356656321114,
                    "syntax": 0.08248664325599607,
                    "table": 0.09419826108915241,
                    "think": 0.044341578215996484,
                    "understand": 0.0615214468831402,
                    "variant": 0.11504645588483643,
                    "want": 0.09699980443333849,
                    "write": 0.10876825762588695,
                    "yellow": 0.25817731874736954
                },
                "Max term": "documents",
                "Max score": 0.49784477895814777
            }
        ]
    },
    {
        "ID": "21412",
        "Question": "I'm working in development for 4 years, and 3.5 in PHP - why I don't seem to be able to be selected in an interview. I want to know what special things the interviewer wants to see in candidates - for senior PHP developer roles. Interviewer asks me 10 questions and I'm able to answer only 5. Does selection depend on these things? It doesn't mean that I can't solve the problem, I can google the question, I can ask on forums. Why don't they understand that a man can't remember all the answers for each and every question? Especially programming ones. Please advise. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "10": 0.12961467606792182,
                    "able": 0.2282407910312403,
                    "advise": 0.2023301138970746,
                    "answer": 0.10897555969827068,
                    "answers": 0.1350429816789402,
                    "ask": 0.11624818086741422,
                    "asks": 0.19356915062827412,
                    "candidates": 0.17511011539633606,
                    "depend": 0.17801265630648755,
                    "developer": 0.10259307324977904,
                    "development": 0.09209142881900378,
                    "especially": 0.1332404657148655,
                    "forums": 0.19356915062827412,
                    "google": 0.13187153280018438,
                    "interview": 0.1421183336553321,
                    "interviewer": 0.38226311931777296,
                    "know": 0.07873328279732063,
                    "man": 0.16466620298203824,
                    "mean": 0.12637500666428517,
                    "ones": 0.13153870293463654,
                    "php": 0.25331137452947716,
                    "problem": 0.09797183142369643,
                    "programming": 0.08415731171371693,
                    "question": 0.17964325373349946,
                    "questions": 0.11487704635290771,
                    "remember": 0.140744252633197,
                    "roles": 0.186773619575288,
                    "selected": 0.2059170348347578,
                    "selection": 0.186773619575288,
                    "senior": 0.15470138219309357,
                    "solve": 0.140744252633197,
                    "special": 0.15846587581798244,
                    "things": 0.1743296098523058,
                    "understand": 0.1081966520328005,
                    "want": 0.08529589776601765,
                    "wants": 0.15541797124485615,
                    "working": 0.09636581979787583,
                    "years": 0.11059581570425478
                },
                "Max term": "interviewer",
                "Max score": 0.38226311931777296
            }
        ],
        "Best answer": "\"Interviewer asks me 10 questions and I'm able to answer only 5. Does selection depend on these things? It doesn't mean that I can't solve the problem, I can google the question, I can ask on forums. Why don't they understand that a man can't remember all the answers for each and every question? Expecially programming ones.\" These things are very significant and will be a very significant part of the reason. Interviewers do understand that you can't know everything and generally tailor the questions to suit.   Generally most questions an interviewer will ask will be the sorts of things they expect a candidate to be able to answer without access to the internet. Why do they expect this standard?  A few reasons come to mind:  You indicate that you're looking at senior developer roles.  Senior developers are by definition those who have a good level of knowledge already and can help others out, not those who are dependent on Google. A programmer who knows this stuff - as opposed to having to post it on forums - is going to be far more productive that one who relies on the internet.  They're not having to wait for replies, understand what's been posted and adapt it to their purpose, they're just getting on and coding. They're obviously finding candidates who can answer these questions and in that instance wouldn't you hire the guy who got 9 out of 10 over the guy who got 5 out of 10. If they were happy with someone bright who understands the basics and Googles the rest, you can hire a junior developer for a lot less money.  Personally out of 10 questions for an intermediate or senior role normally I'd expect a candidate to be answering perhaps 8 well and having a fair idea at least one of the others. If you're not hitting that level then I suggest that you're probably applying for jobs a little above your current level and should adjust your expectations. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "10": 0.2477839796581922,
                    "able": 0.10908180546703368,
                    "access": 0.06270818620607314,
                    "adapt": 0.09377779773807186,
                    "adjust": 0.09251138824857234,
                    "answer": 0.15624618303273607,
                    "answering": 0.09251138824857234,
                    "answers": 0.06454031372145959,
                    "applying": 0.09026779792165099,
                    "ask": 0.11111564584036324,
                    "asks": 0.09251138824857234,
                    "basics": 0.08582311226914459,
                    "bright": 0.10525342216532411,
                    "candidate": 0.1636576272378133,
                    "candidates": 0.0836893679550842,
                    "coding": 0.053928910517811166,
                    "come": 0.05707003244540066,
                    "current": 0.06150713168771793,
                    "definition": 0.07174038383591899,
                    "depend": 0.0850765625993488,
                    "dependent": 0.09134640444909652,
                    "developer": 0.09806343211425139,
                    "developers": 0.049656469805975365,
                    "expect": 0.210272815067027,
                    "expectations": 0.08436644480744473,
                    "fair": 0.07735351906422863,
                    "far": 0.05863896060725335,
                    "finding": 0.07652160535137843,
                    "forums": 0.1850227764971447,
                    "generally": 0.12301426337543586,
                    "getting": 0.05527336055684958,
                    "going": 0.047913849578236904,
                    "good": 0.03697306984649434,
                    "google": 0.12604920288398716,
                    "got": 0.11680841014497838,
                    "guy": 0.1507132431038052,
                    "happy": 0.07295396376607842,
                    "help": 0.04952935521966097,
                    "hire": 0.14178461480668397,
                    "hitting": 0.09669846491735375,
                    "idea": 0.052698217678427715,
                    "indicate": 0.09251138824857234,
                    "instance": 0.07145216595002238,
                    "intermediate": 0.0892636392681302,
                    "internet": 0.14528190221645135,
                    "interviewer": 0.18269280889819303,
                    "interviewers": 0.10525342216532411,
                    "jobs": 0.07360093817209654,
                    "junior": 0.08832431157979094,
                    "know": 0.03762854395603086,
                    "knowledge": 0.05717665949825331,
                    "knows": 0.07089230740334199,
                    "level": 0.1649830544502594,
                    "little": 0.054994351483419794,
                    "looking": 0.05301636209667386,
                    "lot": 0.04509133220293963,
                    "man": 0.07869796910326704,
                    "mean": 0.060397678392911804,
                    "mind": 0.06165195405293133,
                    "money": 0.06436389304482054,
                    "normally": 0.07869796910326704,
                    "obviously": 0.06958020077232088,
                    "ones": 0.06286553398309078,
                    "opposed": 0.08304239354906609,
                    "personally": 0.06564625270316929,
                    "post": 0.06663673871348796,
                    "posted": 0.0892636392681302,
                    "probably": 0.05078426369898615,
                    "problem": 0.046823112592288135,
                    "productive": 0.07360093817209654,
                    "programmer": 0.04952935521966097,
                    "programming": 0.04022081882693648,
                    "purpose": 0.06837666191025081,
                    "question": 0.08585586462737241,
                    "questions": 0.2745126225307404,
                    "reason": 0.05750130926204166,
                    "reasons": 0.06436389304482054,
                    "relies": 0.10525342216532411,
                    "remember": 0.06726508928124096,
                    "replies": 0.10259981803156,
                    "rest": 0.06933139936987422,
                    "role": 0.07612282622484517,
                    "roles": 0.0892636392681302,
                    "selection": 0.0892636392681302,
                    "senior": 0.22180661925008613,
                    "significant": 0.16608478709813218,
                    "solve": 0.06726508928124096,
                    "sorts": 0.08661003513436609,
                    "standard": 0.061221739649343715,
                    "stuff": 0.05604464180034179,
                    "suggest": 0.06908677970215488,
                    "suit": 0.10035622770463865,
                    "things": 0.12497451815996997,
                    "understand": 0.15512940648208914,
                    "understands": 0.09377779773807186,
                    "wait": 0.08304239354906609
                },
                "Max term": "questions",
                "Max score": 0.2745126225307404
            }
        ]
    },
    {
        "ID": "21697",
        "Question": "I am new to web programming and at this time I am learning about PHP. I would like to know when do I need to use a PHP framework such as CakePHP? What are things that this and other similar PHP frameworks offer for me?  And is it really important to use a framework to be a professional?  And can I create my own framework to provide the features I like into it?    ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "cakephp": 0.2689947804599001,
                    "create": 0.1550864398192584,
                    "features": 0.15935223771223236,
                    "framework": 0.48357870489049753,
                    "frameworks": 0.1921848827129365,
                    "important": 0.15049802959767067,
                    "know": 0.10467469084570465,
                    "learning": 0.15025774620386115,
                    "like": 0.1743191032685797,
                    "need": 0.1105163559458684,
                    "new": 0.11650399085160396,
                    "offer": 0.21175768349415197,
                    "php": 0.505160375787275,
                    "professional": 0.1921848827129365,
                    "programming": 0.11188585402587457,
                    "provide": 0.17487868630312756,
                    "really": 0.11368982187532548,
                    "similar": 0.15875682061354937,
                    "things": 0.11588427008382922,
                    "time": 0.09479421039032457,
                    "use": 0.18766321233202837,
                    "web": 0.13867011731890633
                },
                "Max term": "php",
                "Max score": 0.505160375787275
            }
        ],
        "Best answer": "Build a few pages without a framework... you will essentially begin writing your own framework by trial and error. After you do that, move to a framework and enjoy how much time you save. Trying to build your own framework can teach you some things, and will help you appreciate the frameworks that are already out there. When I first got into PHP, I thought frameworks were a complicated waste of time. Now, I use CodeIgniter for even simple projects. It takes about 1 minute to get up and running you already have a ton of great libraries available to you. And, as a previous poster mentioned, most frameworks are extensible, so you can always add whatever functionality you want. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "add": 0.10881057876711332,
                    "appreciate": 0.15346916844195724,
                    "available": 0.11186778293945705,
                    "begin": 0.15122637298821862,
                    "build": 0.21294029989142135,
                    "codeigniter": 0.1945169748248932,
                    "complicated": 0.1354161088714123,
                    "enjoy": 0.15722848003300377,
                    "error": 0.1179947067430619,
                    "essentially": 0.14141821591619747,
                    "extensible": 0.1945169748248932,
                    "framework": 0.4283540846490647,
                    "frameworks": 0.38303414116879,
                    "functionality": 0.12096805801927549,
                    "got": 0.10793577115154405,
                    "great": 0.10267542299305117,
                    "help": 0.09153431920933795,
                    "libraries": 0.1213196703889959,
                    "mentioned": 0.1445863396818442,
                    "minute": 0.17330907771434054,
                    "pages": 0.14915627773134646,
                    "php": 0.11186778293945705,
                    "previous": 0.13258212559227392,
                    "projects": 0.0913014349557775,
                    "running": 0.12062098271008018,
                    "save": 0.13727187659381757,
                    "simple": 0.10096159735866132,
                    "takes": 0.11618067365006782,
                    "teach": 0.1445863396818442,
                    "things": 0.07698772702608583,
                    "thought": 0.11531756334421073,
                    "time": 0.12595308729829136,
                    "ton": 0.1758727274289485,
                    "trial": 0.18546655696650272,
                    "trying": 0.10197673531413547,
                    "use": 0.06233703743141867,
                    "want": 0.07533702736119828,
                    "waste": 0.1481780621746133,
                    "writing": 0.09570015687491258
                },
                "Max term": "framework",
                "Max score": 0.4283540846490647
            }
        ]
    },
    {
        "ID": "22742",
        "Question": "I am usually fascinated by articles defending PHP and the arguments being used. Quite often authors of these types of articles don't mention what experience they have with other languages. Personally I find it hard to imagine that somebody would know either Python or Ruby, and PHP at a high level and still prefer PHP. So if anyone fits this description, I would be interested in hearing why you prefer PHP to either of these languages. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "arguments": 0.15565055859961507,
                    "articles": 0.32707585159230984,
                    "authors": 0.18644988165220375,
                    "defending": 0.2241112665317539,
                    "description": 0.169018996433566,
                    "experience": 0.10114990832474514,
                    "fascinated": 0.2241112665317539,
                    "fits": 0.18437577254109538,
                    "hard": 0.11701408311271642,
                    "hearing": 0.1757272847377195,
                    "high": 0.13187743992074016,
                    "imagine": 0.16353792579615492,
                    "interested": 0.1301785326616295,
                    "know": 0.07772248497117633,
                    "languages": 0.20460768140220176,
                    "level": 0.11359189613247385,
                    "mention": 0.15890374660310982,
                    "personally": 0.13559360402300052,
                    "php": 0.5001185978889554,
                    "prefer": 0.2834286596330064,
                    "python": 0.1270441695486502,
                    "quite": 0.12039547027919371,
                    "ruby": 0.14371924981039272,
                    "somebody": 0.16670534296211975,
                    "types": 0.1384984635535707,
                    "used": 0.09099874133570147,
                    "usually": 0.11701408311271642
                },
                "Max term": "php",
                "Max score": 0.5001185978889554
            }
        ],
        "Best answer": "Yes, I flat out prefer the C-style syntax in PHP over Python or Ruby (perhaps over Ruby less so).  I could do without the sigils ($) for variables in PHP, though. I've never had the problems with PHP that a lot of people seem to have.  If you develop your applications as applications, and not individual peieces that get inserted into web pages by intermingling HTML and PHP, PHP is not that much different from other langauges.  And the library support and available online resources are huge.  People moan about 'inconsistent' function parameters and such, but thats never been a huge hinderance to me. PHP does give you a lot of rope to hang yourself, though, if you arent a disciplined programmer.  You can get yourself into a lot of trouble if you start using little PHP tricks all over the place (variable variables, using include() as function calls, etc). ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "applications": 0.1730360730959978,
                    "available": 0.08765759861408474,
                    "calls": 0.10658330171362132,
                    "develop": 0.0945164497678386,
                    "different": 0.06669417326916319,
                    "disciplined": 0.1425138750352267,
                    "flat": 0.13396798261712536,
                    "function": 0.18028016773373676,
                    "hang": 0.1322809413527779,
                    "html": 0.09901790068911762,
                    "huge": 0.19803580137823523,
                    "include": 0.09901790068911762,
                    "inconsistent": 0.1425138750352267,
                    "individual": 0.10610964663307623,
                    "langauges": 0.1571231746186457,
                    "library": 0.09150034704965726,
                    "little": 0.07963865274375626,
                    "lot": 0.19589355180300186,
                    "online": 0.10431479559883285,
                    "pages": 0.11687619778092274,
                    "parameters": 0.11767164176935892,
                    "people": 0.11658627781244386,
                    "php": 0.6136031902985933,
                    "place": 0.08970549601541385,
                    "prefer": 0.09935513610855377,
                    "problems": 0.07772706271659538,
                    "programmer": 0.07172465925250415,
                    "python": 0.08906996754420231,
                    "resources": 0.10040047913503908,
                    "ruby": 0.20152154894738009,
                    "start": 0.07237609012728469,
                    "style": 0.09710050998376964,
                    "support": 0.08374989861999212,
                    "syntax": 0.10040047913503908,
                    "thats": 0.14532828469215825,
                    "tricks": 0.12926483863459656,
                    "trouble": 0.11201750501814549,
                    "using": 0.11897860926254697,
                    "variable": 0.10610964663307623,
                    "variables": 0.20949876690057476,
                    "web": 0.07218790348370945,
                    "yes": 0.0912674522594525
                },
                "Max term": "php",
                "Max score": 0.6136031902985933
            }
        ]
    },
    {
        "ID": "22762",
        "Question": "I'm an experienced Java developer who is just starting up a project for an NGO. I will be working on the project for at least 6 months, following which the NGO will have to pay or find a volunteer to maintain the project. Seeing as they already have people working on their website in PHP, I figured PHP was the obvious choice to make sure the skills are still available (it is webby) - eliminated Java because Java devs are typically expensive. Unfortunately I have next to zero experience with proper PHP development (just a few months spending a small percentage of my time on a Drupal project without any real coding). What are some things I can do to ensure that the code I leave behind is maintainable by a relatively low-skilled PHP developer (eg a teenager wanting to make some holiday cash)? Do I go with a CMS? Are Drupal developers cheap? Any other CMS / Framework I should look at?  Background: the project is a website that people will search for educational information, with some simple user-management to only allow some users to create content, restrictions to specific content-types etc.  The CMS vs write myself question is not the only thing I'm interested in hearing. I'm also interested in any tips about code style, anything you think my Java experience would push me towards that is going to make it difficult for the hypothetical volunteer etc. There's probably things about this scenario that I haven't thought through - so anything related to keeping maintenance costs low would be appreciated. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "allow": 0.07673800985395667,
                    "appreciated": 0.09849157118797053,
                    "available": 0.06883583745387824,
                    "background": 0.0782908209716216,
                    "cash": 0.11969253800545072,
                    "cheap": 0.09849157118797053,
                    "choice": 0.0753184677374284,
                    "cms": 0.3156074916923863,
                    "code": 0.07142624777755117,
                    "coding": 0.06132710974097178,
                    "content": 0.18119582992000888,
                    "costs": 0.08845930831670148,
                    "create": 0.06339870746628772,
                    "developer": 0.11151619428434027,
                    "developers": 0.056468557289592054,
                    "development": 0.050050580135655685,
                    "devs": 0.10044101942798662,
                    "difficult": 0.07260593032561678,
                    "drupal": 0.22382684654724067,
                    "educational": 0.10996397503360422,
                    "eliminated": 0.11969253800545072,
                    "ensure": 0.09117871771538168,
                    "expensive": 0.09059791496000444,
                    "experience": 0.11137740011760688,
                    "experienced": 0.08191641600277673,
                    "figured": 0.10822013415981703,
                    "following": 0.06883583745387824,
                    "framework": 0.06589500428279188,
                    "going": 0.05448687694565004,
                    "hearing": 0.09674773031418332,
                    "hypothetical": 0.10996397503360422,
                    "information": 0.06838235209657186,
                    "interested": 0.14334117310742306,
                    "java": 0.23069124187535706,
                    "keeping": 0.08845930831670148,
                    "leave": 0.07912551111437074,
                    "look": 0.0572869846033424,
                    "low": 0.16451537907905606,
                    "maintain": 0.07912551111437074,
                    "maintainable": 0.10044101942798662,
                    "maintenance": 0.08407833417125048,
                    "make": 0.13275287514956838,
                    "management": 0.06602380789108553,
                    "months": 0.1501865562787935,
                    "obvious": 0.07970631386974798,
                    "pay": 0.0782908209716216,
                    "people": 0.09155297653295029,
                    "percentage": 0.09943761039167619,
                    "php": 0.27534334981551295,
                    "probably": 0.05775106678547788,
                    "project": 0.23898715998108516,
                    "proper": 0.08949409400721475,
                    "push": 0.08569436606912528,
                    "question": 0.04881697016825429,
                    "real": 0.06253871246746906,
                    "related": 0.07443552880128775,
                    "relatively": 0.09059791496000444,
                    "restrictions": 0.1066426382051601,
                    "scenario": 0.09240529211195019,
                    "search": 0.08260614830762082,
                    "seeing": 0.08949409400721475,
                    "simple": 0.06212491141105334,
                    "skilled": 0.10520249723079543,
                    "skills": 0.06930209871311978,
                    "small": 0.06253871246746906,
                    "specific": 0.06285599720214405,
                    "spending": 0.09443450522989065,
                    "starting": 0.07649280270040879,
                    "style": 0.07625117534143207,
                    "sure": 0.058887378205370766,
                    "thing": 0.054681217888441394,
                    "things": 0.0947460390160641,
                    "think": 0.04238267195971153,
                    "thought": 0.07095859806424733,
                    "time": 0.03875148866037499,
                    "tips": 0.09003680427135842,
                    "types": 0.07625117534143207,
                    "typically": 0.08260614830762082,
                    "unfortunately": 0.09003680427135842,
                    "user": 0.05957353574127328,
                    "users": 0.06526560600832297,
                    "vs": 0.07856440042572473,
                    "wanting": 0.09674773031418332,
                    "website": 0.1565816419432432,
                    "working": 0.10474732009232202,
                    "write": 0.051981566376953114,
                    "zero": 0.09759669486931803
                },
                "Max term": "cms",
                "Max score": 0.3156074916923863
            }
        ],
        "Best answer": "Definitely go with a well-known CMS like Drupal, Wordpress or Joomla.  They all have very large communities and therefore plenty of developers and developer resources. Trying to build your own will lead to a good deal of pain :-) ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "build": 0.19024075803628795,
                    "cms": 0.3054866118101377,
                    "communities": 0.31424921446107656,
                    "deal": 0.21491319839276044,
                    "definitely": 0.23231688339222134,
                    "developer": 0.16191015066471237,
                    "developers": 0.16397318214186368,
                    "drupal": 0.32497377335948235,
                    "good": 0.12209067499102659,
                    "known": 0.23319876600645384,
                    "large": 0.19097453189231953,
                    "lead": 0.22976435858785696,
                    "like": 0.10346362671843383,
                    "pain": 0.283400911806192,
                    "plenty": 0.28093569175608196,
                    "resources": 0.22894277868417182,
                    "trying": 0.1822119292413807,
                    "wordpress": 0.31424921446107656
                },
                "Max term": "drupal",
                "Max score": 0.32497377335948235
            }
        ]
    },
    {
        "ID": "24378",
        "Question": "PHP, as most of us know, has weak typing.  For those who don't, PHP.net says:   PHP does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used.    Love it or hate it, PHP re-casts variables on-the-fly.  So, the following code is valid: $var = \"10\"; $value = 10 + $var; var_dump($value); // int(20)  PHP also allows you to explicitly cast a variable, like so: $var = \"10\"; $value = 10 + $var; $value = (string)$value; var_dump($value); // string(2) \"20\"  That's all cool...  but, for the life of me, I cannot conceive of a practical reason for doing this. I don't have a problem with strong typing in languages that support it, like Java.  That's fine, and I completely understand it.  Also, I'm aware of - and fully understand the usefulness of - type hinting in function parameters. The problem I have with type casting is explained by the above quote.  If PHP can swap types at-will, it can do so even after you force cast a type; and it can do so on-the-fly when you need a certain type in an operation.  That makes the following valid: $var = \"10\"; $value = (int)$var; $value = $value . ' TaDa!'; var_dump($value); // string(8) \"10 TaDa!\"  So what's the point?  Take this theoretical example of a world where user-defined type casting makes sense in PHP:  You force cast variable $foo as int → (int)$foo. You attempt to store a string value in the variable $foo. PHP throws an exception!! ← That would make sense.  Suddenly the reason for user defined type casting exists!  The fact that PHP will switch things around as needed makes the point of user defined type casting vague.  For example, the following two code samples are equivalent: // example 1 $foo = 0; $foo = (string)$foo; $foo = '# of Reasons for the programmer to type cast $foo as a string: ' . $foo;  // example 2 $foo = 0; $foo = (int)$foo; $foo = '# of Reasons for the programmer to type cast $foo as a string: ' . $foo;   A year after originally asking this question, guess who found himself using typecasting in a practical environment?  Yours Truly. The requirement was to display money values on a website for a restaurant menu.  The design of the site required that trailing zeros be trimmed, so that the display looked something like the following: Menu Item 1 .............. $ 4 Menu Item 2 .............. $ 7.5 Menu Item 3 .............. $ 3  The best way I found to do that wast to cast the variable as a float: $price = '7.50'; // a string from the database layer. echo 'Menu Item 2 .............. $ ' . (float)$price;  PHP trims the float's trailing zeros, and then recasts the float as a string for concatenation. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "10": 0.15202466395433278,
                    "20": 0.061645443927757795,
                    "50": 0.03238461887136978,
                    "allows": 0.029110104049945427,
                    "asking": 0.02639858454811316,
                    "attempt": 0.034507962509834,
                    "aware": 0.028358257073300645,
                    "best": 0.018756866748599,
                    "cast": 0.2662779749496418,
                    "certain": 0.025522531286557144,
                    "code": 0.025690736476126137,
                    "completely": 0.027967745839378038,
                    "concatenation": 0.043051252834020455,
                    "context": 0.03038154521763928,
                    "cool": 0.03279534459590052,
                    "database": 0.025277005282774385,
                    "declaration": 0.04196586311334572,
                    "defined": 0.08913583676220542,
                    "definition": 0.029343591299849796,
                    "design": 0.02044272883428523,
                    "determined": 0.04025324519941225,
                    "display": 0.06959683649926204,
                    "echo": 0.03783944582115101,
                    "environment": 0.025217174007655083,
                    "equivalent": 0.033713028528956294,
                    "example": 0.07415858414523228,
                    "exception": 0.028996707063971,
                    "exists": 0.034231021331491585,
                    "explained": 0.03692176188809524,
                    "explicit": 0.03955206373508448,
                    "explicitly": 0.03510377552853308,
                    "fact": 0.025157938078479974,
                    "fine": 0.027873993322828108,
                    "float": 0.17751864996642785,
                    "fly": 0.08209635836057991,
                    "following": 0.0990360499209564,
                    "foo": 0.5056954279343444,
                    "force": 0.06742605705791259,
                    "fully": 0.03181722195323034,
                    "function": 0.025460193944566865,
                    "guess": 0.02806299845969402,
                    "hate": 0.03347000859204451,
                    "int": 0.15733467469157006,
                    "item": 0.14604414465425797,
                    "java": 0.020743872479581572,
                    "know": 0.01539100512173972,
                    "languages": 0.020258731264037932,
                    "layer": 0.030977358236338372,
                    "life": 0.02769080466103563,
                    "like": 0.03844691858481683,
                    "looked": 0.032000410615022824,
                    "love": 0.028996707063971,
                    "make": 0.01591627372305909,
                    "makes": 0.06586235578931181,
                    "menu": 0.1977603186754224,
                    "money": 0.026326424128063287,
                    "need": 0.016249943387997786,
                    "needed": 0.025649199081432785,
                    "net": 0.022128710633249855,
                    "operation": 0.03692176188809524,
                    "originally": 0.03323652134214014,
                    "parameters": 0.03323652134214014,
                    "php": 0.24759012480239095,
                    "point": 0.040621448547375406,
                    "practical": 0.06327900486892589,
                    "price": 0.06517288058509739,
                    "problem": 0.03830362219520325,
                    "programmer": 0.040517462528075865,
                    "question": 0.017558586026546134,
                    "quote": 0.03323652134214014,
                    "reason": 0.04703891526565329,
                    "reasons": 0.05265284825612657,
                    "require": 0.026929791921588554,
                    "required": 0.027256074219447635,
                    "requirement": 0.03279534459590052,
                    "samples": 0.04025324519941225,
                    "says": 0.028460023000353978,
                    "sense": 0.05129839816286557,
                    "site": 0.02584440220091383,
                    "store": 0.03181722195323034,
                    "string": 0.260970363575739,
                    "strong": 0.030241464360166948,
                    "suddenly": 0.03612682790721754,
                    "support": 0.0473105542003284,
                    "swap": 0.043051252834020455,
                    "switch": 0.032000410615022824,
                    "theoretical": 0.03692176188809524,
                    "things": 0.01703922294853832,
                    "throws": 0.0383574386236863,
                    "truly": 0.03612682790721754,
                    "type": 0.26938551936586136,
                    "types": 0.027426176127752635,
                    "typing": 0.06742605705791259,
                    "understand": 0.042301175981159345,
                    "used": 0.018020037502520063,
                    "usefulness": 0.041048179180289954,
                    "user": 0.06428258750676624,
                    "using": 0.016802838077859254,
                    "vague": 0.038924835541825735,
                    "valid": 0.06105000368061576,
                    "value": 0.2787118839162767,
                    "values": 0.029970819493108536,
                    "var": 0.2167609674433052,
                    "variable": 0.20979573645175978,
                    "variables": 0.029586611236761578,
                    "way": 0.015817258355041525,
                    "weak": 0.03955206373508448,
                    "website": 0.028159799970812055,
                    "world": 0.02338666785007351,
                    "year": 0.027172811858500335,
                    "zeros": 0.08875932498321393
                },
                "Max term": "foo",
                "Max score": 0.5056954279343444
            }
        ],
        "Best answer": "In a weakly-typed language, type-casting exists to remove ambiguity in typed operations, when otherwise the compiler/interpreter would use order or other rules to make an assumption of which operation to use. Normally I would say PHP follows this pattern, but of the cases I've checked, PHP has behaved counter-intuitively in each. Here are those cases, using JavaScript as a comparison language. String Concatentation Obviously this is not a problem in PHP because there are separate string concatenation (.) and addition (+) operators. JavaScript var a = 5; var b = \"10\" var incorrect = a + b; // \"510\" var correct = a + Number(b); // 15  String Comparison Often in computer systems \"5\" is greater than \"10\" because it doesn't interpret it as a number.  Not so in PHP, which, even if both are strings, realizes they are numbers and removes the need for a cast): JavaScript console.log(\"5\" > \"10\" ? \"true\" : \"false\"); // true  PHP echo \"5\" > \"10\" ? \"true\" : \"false\";  // false!  Function signature typing PHP implements a bare-bones type-checking on function signatures, but unfortunately it's so flawed it's probably rarely usable. I thought I might be doing something wrong, but a comment on the docs confirms that built-in types other than array cannot be used in PHP function signatures - though the error message is misleading. PHP function testprint(string $a) {     echo $a; }  $test = 5; testprint((string)5); // \"Catchable fatal error: Argument 1 passed to testprint()                       //  must be an instance of string, string given\" WTF?  And unlike any other language I know, even if you use a type it understands, null can no longer be passed to that argument (must be an instance of array, null given).  How stupid. Boolean interpretation [Edit]: This one is new. I thought of another case, and again the logic is reversed from JavaScript. JavaScript console.log(\"0\" ? \"true\" : \"false\"); // True, as expected. Non-empty string.  PHP echo \"0\" ? \"true\" : \"false\"; // False! This one probably causes a lot of bugs.   So in conclusion, the only useful case I can think of is... (drumroll) Type truncation In other words, when you have a value of one type (say string) and you want to interpret it as another type (int) and you want to force it to become one of the valid set of values in that type: $val = \"test\"; $val2 = \"10\"; $intval = (int)$val; // 0 $intval2 = (int)$val2; // 10 $boolval = (bool)$intval // false $boolval2 = (bool)$intval2 // true $props = (array)$myobject // associative array of $myobject's properties  I can't see what upcasting (to a type that encompasses more values) would really ever gain you. So while I disagree with your proposed use of typing (you essentially are proposing static typing, but with the ambiguity that only if it was force-cast into a type would it throw an error — which would cause confusion), I think it's a good question, because apparently casting has very little purpose in PHP. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "10": 0.19451361216247098,
                    "15": 0.04048233849343944,
                    "addition": 0.04223823588667733,
                    "ambiguity": 0.11356642051696203,
                    "apparently": 0.04415249645393895,
                    "argument": 0.08392244749678034,
                    "array": 0.1751926150403902,
                    "assumption": 0.049077851882210054,
                    "bare": 0.05252061999261519,
                    "bool": 0.10300702427273702,
                    "boolean": 0.05150351213636851,
                    "bugs": 0.03241893536041183,
                    "built": 0.03603010371883271,
                    "case": 0.05591811878752002,
                    "cases": 0.06547271210256803,
                    "cast": 0.11356642051696203,
                    "cause": 0.03769863348252434,
                    "causes": 0.045762036615551956,
                    "checked": 0.04379815376009755,
                    "checking": 0.04094411589214348,
                    "comment": 0.036546708048431624,
                    "comparison": 0.08982966317421573,
                    "compiler": 0.03710091563513887,
                    "computer": 0.03133412044237132,
                    "concatenation": 0.055083527100448955,
                    "conclusion": 0.05060635942535356,
                    "confusion": 0.05060635942535356,
                    "console": 0.09152407323110391,
                    "correct": 0.03476726505901603,
                    "counter": 0.046223814014255994,
                    "disagree": 0.04780540187184596,
                    "docs": 0.046715403561772714,
                    "echo": 0.14524526015941433,
                    "edit": 0.030565368295934776,
                    "encompasses": 0.056783210258481015,
                    "error": 0.10024160563532265,
                    "essentially": 0.040046963181128534,
                    "exists": 0.04379815376009755,
                    "expected": 0.04048233849343944,
                    "false": 0.30906747517757266,
                    "flawed": 0.05369478484191729,
                    "follows": 0.04724092187050268,
                    "force": 0.08627077719538453,
                    "function": 0.13030396941386896,
                    "gain": 0.0414357054396602,
                    "given": 0.06437851968118685,
                    "good": 0.019349557030812873,
                    "greater": 0.044914831587107865,
                    "implements": 0.05150351213636851,
                    "incorrect": 0.048415086719804774,
                    "instance": 0.07478782615375143,
                    "int": 0.1207846217710743,
                    "interpret": 0.11356642051696203,
                    "interpretation": 0.05252061999261519,
                    "interpreter": 0.049077851882210054,
                    "javascript": 0.179531237120336,
                    "know": 0.019692594103940864,
                    "language": 0.06930605482082908,
                    "little": 0.028780849002233874,
                    "log": 0.0805230811807162,
                    "logic": 0.036156007317547686,
                    "longer": 0.035664417770030966,
                    "lot": 0.02359818396683219,
                    "make": 0.0203646685577864,
                    "message": 0.041185945546179714,
                    "misleading": 0.055083527100448955,
                    "need": 0.020791594624307838,
                    "new": 0.02191805664572471,
                    "non": 0.02863757842796138,
                    "normally": 0.041185945546179714,
                    "null": 0.0883049929078779,
                    "number": 0.05962348655452696,
                    "numbers": 0.04048233849343944,
                    "obviously": 0.03641423524336021,
                    "operation": 0.04724092187050268,
                    "operations": 0.0414357054396602,
                    "operators": 0.046223814014255994,
                    "order": 0.03323875751587252,
                    "passed": 0.0906533226064821,
                    "pattern": 0.03869356666722006,
                    "php": 0.316788396424523,
                    "probably": 0.05315506723088855,
                    "problem": 0.024504497225311037,
                    "properties": 0.042525703749733454,
                    "proposed": 0.05060635942535356,
                    "proposing": 0.055083527100448955,
                    "props": 0.056783210258481015,
                    "purpose": 0.03578437291526271,
                    "question": 0.022465986134427088,
                    "rarely": 0.03887279833182644,
                    "really": 0.02138862315094187,
                    "remove": 0.03943727833316972,
                    "rules": 0.03817986681593971,
                    "say": 0.049455443648828035,
                    "separate": 0.03924443273411141,
                    "set": 0.02954064725134998,
                    "signature": 0.05150351213636851,
                    "signatures": 0.11016705420089791,
                    "static": 0.03769863348252434,
                    "string": 0.33390824071624986,
                    "strings": 0.043459564938052225,
                    "stupid": 0.04415249645393895,
                    "systems": 0.03249705906370442,
                    "test": 0.05483249875317295,
                    "think": 0.03900973441428558,
                    "thought": 0.06531150436970155,
                    "throw": 0.0402615405903581,
                    "true": 0.24641848259928845,
                    "type": 0.28200708398134183,
                    "typed": 0.0906533226064821,
                    "types": 0.03509144139937599,
                    "typing": 0.1294061657930768,
                    "understands": 0.049077851882210054,
                    "unfortunately": 0.0414357054396602,
                    "unlike": 0.049077851882210054,
                    "usable": 0.049077851882210054,
                    "use": 0.07061067845222976,
                    "used": 0.023056407393022043,
                    "useful": 0.03044446108591857,
                    "using": 0.021499016304928748,
                    "val": 0.11356642051696203,
                    "valid": 0.03905634924480382,
                    "value": 0.03241893536041183,
                    "values": 0.07669456004619295,
                    "var": 0.18489525605702398,
                    "want": 0.04266804161491368,
                    "weakly": 0.056783210258481015,
                    "words": 0.03724600562762094,
                    "wrong": 0.03100432891981959,
                    "wtf": 0.05369478484191729
                },
                "Max term": "string",
                "Max score": 0.33390824071624986
            }
        ]
    }
]
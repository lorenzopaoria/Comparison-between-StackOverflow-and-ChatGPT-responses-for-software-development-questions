[
    {
        "ID": "1620",
        "Question": "I am excited about the changes in PHP 6 previewed in PHP 5.3+. However, I wonder why it takes so long to release PHP 6? Books about it have been published since 2008, and announcements on it since 2007, but I am yet to hear about an alpha or a beta. Why does it take so long to release it? Or is that the way it goes with all languages when they transition to a major release where I guess it takes around 4-5 years to release? ",
        "ChatGpt answer": "Releasing a new version of a programming language like PHP is a complex and time-consuming process that involves a lot of testing, planning, and coordination among developers. It's not uncommon for major releases of software to take several years to complete, especially when there are significant changes and improvements being made.  In the case of PHP 6, the development team has faced various challenges and setbacks over the years, including disagreements over the direction of the language, compatibility issues with existing codebases, and the need to make sure that the new version is stable and reliable.  Additionally, the demands of the community and the industry are constantly evolving, which can also impact the timeline for releasing a new version of a language. Developers need to take all of these factors into consideration when planning and executing a major release.  While it may be frustrating to wait for PHP 6 to be released, it's important to remember that the developers are working hard to ensure that the new version meets the needs of the community and is a significant improvement over previous versions. In the meantime, it's worth keeping an eye on the progress of the development and staying informed about any updates or announcements regarding the release.",
        "Stack Overflow best answer": "The release timetable is not unusual for languages, and it's not even that unusual for PHP: 5.0 was released in 2004, but 4.0 was released in 2000.  Compare this to the last stable releases for C (2000), Fortran (2003), or C++ (2003). One other thing to keep in mind is that 5.3 was a major release in all but name. It adds a lot of stuff that was originally destined for PHP 6. Due to development problems with unicode support (a major part of PHP 6), it was decided to release what was stable at the time as a 5.x branch. ",
        "Are the two answers equivalent?": "No"
    },
    {
        "ID": "2806",
        "Question": "There's around a zillion \"PHP frameworks\". And most of them bill themselves as following the MVC pattern. While it's welcome to overcome osCommerce coding style (processing logic heavily intermixed with SQL and HTML), there are certainly simpler and easier to follow approaches to get a maintainable application design. The original MVC concept was targetted at GUI applications. And for Gtk/Python it seems feasible to follow it accordingly. But PHP web apps don't operate on live Views (GUI elements) and a persistent Controller runtime. It's quite certainly a misnomer if it just describes the used code + directory grouping or class naming. \"MVC\" seems to be used like a buzzword for PHP frameworks. And I've actually seen one or two mature PHP frameworks admit it, but redefining the phrase anyway to match interna. So is it generally snake oil? Why isn't better terminology used, and a more sensible concept for maintainable PHP propagated? Some elaborative reasoning Why I suspect that PHP implementations don't follow the real MVC pattern: Models: in theory, Models should be fat and contain business logic, and controllers should be thin handlers (input->output). In reality the PHP frameworks advocate shallow Models. CI and Symfony for example equate Model == ORM. Even HTTP input is handled by the controller, isn't treated as model. Views: workarounds with AJAX discounted, there can't be Views on web pages. PHP frameworks still pump out pages. The interface still effectively follows the ordinary HTTP model, there's no advantage over non-MVC applications. (And lastly, none of the widespread php frameworks can factually output to GUI Views instead of HTML. I've seen a PHP library that can operate Gtk/Console/Web, but the frameworks don't.) Controller: I'm unsure. Controllers probably don't need to be long-running and persistently active in the MVC model. In PHP framework context, they're however mostly request handlers. Not really something to get argumentative about, but it just feels slightly buzzwordish. Would there be better descriptors? I've seen acronyms like PMVC or HMVC thrown around. Though descriptions get more ambigous there, maybe these would describe the current web frameworks less hokey? ",
        "ChatGpt answer": "The issue with PHP frameworks using the term \"MVC\" is that they often deviate from the original concept of the pattern. In true MVC architecture, Models are supposed to contain the business logic, Views are supposed to be the GUI elements, and Controllers are supposed to handle the communication between the Model and the View.  However, in many PHP frameworks, Models are often reduced to just ORMs, Views are still HTML pages, and Controllers are mostly request handlers. This deviation from the true MVC pattern can lead to confusion and make it difficult for developers to understand the underlying architecture of the application.  In light of this, it might be more beneficial for PHP frameworks to use more accurate terminology to describe their architecture. Acronyms like PMVC or HMVC have been thrown around, but they can also be ambiguous and not accurately describe the architecture of the framework.  Ultimately, the important thing is to choose a framework that aligns with your development style and goals, regardless of the terminology used. It's also important to understand the underlying architecture of the framework so that you can effectively build and maintain your application.",
        "Stack Overflow best answer": " But PHP web apps don't operate on live Views (GUI elements) and a persistent Controller runtime.   No, they sure do! Think of AJAX applications, then the view asks something to the controller and gets a partial view back, this view or data is then filled in somewhere in the page and thus live updated. The Controller is also persistent because you can use cookies/sessions.  \"MVC\" seems to be used like a buzzword for PHP frameworks.  MVC is a Software Architecture, some frameworks might use it as a buzz, but others do it properly... See a list of some frameworks on Wikipedia.  is MVC just the SEO of php programming?  MVC and SEO are two things apart, but yes... MVC is getting more popular. ",
        "Are the two answers equivalent?": "No"
    }
]
[
    {
        "ID": "262",
        "Question": "Will Java have the same importance it had in the past, or it will be less relevant than nowadays? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "importance": 0.5453064086492955,
                    "java": 0.29894112764718866,
                    "nowadays": 0.5261626214221413,
                    "past": 0.4101390122295216,
                    "relevant": 0.4101390122295216
                },
                "Max term": "importance",
                "Max score": 0.5453064086492955
            }
        ],
        "Best answer": "Java is relevant and will continue to be relevant for many years in the Enterprise computing world.   Whether it continues to be relevant in other areas depends a lot on what Oracle does.  If they inject some life (and resources) into ME, desktop applications and other areas, and if they press on with the evolution of the Java language, then Java will do well.   But if Oracle cuts back on R&D and/or tries to stomp other players in the Java space, there's a good chance that someone / some company will develop a better (and more open) Java-like language.  If Oracle win their lawsuit against Google, I predict that the next generation of the Android platform will have a new language, just like happened with C#.  If Google get the openness right ... then, the game is on! ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "android": 0.13300133329985586,
                    "applications": 0.09087344698917992,
                    "areas": 0.23402973185874704,
                    "better": 0.06668243865911729,
                    "chance": 0.11096475522693817,
                    "company": 0.07799098950038982,
                    "computing": 0.12536732672318968,
                    "continue": 0.1183174646148695,
                    "continues": 0.1650329231819513,
                    "cuts": 0.1650329231819513,
                    "depends": 0.10297271727416507,
                    "desktop": 0.10700891377359693,
                    "develop": 0.09927450888021598,
                    "enterprise": 0.11461925622092041,
                    "evolution": 0.14708071962724575,
                    "game": 0.11297866942994164,
                    "generation": 0.14263831373292668,
                    "good": 0.05623693948501231,
                    "google": 0.19172390672864142,
                    "happened": 0.12359535799827318,
                    "inject": 0.1650329231819513,
                    "java": 0.385697155095131,
                    "language": 0.20142892184546168,
                    "life": 0.10297271727416507,
                    "like": 0.09531403958725122,
                    "lot": 0.06858501419880714,
                    "new": 0.06370194538571877,
                    "open": 0.08392976153951157,
                    "oracle": 0.38188069917666684,
                    "platform": 0.09871402854121272,
                    "players": 0.14968817584124688,
                    "predict": 0.14263831373292668,
                    "press": 0.14968817584124688,
                    "relevant": 0.31749953869943787,
                    "resources": 0.10545474657535167,
                    "right": 0.0784293759225874,
                    "space": 0.1183174646148695,
                    "tries": 0.14968817584124688,
                    "win": 0.1263095025676426,
                    "world": 0.0869670912777426,
                    "years": 0.08039590275631843
                },
                "Max term": "java",
                "Max score": 0.385697155095131
            }
        ]
    },
    {
        "ID": "368",
        "Question": "For a long time in SO and in other places Java has the reputation of being slow. From jokes to many comments in questions and answers, people still believe Java is slow based solely on experience with it in the 90s. This is my issue: we have disproved (most) of the reasons that people believe Java is slow. Outside of small things, Java is pretty fast. So why is it that people still refuse to believe Java is fast now? Is it part of their mindset that anything thats not C/C++ is slow? Is it because people don't check over time? Is it because people are just biased? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "90s": 0.17681060596941517,
                    "answers": 0.1051731687136974,
                    "based": 0.08917121050915294,
                    "believe": 0.3237917408894476,
                    "biased": 0.155078325814479,
                    "check": 0.10546418670662953,
                    "comments": 0.10793058029648256,
                    "experience": 0.07980132753439674,
                    "fast": 0.22929135015779417,
                    "issue": 0.09930918610754147,
                    "java": 0.41322268549932434,
                    "long": 0.08133864753732123,
                    "mindset": 0.14546163864747585,
                    "outside": 0.11464567507889709,
                    "people": 0.3279861560487235,
                    "places": 0.1315207091710192,
                    "pretty": 0.09007198973818531,
                    "questions": 0.08946768523024823,
                    "reasons": 0.10488567829850015,
                    "refuse": 0.1528177905312198,
                    "reputation": 0.13637795523383328,
                    "slow": 0.4961908849753296,
                    "small": 0.08961732401593415,
                    "solely": 0.16037077067202865,
                    "thats": 0.16353782402425385,
                    "things": 0.06788504386099797,
                    "time": 0.11106095979136386
                },
                "Max term": "slow",
                "Max score": 0.4961908849753296
            }
        ],
        "Best answer": "It's the applications. As you note, we have proved, time and time again, that in contrived scenarios Java code can meet or even beat the performance of so-called \"performant\" languages like C, C++, Lisp, VB6, or JavaScript. And when presented with such evidence, most sane, open-minded opponents will hang their heads in shame and promise never again to spread such slander. ...but then, they fire up Eclipse, or NetBeans, or Guiffy, or enable the Java support in their browser, or try to run an app on their favorite feature phone. And they wait for it to become responsive... ...and wait...   ...and wait...     ...and wait...         ...and wait...             ...and...      ...what did I promise never to do again? Sorry, must have dozed off... ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "app": 0.08692713205408406,
                    "applications": 0.08820766954117953,
                    "beat": 0.14276609881766358,
                    "browser": 0.11238812260757745,
                    "called": 0.09838281540650745,
                    "code": 0.04636630653479282,
                    "contrived": 0.151478886167295,
                    "eclipse": 0.11484661543587382,
                    "enable": 0.151478886167295,
                    "evidence": 0.13486428988675267,
                    "favorite": 0.11837722144405984,
                    "feature": 0.09080943785431181,
                    "hang": 0.13486428988675267,
                    "heads": 0.1553966806256426,
                    "java": 0.149753083334256,
                    "javascript": 0.10129546812149574,
                    "languages": 0.07312538857477022,
                    "like": 0.046258998558446965,
                    "lisp": 0.11689467656933315,
                    "meet": 0.11484661543587382,
                    "minded": 0.1553966806256426,
                    "netbeans": 0.12670967359748897,
                    "note": 0.09528764302883272,
                    "open": 0.0814676774771042,
                    "performance": 0.09426419352745048,
                    "phone": 0.11689467656933315,
                    "presented": 0.136584277813956,
                    "promise": 0.2769080222776885,
                    "responsive": 0.14816643815073785,
                    "run": 0.08078975445320451,
                    "sane": 0.1553966806256426,
                    "scenarios": 0.136584277813956,
                    "shame": 0.16019167351692642,
                    "sorry": 0.13486428988675267,
                    "spread": 0.1452970651635874,
                    "support": 0.0853854719354518,
                    "time": 0.1006220238533211,
                    "try": 0.0755980417842099,
                    "vb6": 0.14816643815073785,
                    "wait": 0.6130210326303553
                },
                "Max term": "wait",
                "Max score": 0.6130210326303553
            }
        ]
    },
    {
        "ID": "4296",
        "Question": "Has anybody's organization started the migration from Java to Scala? If yes, how do you do that? What can I do to encourage my colleagues to do the same? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "anybody": 0.3549315215742831,
                    "colleagues": 0.3765444062132519,
                    "encourage": 0.34307077531731617,
                    "java": 0.21839195538890738,
                    "migration": 0.4164050153737749,
                    "organization": 0.333101392278412,
                    "scala": 0.3765444062132519,
                    "started": 0.2589462082228857,
                    "yes": 0.2713978981446023
                },
                "Max term": "migration",
                "Max score": 0.4164050153737749
            }
        ],
        "Best answer": "Probably the easiest way is to first use Scala only for testing. In this case, you might even not have to tell your boss :-) If he asks, tell him \"that's just my private test case, it's so much easier and faster to use Scala for it\". Once you (and your organization) has enough experience with Scala you can start using it for the 'real' code. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "asks": 0.2281411167986452,
                    "boss": 0.1849272472422743,
                    "case": 0.263496834019831,
                    "code": 0.07744713464813667,
                    "easier": 0.14519718743862392,
                    "easiest": 0.2252681655858647,
                    "experience": 0.12076597570310486,
                    "faster": 0.1734970737808391,
                    "organization": 0.19076049513169807,
                    "private": 0.1877254997205534,
                    "probably": 0.12523840421627652,
                    "real": 0.13562084628254667,
                    "scala": 0.6469183170655249,
                    "start": 0.12325304679961178,
                    "tell": 0.3149050348938298,
                    "test": 0.12919059274649627,
                    "testing": 0.1397067002052274,
                    "use": 0.16636548782026728,
                    "using": 0.10130746265651852,
                    "way": 0.09536521763209346
                },
                "Max term": "scala",
                "Max score": 0.6469183170655249
            }
        ]
    },
    {
        "ID": "4714",
        "Question": "It seems to me that rapid-development web platforms are going to radically change the world of web applications. It has been five years since Rails 1.0 was released for Ruby, and since that time we have seen Grails for Groovy, Django for Python, and Roo for Java. But to my knowledge (which is probably limited, being a Java/Groovy progammer) there is no similar framework for C#. Does such a thing exist?  If not, why not? Edit:  It's quite possible I'm not using the right words when I say \"rapid-development,\" but I'm talking about frameworks that can conceivably allow you to build a working blog engine in 30 minutes.  You couldn't reasonably do this with, say, Java, Spring, and Hibernate, given the various configuration needed to allow your controllers to be found, and both configuration and code necessary for your entities to persist and be retrieved.   So I'm talking about frameworks that handle all of the CRUD with a convention-over-configuration mentality.  If someone has the right words for what I'm talking about, let me know. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "30": 0.10371657927359638,
                    "allow": 0.18482599479691916,
                    "applications": 0.08181900829312072,
                    "blog": 0.09864917728988273,
                    "build": 0.0788969037297421,
                    "change": 0.07216876986869157,
                    "code": 0.04300811073033209,
                    "configuration": 0.3273120411425316,
                    "controllers": 0.1374351130108688,
                    "convention": 0.11651002895236671,
                    "crud": 0.13242590677090355,
                    "development": 0.12054845156058623,
                    "django": 0.12361928394834379,
                    "edit": 0.07998296376854044,
                    "engine": 0.1091040137141772,
                    "entities": 0.13477356154427986,
                    "exist": 0.0999084609307049,
                    "framework": 0.07935513145241084,
                    "frameworks": 0.1892249159437821,
                    "given": 0.08423233702401489,
                    "going": 0.06561670842143844,
                    "grails": 0.14414168707741673,
                    "groovy": 0.2695471230885597,
                    "handle": 0.09182671901275427,
                    "hibernate": 0.13032585801489172,
                    "java": 0.20836026216845752,
                    "know": 0.05153126327398324,
                    "knowledge": 0.07830187363014238,
                    "let": 0.08014306124030769,
                    "limited": 0.10172171296786812,
                    "mentality": 0.14858939060680484,
                    "minutes": 0.1012527024328865,
                    "necessary": 0.09097841958332852,
                    "needed": 0.08587714838488206,
                    "platforms": 0.10714190341922983,
                    "possible": 0.07195444492113029,
                    "probably": 0.06954766216587589,
                    "python": 0.08423233702401489,
                    "quite": 0.07982414198739246,
                    "radically": 0.14050764868885418,
                    "rails": 0.1105283357904279,
                    "rapid": 0.26065171602978343,
                    "reasonably": 0.11461030377274277,
                    "released": 0.1065285618547921,
                    "right": 0.14122967647080714,
                    "ruby": 0.09528818465165219,
                    "say": 0.12941420889233662,
                    "seen": 0.08326924978534417,
                    "similar": 0.07815585079335391,
                    "spring": 0.11974936081771739,
                    "talking": 0.28383737391567315,
                    "thing": 0.0658507466649995,
                    "time": 0.046667110960697186,
                    "using": 0.05625827981287826,
                    "various": 0.08912909146740401,
                    "web": 0.13653436692405455,
                    "words": 0.19492949600957862,
                    "working": 0.0630718325742993,
                    "world": 0.07830187363014238,
                    "years": 0.0723854244808757
                },
                "Max term": "configuration",
                "Max score": 0.3273120411425316
            }
        ],
        "Best answer": "It seems to me that there is no name yet for this kind of framework you are all talking about in this thread. I call them for the moment just RAILS-like Frameworks: Frameworks that increment productivity by orchestrating other existing frameworks with the purpose of solving the basic needs of most web applications, but at the same time hiding all the complexities from the developer. By basic needs I mean the implementation of a Persistence Provider, a Dependency Inyection Container, a Logging tool, an MVC platform, an HTML Template Engine, a Web Site Template Starter Kit with CSS presets, a Security Framework and some Javascript Library for AJAX features and other cool stuff. The RAILS-like Frameworks orchestrate all these frameworks and tools on the basis of the Domain model (the entities of your system with its attributes). Thanks to the Convention-over-Configuration principle, these frameworks avoid the need of defining lots of configuration files usually required by the frameworks they orchestrate (like Spring, Spring MVC, Hibernate, Log4J, etc.), assuming configurations by default based on naming, structure and metadata included in the same classes definitions. Thanks to the dynamic languages that these frameworks make use (like Ruby, Groovy, Python, Clojure, etc.), with the exception of SpringRoo that implements dynamic behaviour in Java by using AspectJ, the functionality that belongs to the frameworks underneath are extended and are made available to the developer in such a uniform and elegant manner that he/she is just aware of the underlying technologies. Finally thanks to the Scaffold technique, unit tests, integration tests, controllers and views are automatically generated for the main functions (CRUD) over each one of the domain objects defined by the developer. In the .NET world nothing has been developed yet, following all the previous definitions. But nothing prevents that from occurring soon. There are great frameworks, tools and libraries already available in the .NET world that can be orchestrated by a new RAILS-like framework made for the CLR. There are Unity, Spring.NET and Castle Windsor among others for the Dependency Inyection needs. Entity Framework 4, NHibernate and iBatis.NET are pretty good .NET Persistence Providers. ASP.NET MVC have strongly arrived with support for various Template Engines besides the traditional ASP.NET. Even if nobody achieves to use a DLR language to build this kind of framework, anyone with enough will can follow the SpringSource path and implement a RAILS-like framework with some static language like F#, C# or VB.NET, making use of an Aspect-Oriented Container (like AspectSharp or Gripper-LOOM.NET) to obtain dynamic behaviour. I would love to know about any group of people trying to develop such framework in .NET. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "ajax": 0.05626555183930253,
                    "applications": 0.03765900396307176,
                    "arrived": 0.06839154576018695,
                    "asp": 0.0919701473930028,
                    "aspect": 0.05157915801296525,
                    "assuming": 0.04798250284466541,
                    "attributes": 0.05567346539541927,
                    "automatically": 0.04990651165691869,
                    "available": 0.07631005014242948,
                    "avoid": 0.041378804010345334,
                    "aware": 0.04370166259544168,
                    "based": 0.03449203112330789,
                    "basic": 0.0813633949319866,
                    "basis": 0.04990651165691869,
                    "behaviour": 0.11023457134688582,
                    "belongs": 0.06325754336937728,
                    "build": 0.03631404085940581,
                    "classes": 0.04162346266228157,
                    "clojure": 0.05831270553052954,
                    "clr": 0.06839154576018695,
                    "configuration": 0.10043505954336274,
                    "configurations": 0.06634439206895994,
                    "container": 0.12406501115560623,
                    "controllers": 0.06325754336937728,
                    "convention": 0.053626311704192256,
                    "cool": 0.0505394630046096,
                    "crud": 0.06095194566563981,
                    "css": 0.05121934108242245,
                    "default": 0.05121934108242245,
                    "defined": 0.045787772420515224,
                    "defining": 0.05689850318699343,
                    "definitions": 0.108193768750226,
                    "dependency": 0.10725262340838451,
                    "develop": 0.04114050085276505,
                    "developed": 0.04681966295733603,
                    "developer": 0.09271848820644514,
                    "dlr": 0.06839154576018695,
                    "domain": 0.08836084564445151,
                    "dynamic": 0.14881707814736017,
                    "elegant": 0.05689850318699343,
                    "engine": 0.05021752977168137,
                    "engines": 0.06634439206895994,
                    "entities": 0.06203250557780311,
                    "entity": 0.05121934108242245,
                    "exception": 0.04468554979288894,
                    "existing": 0.04090823133942458,
                    "extended": 0.05626555183930253,
                    "features": 0.03610787137998772,
                    "files": 0.040138689542023966,
                    "finally": 0.04875824549105907,
                    "follow": 0.040138689542023966,
                    "following": 0.03815502507121474,
                    "framework": 0.2556746519592538,
                    "frameworks": 0.4354747147453485,
                    "functionality": 0.04125887869825354,
                    "functions": 0.04102363104635877,
                    "generated": 0.05234411387888524,
                    "good": 0.023305235985923035,
                    "great": 0.035019763827961486,
                    "groovy": 0.06203250557780311,
                    "group": 0.04486030090003862,
                    "hibernate": 0.059985351886576097,
                    "hiding": 0.06203250557780311,
                    "html": 0.04309986291006246,
                    "implement": 0.040794265206325,
                    "implementation": 0.04239920530867522,
                    "implements": 0.06203250557780311,
                    "included": 0.05157915801296525,
                    "increment": 0.06095194566563981,
                    "integration": 0.045220117830581406,
                    "java": 0.031967469428121266,
                    "javascript": 0.04324665253340289,
                    "kind": 0.07194590978711797,
                    "know": 0.023718400996803505,
                    "language": 0.0556496447707012,
                    "languages": 0.031219839640506716,
                    "libraries": 0.041378804010345334,
                    "library": 0.03982767142726129,
                    "like": 0.15799694689605234,
                    "logging": 0.05234411387888524,
                    "lots": 0.039726298509228944,
                    "love": 0.04468554979288894,
                    "main": 0.039726298509228944,
                    "make": 0.024527869333574134,
                    "making": 0.0365249502798934,
                    "manner": 0.05317870313971987,
                    "mean": 0.03807047004191772,
                    "metadata": 0.06634439206895994,
                    "model": 0.0428131472088116,
                    "moment": 0.0505394630046096,
                    "mvc": 0.14881707814736017,
                    "naming": 0.05317870313971987,
                    "need": 0.025042072977253416,
                    "needs": 0.1091514199154257,
                    "net": 0.3410158259256835,
                    "new": 0.02639882048297124,
                    "nhibernate": 0.059985351886576097,
                    "objects": 0.04401804414545559,
                    "obtain": 0.06467174571291338,
                    "oriented": 0.04324665253340289,
                    "path": 0.04960569271578673,
                    "people": 0.025373455486029275,
                    "persistence": 0.12934349142582677,
                    "platform": 0.04090823133942458,
                    "pretty": 0.03484045865979204,
                    "prevents": 0.06203250557780311,
                    "previous": 0.045220117830581406,
                    "principle": 0.05087310543598241,
                    "productivity": 0.04990651165691869,
                    "provider": 0.05689850318699343,
                    "providers": 0.06325754336937728,
                    "purpose": 0.04309986291006246,
                    "python": 0.03876979176332648,
                    "rails": 0.20349242174392965,
                    "required": 0.04200313708052508,
                    "ruby": 0.04385848958929753,
                    "security": 0.04339582908422809,
                    "site": 0.03982767142726129,
                    "solving": 0.048233865300872134,
                    "soon": 0.04468554979288894,
                    "spring": 0.16535185702032873,
                    "starter": 0.06839154576018695,
                    "static": 0.04540546061379992,
                    "strongly": 0.05121934108242245,
                    "structure": 0.04486030090003862,
                    "stuff": 0.03532662038414251,
                    "support": 0.03645410702642777,
                    "talking": 0.04354747147453485,
                    "technique": 0.05275192127144705,
                    "technologies": 0.04370166259544168,
                    "template": 0.1670203961862578,
                    "tests": 0.07453040583573109,
                    "thanks": 0.12679582094768352,
                    "thread": 0.05757838126480629,
                    "time": 0.021479567563540962,
                    "tool": 0.03982767142726129,
                    "tools": 0.07167998757496627,
                    "traditional": 0.05567346539541927,
                    "trying": 0.034781460670381216,
                    "underlying": 0.05275192127144705,
                    "underneath": 0.06467174571291338,
                    "uniform": 0.06634439206895994,
                    "unit": 0.03858990059306583,
                    "use": 0.06378434872571655,
                    "using": 0.02589411466390158,
                    "usually": 0.03570893219085782,
                    "various": 0.04102363104635877,
                    "vb": 0.05626555183930253,
                    "views": 0.054096884375113,
                    "web": 0.06284295510730087,
                    "world": 0.07208033025258279
                },
                "Max term": "frameworks",
                "Max score": 0.4354747147453485
            }
        ]
    },
    {
        "ID": "7539",
        "Question": "I'm writing a small database-centric application in Java Swing that will be used internally in a small company. I haven't much experience with developing production-level applications. I don't use an ORM, just a few simple methods that run SQL queries with Java JDBC. On every method that access the database I use a try-catch statement for SQLException and IOException. Should I do any logging here? In case I should, how much should I log? Please give me examples of good practice in this case. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "access": 0.14600466845354362,
                    "application": 0.11760556651132696,
                    "applications": 0.1391051915871232,
                    "case": 0.2487766065722167,
                    "catch": 0.2016558001372746,
                    "centric": 0.23366132302268755,
                    "company": 0.11938527585305307,
                    "database": 0.28777200910585216,
                    "developing": 0.15110721896790308,
                    "examples": 0.1506862497676872,
                    "experience": 0.1140193950965653,
                    "good": 0.08608510517123377,
                    "internally": 0.2056471827492586,
                    "java": 0.23616349299704603,
                    "level": 0.12804439963815636,
                    "log": 0.17912135924133205,
                    "logging": 0.1933491920476859,
                    "method": 0.14528362880876394,
                    "methods": 0.1456422309363508,
                    "orm": 0.196432005898493,
                    "practice": 0.14865644641388076,
                    "production": 0.16841786562506403,
                    "queries": 0.20359276073485108,
                    "run": 0.12740699680590803,
                    "simple": 0.12719716588888552,
                    "small": 0.25608879927631273,
                    "sql": 0.15866901499165517,
                    "statement": 0.1754542622124054,
                    "swing": 0.22514488401607632,
                    "try": 0.11921956606159351,
                    "use": 0.15707149448157187,
                    "used": 0.10257667667215493,
                    "writing": 0.12056850374868143
                },
                "Max term": "database",
                "Max score": 0.28777200910585216
            }
        ],
        "Best answer": "Two main things in production system are:  Don't blow up the logs with information that is not interesting Allow raising the log level for troubleshooting purpose.  Use some kind of a logging infrastructure. If the exception can occur during the normal operation, report it in debug level. If it is a real problem, report it in error level. Either way you will have a way to troubleshoot the system by raising the log level. Also - when you report an exception always make sure the the entire stack trace + inner exceptions are printed. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "allow": 0.11277435027414079,
                    "blow": 0.16771618723528378,
                    "debug": 0.12999999661317177,
                    "entire": 0.12413405485877235,
                    "error": 0.10670183699191652,
                    "exception": 0.23695166257132302,
                    "exceptions": 0.1323182881832176,
                    "information": 0.10049485701525258,
                    "infrastructure": 0.14474343248334787,
                    "inner": 0.16160330273846873,
                    "interesting": 0.10479845784833819,
                    "kind": 0.09537592699585022,
                    "level": 0.36762812478053786,
                    "log": 0.2571375616275259,
                    "logging": 0.13878115931112797,
                    "logs": 0.16771618723528378,
                    "main": 0.105327253700529,
                    "make": 0.06503130704288038,
                    "normal": 0.12721711913664316,
                    "occur": 0.14917815843833845,
                    "operation": 0.15085631698016294,
                    "printed": 0.16771618723528378,
                    "problem": 0.07825118677815739,
                    "production": 0.12088608383937591,
                    "purpose": 0.11427166299250262,
                    "raising": 0.3626561729420164,
                    "real": 0.09190703119513446,
                    "report": 0.4132378622834903,
                    "stack": 0.11068818801657215,
                    "sure": 0.08654102222740759,
                    "things": 0.06961949502873445,
                    "trace": 0.14917815843833845,
                    "use": 0.05637097281872215,
                    "way": 0.12925349269069636
                },
                "Max term": "report",
                "Max score": 0.4132378622834903
            }
        ]
    },
    {
        "ID": "7581",
        "Question": "Is Java becoming the de facto standard from Linux application development in the same way .NET is the standard for Windows application development?  If not why not?   ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "application": 0.4165953986811074,
                    "development": 0.3630006131922943,
                    "facto": 0.41385044479002703,
                    "java": 0.2091410879551173,
                    "linux": 0.2923467095376714,
                    "net": 0.22310311738742425,
                    "standard": 0.5049341682963443,
                    "way": 0.15947064002136982,
                    "windows": 0.2530526514153876
                },
                "Max term": "standard",
                "Max score": 0.5049341682963443
            }
        ],
        "Best answer": "In short: No. It really depends on what sort of application you are writing. For many the answer is still regular old C/C++ (if doing, say Qt or GTK+ GUI development). Many doing GTK+ development may also be using Python + PyGTK. If doing web or web services development, you see lots of Ruby, Python, PHP, and Java. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "answer": 0.13280696957160626,
                    "application": 0.12880065752363407,
                    "depends": 0.17263097040091888,
                    "development": 0.3366915559461521,
                    "gtk": 0.5118079515439569,
                    "gui": 0.2031515110693029,
                    "java": 0.12932216596298624,
                    "lots": 0.16070996737659407,
                    "old": 0.15834022173516002,
                    "php": 0.1543534903717126,
                    "python": 0.31368097221713587,
                    "qt": 0.24657684121235876,
                    "really": 0.10421494836474157,
                    "regular": 0.1894056780726397,
                    "ruby": 0.17742645792799544,
                    "say": 0.12048453212358921,
                    "services": 0.1787288163480561,
                    "short": 0.16112006443977916,
                    "sort": 0.15834022173516002,
                    "using": 0.1047528332375253,
                    "web": 0.2542267878996289,
                    "writing": 0.13204564222710694
                },
                "Max term": "gtk",
                "Max score": 0.5118079515439569
            }
        ]
    },
    {
        "ID": "9849",
        "Question": "I'd like a feature added to Eclipse, as a small plug-in, but:  It's a bit niche, so not high demand. So if I post it as a feature request it's unlikely to be followed-up. Still, I'm sure someone else would find it handy. I'm a programmer, but I don't know Java, and I don't think it's currently worth my time learning Java just to code this.  What might be a good way to find a programmer who could code such an Eclipse plug-in, and pay them to do the job? My example is specifically about Java and Eclipse, but what might be an answer to this question in general terms? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "added": 0.1425700373240064,
                    "answer": 0.10265279275986171,
                    "bit": 0.11186259647708527,
                    "code": 0.12379684949290672,
                    "currently": 0.12976752926060509,
                    "demand": 0.17234648704956346,
                    "eclipse": 0.459956277363256,
                    "example": 0.08933764013115891,
                    "feature": 0.24245887047634207,
                    "followed": 0.17408560790937413,
                    "general": 0.11311914954904152,
                    "good": 0.0728732466223424,
                    "handy": 0.1939697190924641,
                    "high": 0.12584148976726517,
                    "java": 0.2998776693273728,
                    "job": 0.10148769014676373,
                    "know": 0.0741651741424843,
                    "learning": 0.1064621430780549,
                    "like": 0.06175516997386211,
                    "niche": 0.19059091147099844,
                    "pay": 0.13569461202393063,
                    "plug": 0.36467651938037254,
                    "post": 0.13133979716961566,
                    "programmer": 0.1952429123658599,
                    "question": 0.08461017198384166,
                    "request": 0.15082268910481852,
                    "small": 0.10839286418806852,
                    "specifically": 0.13814796169187588,
                    "sure": 0.10206432682039031,
                    "terms": 0.12686005979224915,
                    "think": 0.07345816733988783,
                    "time": 0.06716455586824609,
                    "unlikely": 0.18004209785989442,
                    "way": 0.07621917549110134,
                    "worth": 0.12328987915553391
                },
                "Max term": "eclipse",
                "Max score": 0.459956277363256
            }
        ],
        "Best answer": "Take a look here: Hacker News Thread To summarize it briefly:   Hacker News Freelance Google Spreadsheet Craigslist FreelanceSwitch Odesk eLance Authentic Jobs  ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "freelance": 0.2820665174607795,
                    "google": 0.18384086922466153,
                    "hacker": 0.5266169100073086,
                    "jobs": 0.21469172576620413,
                    "look": 0.1469457632643426,
                    "news": 0.5470940380641395,
                    "spreadsheet": 0.30702107077269875,
                    "summarize": 0.2775934241397659,
                    "thread": 0.26645471784419733
                },
                "Max term": "news",
                "Max score": 0.5470940380641395
            }
        ]
    },
    {
        "ID": "11222",
        "Question": "I want to be a successful enterprise Java developer. With what algorithms and data structures should I be well versed? What books would you recommend to me? To be a successful Java developer, do I need to know all the advanced algorithms such as those given in CLRS? Can you suggest a list of the topics that I should learn in the descending order of their priority? Must I know:  Searching? Sorting?  Graphs/Trees?  etc? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "advanced": 0.1880362637409895,
                    "algorithms": 0.3384798933421015,
                    "books": 0.14758920719176208,
                    "data": 0.11962858722814729,
                    "developer": 0.22846961346458464,
                    "enterprise": 0.17556695525301835,
                    "given": 0.14330021190402528,
                    "graphs": 0.22928343924316474,
                    "java": 0.23631517915030342,
                    "know": 0.1753350603281632,
                    "learn": 0.11409262895341359,
                    "list": 0.13607096824911902,
                    "need": 0.09256006289801595,
                    "order": 0.14797236777231954,
                    "priority": 0.1999519378805173,
                    "recommend": 0.1598475047275997,
                    "searching": 0.2128201845061847,
                    "sorting": 0.2057792684907235,
                    "structures": 0.18446355707775774,
                    "successful": 0.376072527481979,
                    "suggest": 0.1609593863253165,
                    "topics": 0.1880362637409895,
                    "trees": 0.21553438074243966,
                    "versed": 0.252787609995606,
                    "want": 0.0949748368745682
                },
                "Max term": "successful",
                "Max score": 0.376072527481979
            }
        ],
        "Best answer": "Cormen's Introduction to Algorithms is a good book for some basic theoretical foundations. That said, most algorithms and data structures have been coded, tested and optimized by others already, and there's no reason to re-implement them once more. To be a successful Java developer you need to know The Collections Framework inside out. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "algorithms": 0.39722143412559746,
                    "basic": 0.1764624195046581,
                    "book": 0.16513586388306756,
                    "coded": 0.23261145187815918,
                    "collections": 0.26019465725568325,
                    "data": 0.14038954725489802,
                    "developer": 0.13405970236288034,
                    "foundations": 0.2966576713912805,
                    "framework": 0.15843196081149458,
                    "good": 0.1010896443699462,
                    "implement": 0.17695069745406544,
                    "inside": 0.2050282465006351,
                    "introduction": 0.2440595164601415,
                    "java": 0.13866326510694268,
                    "know": 0.10288180403918278,
                    "need": 0.1086234120558091,
                    "optimized": 0.26438738980019705,
                    "reason": 0.15721677773146106,
                    "said": 0.16335107356358913,
                    "structures": 0.21647631108261745,
                    "successful": 0.22066904362713124,
                    "tested": 0.22066904362713124,
                    "theoretical": 0.2468050293860866
                },
                "Max term": "algorithms",
                "Max score": 0.39722143412559746
            }
        ]
    },
    {
        "ID": "13691",
        "Question": "I am very interested in Python for programming on the JVM, and I've worked in Java and Ruby (not JRuby) a lot, and to a certain extent in Groovy. What are the limits to the Java-Jython and Java-JRuby integration right now? What about Groovy: are there any things that a Java class can do that a Groovy class cannot? And what about IDE integration (mostly Eclipse, but IntelliJ and Netbeans are also interesting)? I'm not interested in whether Python, Ruby or Groovy is better/more-concise/whatever. I'm just interested in how well they are working in the JVM and tools (especially IDEs) right now. My main interest is not inside a web server, if that matters. Simple examples of getting a HelloWorld which extends a custom Java class and implements a custom Java interface would be very useful to me.  ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "better": 0.05445418885261271,
                    "certain": 0.07750507861422334,
                    "class": 0.21634504741944452,
                    "concise": 0.11490824284469185,
                    "custom": 0.2172230010418012,
                    "eclipse": 0.09662036500549474,
                    "especially": 0.07909539170580651,
                    "examples": 0.08038723791584275,
                    "extends": 0.12010900387286833,
                    "extent": 0.10479142202286384,
                    "getting": 0.06865495003321063,
                    "groovy": 0.4889532152794401,
                    "ide": 0.08705983899134274,
                    "ides": 0.11087421918978248,
                    "implements": 0.12223830381986002,
                    "inside": 0.09314263615826139,
                    "integration": 0.178217225006704,
                    "intellij": 0.12010900387286833,
                    "interested": 0.2348482606777315,
                    "interesting": 0.07788973471629648,
                    "interface": 0.08705983899134274,
                    "java": 0.3779614449465381,
                    "jruby": 0.2695382516464093,
                    "jvm": 0.21941496363303079,
                    "jython": 0.1307351021682953,
                    "limits": 0.11820428016495065,
                    "lot": 0.056007869399214434,
                    "main": 0.07828275355924384,
                    "matters": 0.10660074627582199,
                    "netbeans": 0.10660074627582199,
                    "programming": 0.04995821276359773,
                    "python": 0.15279581375781168,
                    "right": 0.1280939369933255,
                    "ruby": 0.1728509053619493,
                    "server": 0.0732817531797486,
                    "simple": 0.06785641591249811,
                    "things": 0.051743547664777366,
                    "tools": 0.07062458639529637,
                    "useful": 0.07225680598245159,
                    "web": 0.061917668549671054,
                    "worked": 0.07283535630784971,
                    "working": 0.05720553604394797
                },
                "Max term": "groovy",
                "Max score": 0.4889532152794401
            }
        ],
        "Best answer": "I have no experience of JRuby nor Groovy. But Jython:  Excellent integration with NetBeans. NetBeans can run Python programs with Jython almost straight out of the box, just install the \"Jython Distribution\" plugin and you're done. Apparently Eclipse works as well. See chapter Using Jython in an IDE in the Jython Book. Java-Jython integration is excellent. Calling Java from Jython is super easy. Calling Jython from Java is not quite as straightforward (Java was not designed with Jython in mind), but still fairly easy. I've mostly had luck with creating a class in Jython (extending a Java class/interface), and then creating instances of that class in Java using an object factory. See Jython and Java Integration for how-to.  Extending a Java class in Jython works like this: from javax.swing import JFrame, JButton  class MyFrame(JFrame):      def __init__(self):         self.defaultCloseOperation = JFrame.EXIT_ON_CLOSE         self.size = (300, 300)         self.add(JButton('Click Me!', actionPerformed=self.print_something))         self.visible = True      def print_something(self, event):         print 'Clicked!'  Implementing interfaces works similarly, just import the interface, \"extend\" it using a class definition such as class MyClass(MyInterface) and implement what's needed.  My only criticism against Jython is that its raw performance is not very good (and that's mostly because it uses massive reflection to interact with Java). But then, raw performance is usually pretty irrelevant for a scripting language. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "300": 0.11250716483382711,
                    "add": 0.03300317297427045,
                    "apparently": 0.0472906850401494,
                    "book": 0.03385525599134154,
                    "box": 0.04385426520384201,
                    "calling": 0.08876159006807696,
                    "chapter": 0.05185624372670208,
                    "class": 0.22781043556198102,
                    "click": 0.04691115703886835,
                    "creating": 0.07857741303457866,
                    "criticism": 0.05420326361635406,
                    "definition": 0.04021328508493098,
                    "designed": 0.04360321829531225,
                    "distribution": 0.050598623783705485,
                    "easy": 0.0630539389513066,
                    "eclipse": 0.04360321829531225,
                    "event": 0.04768873377759457,
                    "excellent": 0.08770853040768402,
                    "experience": 0.02744998340426453,
                    "extend": 0.05003575366724656,
                    "factory": 0.056253582416913556,
                    "fairly": 0.03900241816831689,
                    "good": 0.02072484866546987,
                    "groovy": 0.055164182470258165,
                    "ide": 0.03928870651728933,
                    "implement": 0.03627746886282574,
                    "implementing": 0.04438079503403848,
                    "import": 0.09901844767410017,
                    "install": 0.04438079503403848,
                    "instances": 0.05120322483911436,
                    "integration": 0.12063985525479293,
                    "interact": 0.050598623783705485,
                    "interface": 0.07857741303457866,
                    "interfaces": 0.0472906850401494,
                    "irrelevant": 0.04768873377759457,
                    "java": 0.2558518909074446,
                    "jruby": 0.060819141103466236,
                    "jython": 0.7669824635721394,
                    "language": 0.024744020332095773,
                    "like": 0.017562913844794498,
                    "luck": 0.04950922383705009,
                    "massive": 0.04950922383705009,
                    "mind": 0.0345583264517229,
                    "myclass": 0.05899865104401072,
                    "needed": 0.035150385797088374,
                    "netbeans": 0.09621440800898494,
                    "object": 0.03423834893949013,
                    "performance": 0.07157759403199797,
                    "plugin": 0.04854830498314599,
                    "pretty": 0.030982875847980866,
                    "print": 0.0472906850401494,
                    "programs": 0.03598076777373324,
                    "python": 0.034477147863769986,
                    "quite": 0.03267282903017715,
                    "raw": 0.10371248745340415,
                    "reflection": 0.05420326361635406,
                    "run": 0.030673026680657346,
                    "scripting": 0.04768873377759457,
                    "self": 0.28502661732416623,
                    "similarly": 0.04810720400449247,
                    "size": 0.04089354400041809,
                    "straight": 0.04810720400449247,
                    "straightforward": 0.05334369241080265,
                    "super": 0.050598623783705485,
                    "swing": 0.05420326361635406,
                    "true": 0.037704707821420415,
                    "uses": 0.03627746886282574,
                    "using": 0.0690812495603781,
                    "usually": 0.03175519081240244,
                    "visible": 0.04901462508783658,
                    "works": 0.0963298767411547
                },
                "Max term": "jython",
                "Max score": 0.7669824635721394
            }
        ]
    },
    {
        "ID": "14745",
        "Question": "I'm on the way of learning Java myself. I find most of texts giving emphasis to Java applets. I got confused about the importance. Is it something widely used?  Do I need to spend more time on it? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "applets": 0.36739200692617485,
                    "confused": 0.27514477563777795,
                    "emphasis": 0.317537709061415,
                    "giving": 0.2577568297586952,
                    "got": 0.1977604286471976,
                    "importance": 0.3132495643434883,
                    "java": 0.34345159533988895,
                    "learning": 0.1828975443493811,
                    "need": 0.13452331492791975,
                    "spend": 0.2145006040120678,
                    "texts": 0.36739200692617485,
                    "time": 0.11538592010694906,
                    "used": 0.14917683847162713,
                    "way": 0.1309413809135549,
                    "widely": 0.2856702572674759
                },
                "Max term": "applets",
                "Max score": 0.36739200692617485
            }
        ],
        "Best answer": "Applets aren't used widely these days, so the knowledge won't be that useful.  That said, there is little in Java that is applet-specific.  It makes no difference if you learn AWT and Swing by writing applets or by writing desktop applications.  It's fairly easy to write an application that will also function as an applet. The main distinction is that you use a different top-level container for applets than for applications.  Unsigned applets also have some security restrictions, particularly around IO and networking. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "applets": 0.7328486515629212,
                    "application": 0.08529140153709389,
                    "applications": 0.2017672649943656,
                    "container": 0.1661771113682975,
                    "days": 0.10588735867500006,
                    "desktop": 0.11879650534598588,
                    "difference": 0.11252100690490083,
                    "different": 0.07776818261538918,
                    "distinction": 0.16069304968537262,
                    "easy": 0.09497214466080776,
                    "fairly": 0.11749125786616545,
                    "function": 0.10510709046252295,
                    "io": 0.15424508468140566,
                    "java": 0.08563674283084935,
                    "knowledge": 0.09654697127156828,
                    "learn": 0.08269059278976452,
                    "level": 0.09286198458184602,
                    "little": 0.09286198458184602,
                    "main": 0.10642164894239896,
                    "makes": 0.0906329910276709,
                    "networking": 0.15621224502982142,
                    "particularly": 0.12542386081324758,
                    "restrictions": 0.15835067007377643,
                    "said": 0.1008836324971828,
                    "security": 0.11625184982419609,
                    "specific": 0.09333311180811842,
                    "swing": 0.1632824302137782,
                    "use": 0.056956691350867644,
                    "used": 0.07439195930868445,
                    "useful": 0.09822966222239479,
                    "widely": 0.14245891233568042,
                    "write": 0.07718597369505742,
                    "writing": 0.17488044096900743
                },
                "Max term": "applets",
                "Max score": 0.7328486515629212
            }
        ]
    },
    {
        "ID": "15292",
        "Question": "For me I am C# and Java person. I find these 2 languages are quite similar so its easier for me to crossover each other. I'm not sure if its good idea to pick up other different languages. Any thoughts? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "different": 0.21805714413892222,
                    "easier": 0.2787648967291788,
                    "good": 0.1750546925430972,
                    "idea": 0.24950782641439395,
                    "java": 0.24012009728203526,
                    "languages": 0.4690087182824333,
                    "person": 0.2828714270139456,
                    "pick": 0.31550190059942723,
                    "quite": 0.27597461060935424,
                    "similar": 0.2702068566292298,
                    "sure": 0.24517693638317706,
                    "thoughts": 0.33966589432419914
                },
                "Max term": "languages",
                "Max score": 0.4690087182824333
            }
        ],
        "Best answer": "It's not about how many languages you learn. It's about learning new concepts. Some languages might be able to teach you many concepts, while others might be able to teach only one. If you know C#, you probably wouldn't learn anything terribly new by learning Java. But you would if you learned Haskell. So when you pick a new language to learn, pick something that will teach you concepts you don't already know. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "able": 0.2313994069515931,
                    "concepts": 0.4511596912150779,
                    "haskell": 0.16065887925058459,
                    "java": 0.10758461965866316,
                    "know": 0.15964573960978232,
                    "language": 0.09364278708794031,
                    "languages": 0.21013703202754674,
                    "learn": 0.3116501987543415,
                    "learned": 0.14008129137237452,
                    "learning": 0.22916723069355718,
                    "new": 0.2665309871477713,
                    "pick": 0.28271812615256847,
                    "probably": 0.10773060137852408,
                    "teach": 0.49789430710109944,
                    "terribly": 0.21764891903095093
                },
                "Max term": "teach",
                "Max score": 0.49789430710109944
            }
        ]
    },
    {
        "ID": "15610",
        "Question": "In the Java world, we often talk about the JVM, and when Java was new it had the supposedly killer feature of \"Write Once, Run Anywhere.\" From the way people talk and write, this seems different from the way that Python, for example, works.  Yet I've not been aware of any way that Python code that I've written would work differently on another machine.  (Though I haven't written that much Python.) So what am I missing?  How is the JVM different from a Python interpreter?  Is there a way that Python lacks Java's platform independence?  Or is this just a cultural difference? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "aware": 0.12206953011824906,
                    "code": 0.05529352741824678,
                    "cultural": 0.17025382846587103,
                    "difference": 0.11732512912327749,
                    "different": 0.1621770426342631,
                    "differently": 0.13940120503416314,
                    "example": 0.07980482983707494,
                    "feature": 0.10829359759473461,
                    "interpreter": 0.1651115051686775,
                    "java": 0.2678790970689945,
                    "jvm": 0.31101946046246276,
                    "killer": 0.18531626223949568,
                    "lacks": 0.18064414812276863,
                    "machine": 0.12250758662028792,
                    "missing": 0.13619381421668456,
                    "new": 0.07373842139288384,
                    "people": 0.07087432387478482,
                    "platform": 0.11426678714262588,
                    "python": 0.541467987973673,
                    "run": 0.09634475628589442,
                    "supposedly": 0.17327209900544882,
                    "talk": 0.23762218421979203,
                    "way": 0.2723447058354972,
                    "work": 0.06337006974534272,
                    "works": 0.10085819694615047,
                    "world": 0.10066907666824966,
                    "write": 0.16096290958242546,
                    "written": 0.20566075212456936
                },
                "Max term": "python",
                "Max score": 0.541467987973673
            }
        ],
        "Best answer": "Java does a very good job on isolating you from the underlying OS and gives you the same exact tools on most platforms it works on to talk to things in the underlying OS.   Python on the other hand does not do as good of a job in isolating you from the underlying OS, It does not have a standard way of handling between process communications (look at the differences in the sys module and os module between a windows and *nix implementation of Python for example.)   I have written code in python that would only work on a *NIX box or Windows box using just Python available API calls, where in Java it would be very difficult to write code that was just Java API that would not work the same on both a Windows box or *NIX box ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "api": 0.1835862792677601,
                    "available": 0.0758306755782287,
                    "box": 0.3920370826832699,
                    "calls": 0.09220288830731706,
                    "code": 0.07868431362687671,
                    "communications": 0.11921705594130341,
                    "differences": 0.09690389899351783,
                    "difficult": 0.07998387106521831,
                    "exact": 0.10251028247469686,
                    "example": 0.05678230846389939,
                    "gives": 0.09139239715900725,
                    "good": 0.09263533629051954,
                    "hand": 0.076518796813369,
                    "handling": 0.09980413330482384,
                    "implementation": 0.08426571274782031,
                    "java": 0.19059991170780002,
                    "job": 0.12900957130145374,
                    "look": 0.0631082718681487,
                    "module": 0.2008879100903408,
                    "nix": 0.3698569294866374,
                    "os": 0.38344690741915644,
                    "platforms": 0.09800927067081748,
                    "process": 0.06723998569091216,
                    "python": 0.30820994046818434,
                    "standard": 0.07669496290480897,
                    "sys": 0.13592382940790995,
                    "talk": 0.08453583692728728,
                    "things": 0.05218688703949639,
                    "tools": 0.07122969875007976,
                    "underlying": 0.31452322365904367,
                    "using": 0.05146289918035327,
                    "way": 0.04844431448206929,
                    "windows": 0.23061854315087219,
                    "work": 0.09017747058680416,
                    "works": 0.07176208835731963,
                    "write": 0.057263737055861304,
                    "written": 0.0731653227623928
                },
                "Max term": "box",
                "Max score": 0.3920370826832699
            }
        ]
    },
    {
        "ID": "16040",
        "Question": "Often in C code (and some other languages as well) I have seen a section in the top-level comments for mod lines. These include the date a modification to the file was made, the user who made the modification, and a brief description of what was changed. I have not yet seen an equivalent of this in Java. I think this information is useful, especially when trying to track down bugs in code I did not write. Is this because Java code is often under version control, or are there other reasons? Are there any suggestions as to how to include the information in the code file? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "brief": 0.21518829926329122,
                    "bugs": 0.13282736504471004,
                    "changed": 0.1557599671029131,
                    "code": 0.26935888507198497,
                    "comments": 0.14201850948595035,
                    "control": 0.12400888296235157,
                    "date": 0.15321092094768993,
                    "description": 0.17546099167068893,
                    "equivalent": 0.1767349835493891,
                    "especially": 0.1365430251815108,
                    "file": 0.2556702270300964,
                    "include": 0.293232576040477,
                    "information": 0.25787990679137435,
                    "java": 0.21749265025422349,
                    "languages": 0.10620305243730899,
                    "level": 0.11792134116115015,
                    "lines": 0.15029211603007353,
                    "modification": 0.3828061528317694,
                    "reasons": 0.13801193005224052,
                    "section": 0.1730591555395541,
                    "seen": 0.2607567724097019,
                    "suggestions": 0.16239368390177336,
                    "think": 0.07991564460304466,
                    "track": 0.1520104472825902,
                    "trying": 0.11831890662980811,
                    "useful": 0.12473751840681682,
                    "user": 0.11233028239871215,
                    "version": 0.12424987618490735,
                    "write": 0.09801506588445008
                },
                "Max term": "modification",
                "Max score": 0.3828061528317694
            }
        ],
        "Best answer": "I see no reason to have those useless comments in any source file. Its just reinventing version control extremely poorly. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "comments": 0.29085091903134275,
                    "control": 0.25396758287495147,
                    "extremely": 0.3325788474944441,
                    "file": 0.2618036225341883,
                    "poorly": 0.3919894729390446,
                    "reason": 0.2525093990760036,
                    "reinventing": 0.46220649099556244,
                    "source": 0.21639961891848702,
                    "useless": 0.35934041883899126,
                    "version": 0.25446113192369435
                },
                "Max term": "reinventing",
                "Max score": 0.46220649099556244
            }
        ]
    },
    {
        "ID": "16165",
        "Question": "EDIT: This question at first seems to be bashing Java, and I guess at this point it is a bit. However, the bigger point I am trying to make is why any one single language is chosen as the one end all be all solution to all problems. Java happens to be the one that's used so that's the one I had to beat on here, but I'm not intentionality ripping Java a new one :) I don't like Java in most academic settings. I'm not saying the language itself is bad -- it has several extremely desirable aspects, most importantly the ability to run without recompilation on most any platform. Nothing wrong with using the language for Your Next App ^TM. (Not something I would personally do, but that's more because I have less experience with it, rather than it's design being poor) I think it is a waste that high level CS courses are taught using Java as a language. Too many of my co-students cannot program worth a damn, because they don't know how to work in a non-garbage-collected world. They don't fundamentally understand the machines they are programming for. When someone can work outside of a garbage collected world, they can work inside of one, but not vice versa. GC is a tool, not a crutch. But the way it is used to teach computer science students is a as a crutch. Computer science should not teach an entire suite of courses tailored to a single language. Students leave with the idea that all good design is idiomatic Java design, and that Object Oriented Design is the ONE TRUE WAY THAT IS THE ONLY WAY THINGS CAN BE DONE. Other languages, at least one of them not being a garbage collected language, should be used in teaching, in order to give the graduate a better understanding of the machines. It is an embarrassment that somebody with a PHD in CS from a respected institution cannot program their way out of a paper bag. What's worse, is that when I talk to those CS professors who actually do understand how things operate, they share feelings like this, that we're doing a disservice to our students by doing everything in Java. (Note that the above would be the same if I replaced it with any other language, generally using a single language is the problem, not Java itself) In total, I feel I can no longer respect any kind of degree at all -- when I can't see those around me able to program their way out of fizzbuzz problems. Why/how did it get to be this way? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "ability": 0.05908695705982308,
                    "able": 0.045458472094637666,
                    "academic": 0.0771059177674661,
                    "actually": 0.04193149470243393,
                    "app": 0.049072970939258505,
                    "aspects": 0.06726865866768626,
                    "bad": 0.045913431656049546,
                    "beat": 0.08059574097108793,
                    "better": 0.03653993920556748,
                    "bigger": 0.0664018019029031,
                    "bit": 0.04730366616349583,
                    "chosen": 0.07218728821757618,
                    "collected": 0.26317824868493805,
                    "computer": 0.09980550600385679,
                    "courses": 0.14879800118315534,
                    "cs": 0.20317944086151546,
                    "damn": 0.08364439435343125,
                    "degree": 0.06134453275155139,
                    "design": 0.16662562933814748,
                    "desirable": 0.08202454731735603,
                    "edit": 0.04867843752915549,
                    "end": 0.04379220007618652,
                    "entire": 0.061908859296517835,
                    "experience": 0.04081584031119598,
                    "extremely": 0.06312295502724649,
                    "feel": 0.046068957287469084,
                    "feelings": 0.0793176301414676,
                    "fundamentally": 0.08202454731735603,
                    "garbage": 0.23448431477572468,
                    "gc": 0.08551437052097785,
                    "generally": 0.0512646489022834,
                    "good": 0.030816124773033745,
                    "graduate": 0.08364439435343125,
                    "guess": 0.05718432721686926,
                    "happens": 0.05778597943155794,
                    "high": 0.053214962006420924,
                    "idea": 0.04392264039846556,
                    "idiomatic": 0.08551437052097785,
                    "importantly": 0.06975298550506315,
                    "inside": 0.0625007246344441,
                    "java": 0.3381604124223967,
                    "kind": 0.04756643816540711,
                    "know": 0.03136244597462274,
                    "language": 0.29433838779659316,
                    "languages": 0.04128147315637902,
                    "leave": 0.057993349149391346,
                    "level": 0.045836410234835416,
                    "like": 0.052229181805411126,
                    "longer": 0.056799189056820784,
                    "machines": 0.12755767092812886,
                    "make": 0.03243279245301974,
                    "new": 0.034906719947205914,
                    "non": 0.04560823736834267,
                    "note": 0.05379272991906621,
                    "object": 0.05090957478014833,
                    "operate": 0.07613493304068357,
                    "order": 0.05293607999803965,
                    "oriented": 0.05718432721686926,
                    "outside": 0.05863761557566295,
                    "paper": 0.06599054783806592,
                    "personally": 0.054714502273734755,
                    "phd": 0.0793176301414676,
                    "platform": 0.05409227188093235,
                    "point": 0.08277483994066616,
                    "poor": 0.065592779970381,
                    "problem": 0.0390258879204906,
                    "problems": 0.08947237077176619,
                    "professors": 0.08551437052097785,
                    "program": 0.136375416283913,
                    "programming": 0.03352304194892218,
                    "question": 0.03577935302422099,
                    "replaced": 0.0771059177674661,
                    "respect": 0.0752359415999195,
                    "run": 0.04560823736834267,
                    "saying": 0.05979380745855567,
                    "science": 0.122143836576352,
                    "settings": 0.07613493304068357,
                    "share": 0.058204325477356565,
                    "single": 0.1443291017220025,
                    "solution": 0.05001058333938426,
                    "somebody": 0.06726865866768626,
                    "students": 0.267309955385631,
                    "suite": 0.0793176301414676,
                    "tailored": 0.08772608289497935,
                    "talk": 0.056243481221338765,
                    "taught": 0.065592779970381,
                    "teach": 0.13041528362066507,
                    "teaching": 0.06921374859280269,
                    "things": 0.06944208061087047,
                    "think": 0.031063471922360374,
                    "tool": 0.05266346553466426,
                    "total": 0.06869746501395435,
                    "true": 0.0560637618884794,
                    "trying": 0.0459909452302584,
                    "understand": 0.0861976417965196,
                    "understanding": 0.054875177908665744,
                    "used": 0.1101589756152805,
                    "using": 0.1027180675860163,
                    "versa": 0.0781614382585749,
                    "vice": 0.0781614382585749,
                    "waste": 0.06682748884640775,
                    "way": 0.1933861655049207,
                    "work": 0.08999546922152007,
                    "world": 0.09531061826993532,
                    "worse": 0.06726865866768626,
                    "worth": 0.052135954899865035,
                    "wrong": 0.0493775266780462
                },
                "Max term": "java",
                "Max score": 0.3381604124223967
            }
        ],
        "Best answer": "This isn't a Java problem, it's a teaching problem. Not knowing how to program is not a languages fault, it's the students fault. Same goes for all your issues, GC, basic machine knowledge, how things work \"under the hood\" so to speak. Your major gripe about garbage collection throws me slightly. Unless you're doing C or C++ garbage collection is typically very good and not an issue. Would you rather they all learn assembly? Higher level languages that are strict are very useful for teaching. It gives you the flexibility of libraries, packages, and other niceties when you need it, without any of the confusing language \"sugar\" present in most other higher level languages (PHP, Ruby, Python, Perl). ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "assembly": 0.12842645861090288,
                    "basic": 0.1033767678805993,
                    "collection": 0.2749325326842347,
                    "confusing": 0.14147253599980308,
                    "fault": 0.3048590488830153,
                    "flexibility": 0.14147253599980308,
                    "garbage": 0.3004152000550023,
                    "gc": 0.1643381781349116,
                    "gives": 0.11685324324210589,
                    "goes": 0.10545697415999823,
                    "good": 0.05922122529260913,
                    "higher": 0.2327037570269555,
                    "hood": 0.1548857479266911,
                    "issue": 0.09761294450105797,
                    "issues": 0.0992213450503382,
                    "java": 0.08123293452942838,
                    "knowing": 0.11226742243923839,
                    "knowledge": 0.0915821122693688,
                    "language": 0.07070600255689355,
                    "languages": 0.2379993695064509,
                    "learn": 0.07843828814879673,
                    "level": 0.17617324677352095,
                    "libraries": 0.10514819399878836,
                    "machine": 0.11144935389327144,
                    "major": 0.10989460713372824,
                    "need": 0.06363472339330387,
                    "packages": 0.15020760002750114,
                    "perl": 0.1351330645743469,
                    "php": 0.09695620920347714,
                    "present": 0.1301541052582907,
                    "problem": 0.14999685507542557,
                    "program": 0.08736031662651181,
                    "python": 0.0985184004980829,
                    "ruby": 0.11144935389327144,
                    "slightly": 0.13106844053988323,
                    "speak": 0.13627048826984314,
                    "strict": 0.14458549478256738,
                    "students": 0.12842645861090288,
                    "sugar": 0.16858856061317215,
                    "teaching": 0.2660245588275408,
                    "things": 0.06672553948513604,
                    "throws": 0.15020760002750114,
                    "typically": 0.11635187851347775,
                    "unless": 0.10424565955842496,
                    "useful": 0.09317827204055187,
                    "work": 0.05764992621379742
                },
                "Max term": "fault",
                "Max score": 0.3048590488830153
            }
        ]
    },
    {
        "ID": "16867",
        "Question": "I'm in the throes of getting myself enrolled in school to get a CS degree. The school I am looking at actually offers both Java- and C++-based for the introductory software development courses (object-oriented programming, design patterns, that sort of thing). It is student's choice which track to follow, but there is only time to follow one. Knowing what you know now, if you had the choice, would you lay down your CS curriculum foundation in Java or C++? My current debate currently looks like this: A good friend (who has a PhD in AI) is touting Java as the better choice regardless of what I do, if only to open up more job opportunities later, though he might be biased since all of his work has been in Java (he loves it). I live in the Boston, MA, USA area and I see an equal amount of Java and C work.  On the flip side, although I haven't entirely yet settled on what I want to do with the degree when I'm done, my preference would be to develop for the Mac, which I am doing now albeit in a limited capacity. To that end, I'm getting some limited exposure to C++ already, but I've had none with Java, and looking at my projects at my day job I don't see a need to use it anytime soon, \"soon\" measured by at least two years. I probably should note that I'm an adult going back to school after 20 years (I currently have no degree of any kind) so I'm looking to maximize the opportunity and time spent as best I can. I'm kind of leaning towards C++ but I'm still ambivalent, and some outside, objective advice would help here. Or I could just be thinking too hard about it. UPDATE: It turns out the language selection wasn't so clear cut as I originally surmised. While a couple of core courses focused on Java, some of the other core courses work in primarily C and Java, but also a few others thrown in for good measure. In fact, my rest of my semester is going to be in Objective-C after spending time in Java and Javascript. Last semester was C, Javascript, and PHP, plus a few others thrown in as assignments required. Since things were pretty much split down the middle overall, and I am still getting answers to this, I am now trying to work my curriculum such that I meet all of the requirements for the degree but to absorb as many languages as I can reasonably handle. So far, my grades have not suffered trying to do this. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "20": 0.06224364257438908,
                    "absorb": 0.08962063288689434,
                    "actually": 0.0415548205874038,
                    "adult": 0.08962063288689434,
                    "advice": 0.06052330415129297,
                    "ai": 0.07987174270627721,
                    "albeit": 0.08289300978095426,
                    "answers": 0.05330950533856627,
                    "anytime": 0.08289300978095426,
                    "area": 0.06287651821052169,
                    "assignments": 0.07641326887563063,
                    "based": 0.0451985347672139,
                    "best": 0.03787776144765625,
                    "better": 0.036211697883354065,
                    "biased": 0.07860511325286525,
                    "capacity": 0.07545100658565279,
                    "choice": 0.16412149363416145,
                    "clear": 0.05330950533856627,
                    "core": 0.11851334939576201,
                    "couple": 0.054065846590261035,
                    "courses": 0.22119200448767,
                    "cs": 0.1342361753293953,
                    "current": 0.05080413428446137,
                    "currently": 0.10876445921514488,
                    "curriculum": 0.17387606434764077,
                    "cut": 0.06968564576969055,
                    "day": 0.04913947113495527,
                    "debate": 0.07456009085999911,
                    "degree": 0.24317387878480445,
                    "design": 0.041282204352281616,
                    "develop": 0.05391072365343393,
                    "development": 0.03635397008586997,
                    "end": 0.04339881108955537,
                    "entirely": 0.061352726848735405,
                    "equal": 0.07295479504498405,
                    "exposure": 0.07373066816255668,
                    "fact": 0.05080413428446137,
                    "far": 0.048435060248257715,
                    "flip": 0.08474618779658577,
                    "focused": 0.06968564576969055,
                    "follow": 0.10519588993120374,
                    "foundation": 0.08289300978095426,
                    "friend": 0.07545100658565279,
                    "getting": 0.13696534800261426,
                    "going": 0.0791525008975279,
                    "good": 0.061078601906749415,
                    "grades": 0.08289300978095426,
                    "handle": 0.05538463170380057,
                    "hard": 0.04679316817726982,
                    "help": 0.040910638239124886,
                    "java": 0.3770130253800479,
                    "javascript": 0.11334127126980101,
                    "job": 0.08506175465234773,
                    "kind": 0.09427828976631238,
                    "know": 0.031080714506033197,
                    "knowing": 0.05789425301808882,
                    "language": 0.036461790187994274,
                    "languages": 0.040910638239124886,
                    "later": 0.053457014683749804,
                    "lay": 0.08693803217382039,
                    "leaning": 0.07745930753811141,
                    "like": 0.025880001354027266,
                    "limited": 0.12270545369747081,
                    "live": 0.06389305535929345,
                    "looking": 0.13137258909624405,
                    "looks": 0.05573824133743757,
                    "loves": 0.08962063288689434,
                    "mac": 0.06711808766469765,
                    "maximize": 0.08289300978095426,
                    "measure": 0.06912638861715627,
                    "measured": 0.08474618779658577,
                    "meet": 0.0642519435268477,
                    "middle": 0.07456009085999911,
                    "need": 0.032815261068828205,
                    "note": 0.05330950533856627,
                    "object": 0.05045224982278735,
                    "objective": 0.1351791872376723,
                    "offers": 0.07545100658565279,
                    "open": 0.04557780473247879,
                    "opportunities": 0.07295479504498405,
                    "opportunity": 0.06711808766469765,
                    "oriented": 0.056670635634900504,
                    "originally": 0.06711808766469765,
                    "outside": 0.05811086898312716,
                    "overall": 0.061352726848735405,
                    "patterns": 0.05833145977405836,
                    "phd": 0.07860511325286525,
                    "php": 0.049998540853103214,
                    "plus": 0.06580530897686557,
                    "preference": 0.07987174270627721,
                    "pretty": 0.045655116000871424,
                    "primarily": 0.06859199571506426,
                    "probably": 0.041947177208655095,
                    "programming": 0.03322190166644865,
                    "projects": 0.04080655221400013,
                    "reasonably": 0.06912638861715627,
                    "regardless": 0.06666437869501352,
                    "required": 0.05504112659759465,
                    "requirements": 0.05045224982278735,
                    "rest": 0.05726688315755205,
                    "school": 0.18492727277856427,
                    "selection": 0.07373066816255668,
                    "semester": 0.15974348541255443,
                    "settled": 0.08962063288689434,
                    "software": 0.035033791052588206,
                    "soon": 0.11711234799049788,
                    "sort": 0.05128993212948866,
                    "spending": 0.06859199571506426,
                    "spent": 0.0587851687437425,
                    "split": 0.0722259742802486,
                    "student": 0.06666437869501352,
                    "suffered": 0.08962063288689434,
                    "thing": 0.03971740894885621,
                    "things": 0.03440913830378262,
                    "thinking": 0.04705171278284542,
                    "thrown": 0.15974348541255443,
                    "time": 0.08444080702305007,
                    "track": 0.05855617399524894,
                    "trying": 0.09115560946495758,
                    "turns": 0.06666437869501352,
                    "update": 0.05232470909484294,
                    "usa": 0.08474618779658577,
                    "use": 0.027861112742021577,
                    "want": 0.033671369372796016,
                    "work": 0.11891604321822288,
                    "years": 0.087317506684296
                },
                "Max term": "java",
                "Max score": 0.3770130253800479
            }
        ],
        "Best answer": "I'd personally go with C++ as it will give you insights into how parts of Java work under the hood (Pointers for example).  Moving to Java from C++ is fairly trivial, whereas moving the other way around is arguably more difficult. The truly difficult thing about the Java eco-system is it's vast number of frameworks, libraries etc - they're unlikely to cover all of that at University anyhow. At the end of the day it's not going to matter that much what language you choose, as long as you learn the principles. My JUG is going to kill me for endorsing C++ ;-) ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "arguably": 0.20067690698124668,
                    "choose": 0.1414254083606573,
                    "cover": 0.16332074184266723,
                    "day": 0.12346240039259938,
                    "difficult": 0.26500194307795955,
                    "eco": 0.22517089023062353,
                    "end": 0.10903905287433949,
                    "example": 0.09406535264538421,
                    "fairly": 0.14439877086009095,
                    "frameworks": 0.14337478134500484,
                    "going": 0.19886981956007707,
                    "hood": 0.20067690698124668,
                    "insights": 0.20423451976313198,
                    "java": 0.31574707675669733,
                    "kill": 0.20067690698124668,
                    "language": 0.09160986138531825,
                    "learn": 0.10162815665941423,
                    "libraries": 0.13623470609011842,
                    "long": 0.10358595614621498,
                    "matter": 0.1291784167359689,
                    "moving": 0.32106124876318476,
                    "number": 0.11821692966127474,
                    "parts": 0.1476971133990016,
                    "personally": 0.13623470609011842,
                    "pointers": 0.1781074470251015,
                    "principles": 0.15797658556967822,
                    "thing": 0.09978956901536784,
                    "trivial": 0.15717107655760995,
                    "truly": 0.18329814929564042,
                    "university": 0.15206416018780797,
                    "unlikely": 0.1895698543339847,
                    "vast": 0.1873314380161812,
                    "way": 0.0802526640549831,
                    "work": 0.07469382454580445
                },
                "Max term": "moving",
                "Max score": 0.32106124876318476
            }
        ]
    },
    {
        "ID": "17995",
        "Question": "The specific example I have in mind involves the currently-alpha game Minecraft, but this is a general question that I think warrants some conversation. Minecraft is written in Java, and stack traces usually look like this (real example): java.lang.NullPointerException     at d.a(SourceFile:247)     at gi.b(SourceFile:92)     at bd.a(SourceFile:33)     at bn.a(SourceFile:69)     at bn.e(SourceFile:115)     at bn.d(SourceFile:103)     at net.minecraft.client.Minecraft.i(SourceFile:1007)     at net.minecraft.client.Minecraft.run(SourceFile:596)     at java.lang.Thread.run(Unknown Source)  Obviously these are not the real package and method names that the developer uses when he writes.  Since he is in an alpha stage, it seems that the developer should like to be able to make sense of his stack traces, especially if someone is able to provide one for a bug report.  As this stands, it's mostly meaningless. What advantage could one possibly hope to gain by obfuscating his code like this that overcomes the drawbacks of more difficult bug identification? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "33": 0.14656528934036245,
                    "able": 0.15582489995379023,
                    "advantage": 0.10712160697929055,
                    "alpha": 0.28672057773266635,
                    "bug": 0.1769814575174897,
                    "client": 0.1769814575174897,
                    "code": 0.044862299326723386,
                    "conversation": 0.12491205909678323,
                    "currently": 0.0940519854006813,
                    "developer": 0.1400849979783898,
                    "difficult": 0.09120649846559017,
                    "drawbacks": 0.1359445358791974,
                    "especially": 0.09096613338048555,
                    "example": 0.12949899675554474,
                    "gain": 0.11310290514554516,
                    "game": 0.10610719368272754,
                    "general": 0.08198569135548577,
                    "hope": 0.10874253254151629,
                    "identification": 0.15499545562406125,
                    "involves": 0.12372365860671024,
                    "java": 0.21734320086288808,
                    "lang": 0.28672057773266635,
                    "like": 0.1342754164595517,
                    "look": 0.07196306486110234,
                    "make": 0.05558740105356511,
                    "meaningless": 0.15035600032915078,
                    "method": 0.08913714398317954,
                    "mind": 0.08807068723442668,
                    "names": 0.10166670017687525,
                    "net": 0.15456852956564143,
                    "obfuscating": 0.15499545562406125,
                    "obviously": 0.09939629966418433,
                    "package": 0.12051865813268096,
                    "possibly": 0.10012589551647293,
                    "provide": 0.08980430330718388,
                    "question": 0.06132315769218571,
                    "real": 0.15712041584271919,
                    "report": 0.1177423604404556,
                    "run": 0.15633827309891157,
                    "sense": 0.08957952978508504,
                    "source": 0.07039490315952426,
                    "specific": 0.07895877632391995,
                    "stack": 0.18922789588444022,
                    "stage": 0.12372365860671024,
                    "stands": 0.1359445358791974,
                    "think": 0.05324048721261536,
                    "thread": 0.13048962907678208,
                    "traces": 0.30071200065830156,
                    "unknown": 0.12751436959549858,
                    "uses": 0.09245186158935925,
                    "usually": 0.08092699402025602,
                    "writes": 0.13813512305666364,
                    "written": 0.08343123193951622
                },
                "Max term": "traces",
                "Max score": 0.30071200065830156
            }
        ],
        "Best answer": "We obfuscate our Java code too.... The advantage is that it makes it harder to reverse-engineer (if you are worried about someone stealing your code base and using it as a base to create a similar competing product, for example, etc). You can get the original stack trace back: there are obfuscation tools out there which create special reference files which you can use to run the obfuscated stack traces through, and it comes out with the original source stack trace. These are generated by the obfuscation process itself, so you can't get the original stack trace back unless you have your hands on the reference file that you used to obfuscate the code in the first place. This has no disadvantages really. :) ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "advantage": 0.11205904476612033,
                    "base": 0.20233470411186677,
                    "code": 0.1407902630569092,
                    "comes": 0.09566476365190935,
                    "competing": 0.14706377363648795,
                    "create": 0.16662260684980373,
                    "disadvantages": 0.13650414326828095,
                    "engineer": 0.1206075877853887,
                    "example": 0.06773392541339827,
                    "file": 0.08909025718548257,
                    "files": 0.09515893478572808,
                    "generated": 0.1240949860558502,
                    "hands": 0.12506179681914875,
                    "harder": 0.11152198881500276,
                    "java": 0.07578698690176415,
                    "makes": 0.08020857726278935,
                    "obfuscate": 0.3066415223312743,
                    "obfuscated": 0.15332076116563714,
                    "original": 0.31539835228489005,
                    "place": 0.09256943407579633,
                    "process": 0.08020857726278935,
                    "product": 0.09065847937919229,
                    "really": 0.06107334243804152,
                    "reference": 0.21355009551812323,
                    "reverse": 0.13824504501945487,
                    "run": 0.08177210012932214,
                    "similar": 0.085283005195827,
                    "source": 0.07363953759566796,
                    "special": 0.11317465652661914,
                    "stack": 0.395899536122767,
                    "stealing": 0.16213948978267023,
                    "tools": 0.08496778720125688,
                    "trace": 0.4001752453243553,
                    "traces": 0.15728619320466714,
                    "unless": 0.09725691286774828,
                    "use": 0.05040565391308937,
                    "used": 0.06583555445190117,
                    "using": 0.06138856043261165,
                    "worried": 0.14706377363648795
                },
                "Max term": "trace",
                "Max score": 0.4001752453243553
            }
        ]
    },
    {
        "ID": "18868",
        "Question": "Since I'm learning Java in this period and I just finished with the tutorials I think I'm ready to start contributing to a project (since I know from experience this is the best way to really learn).  I've seen GWT, looks interesting so I thought I should give it a try. I'm thinking however, since GWT deploys Java applications in JavaScript why should I learn GWT when I could learn the actual thing instead (this being JavaScript).  My question: is it worth it? Wouldn't someone be better of learning JavaScript if they want to build JS applications, instead of using Java and GWT? I realize that it might be easier to build certain things with GWT but in the end is it worth it?  Thanks.  ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "actual": 0.0975743454209526,
                    "applications": 0.16756403128841268,
                    "best": 0.06430736177268077,
                    "better": 0.06147878510206837,
                    "build": 0.16157960748884975,
                    "certain": 0.08750324213513891,
                    "contributing": 0.13150734156764404,
                    "deploys": 0.14759994448280064,
                    "easier": 0.08256572671678218,
                    "end": 0.07368078098007444,
                    "experience": 0.06867302819349029,
                    "finished": 0.1147509325470954,
                    "gwt": 0.6672632254310965,
                    "instead": 0.15609015483528133,
                    "interesting": 0.08793751891596767,
                    "java": 0.21335925610450598,
                    "javascript": 0.2886394756483283,
                    "js": 0.11830952679363421,
                    "know": 0.05276760493502074,
                    "learn": 0.20601908458047086,
                    "learning": 0.15149299847083933,
                    "looks": 0.09463017647473403,
                    "period": 0.11395042843038143,
                    "project": 0.058941839037123585,
                    "question": 0.06019909182913925,
                    "ready": 0.11558411919870538,
                    "realize": 0.10730847956523025,
                    "really": 0.05731222664601,
                    "seen": 0.08526705143141666,
                    "start": 0.0700872899715719,
                    "thanks": 0.09402983205712573,
                    "thing": 0.06743064236985541,
                    "things": 0.058418470907933624,
                    "think": 0.052264578331535534,
                    "thinking": 0.07988253266054438,
                    "thought": 0.08750324213513891,
                    "try": 0.07180505224071405,
                    "tutorials": 0.1214557789618116,
                    "using": 0.05760803238426695,
                    "want": 0.05716591606476627,
                    "way": 0.05422900151303723,
                    "worth": 0.17543845102465608
                },
                "Max term": "gwt",
                "Max score": 0.6672632254310965
            }
        ],
        "Best answer": "GWT is essentially a compiler to native code, much like Visual Studio compiles source to byte codes or machine language. This allows the programmer to abstract the differences in underlying architecture away, much like Visual Studio users not needing to worry about the differences in word length, the number of registers and exact conventions for calling the operating system when they code for 32-bit or 64-bit.    This is a good thing, as it allows you to move some of the maintainance burden over to others.  As this is Google you know they have more development resources than you have, so you are essentially bringing in extra manpower for free. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "32": 0.16446006077544936,
                    "64": 0.16185200503721223,
                    "abstract": 0.14348635888170058,
                    "allows": 0.24208342266535102,
                    "architecture": 0.11709028498849722,
                    "away": 0.10801899490960325,
                    "bit": 0.19305148680104203,
                    "bringing": 0.15352309413545304,
                    "burden": 0.18453353128295424,
                    "byte": 0.1553575358218655,
                    "calling": 0.1346573575388648,
                    "code": 0.10682375793407468,
                    "codes": 0.15021770679376423,
                    "compiler": 0.12057019926872815,
                    "compiles": 0.15733888378460678,
                    "conventions": 0.15021770679376423,
                    "development": 0.07485470990332059,
                    "differences": 0.26311822958866593,
                    "essentially": 0.2602884725725187,
                    "exact": 0.1391704787914702,
                    "extra": 0.12574598129502682,
                    "free": 0.09952986574683988,
                    "good": 0.06288200458204124,
                    "google": 0.10718918642976931,
                    "gwt": 0.16185200503721223,
                    "know": 0.06399680316734704,
                    "language": 0.07507671708567777,
                    "length": 0.1391704787914702,
                    "like": 0.1065765301053719,
                    "machine": 0.11833863192724006,
                    "native": 0.14348635888170058,
                    "needing": 0.15949273164338826,
                    "number": 0.09688191695418706,
                    "operating": 0.14871702703892797,
                    "programmer": 0.08423712596219748,
                    "registers": 0.18453353128295424,
                    "resources": 0.117915482564917,
                    "source": 0.08381032858057565,
                    "studio": 0.24924124457022467,
                    "thing": 0.08178020496676752,
                    "underlying": 0.14233481939879325,
                    "users": 0.09761001752978844,
                    "visual": 0.23667726385448012,
                    "word": 0.12462062228511234,
                    "worry": 0.12517690715419824
                },
                "Max term": "differences",
                "Max score": 0.26311822958866593
            }
        ]
    },
    {
        "ID": "19225",
        "Question": "Java's checked exceptions have gotten some bad press over the years. A telling sign is that it's literally the only language in the world that has them (not even other JVM languages like Groovy and Scala). Prominent Java libraries like Spring and Hibernate also don't use them.  I personally have found one use for them (in business logic between layers), but otherwise I'm pretty anti-checked exceptions. Are there any other uses that I don't realize? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "anti": 0.20360888400205499,
                    "bad": 0.11599102468139615,
                    "business": 0.12061769833729011,
                    "checked": 0.35243369844052225,
                    "exceptions": 0.3334236186205623,
                    "gotten": 0.1923395524776638,
                    "groovy": 0.20721847505629026,
                    "hibernate": 0.20037999477646562,
                    "java": 0.21357351938639738,
                    "jvm": 0.18597621509691237,
                    "language": 0.09294832136310875,
                    "languages": 0.1042893157635506,
                    "layers": 0.18597621509691237,
                    "libraries": 0.1382251544865058,
                    "like": 0.1319464935939362,
                    "literally": 0.19006843192245934,
                    "logic": 0.14546954935090325,
                    "personally": 0.1382251544865058,
                    "press": 0.20721847505629026,
                    "pretty": 0.11638392882081472,
                    "prominent": 0.22846073501566813,
                    "realize": 0.1611243640832992,
                    "scala": 0.18411830668628687,
                    "sign": 0.16473395513753447,
                    "spring": 0.18411830668628687,
                    "telling": 0.18070967440526156,
                    "use": 0.1420469838330601,
                    "uses": 0.13627251306968605,
                    "world": 0.12039152680815318,
                    "years": 0.11129480519293992
                },
                "Max term": "checked",
                "Max score": 0.35243369844052225
            }
        ],
        "Best answer": "First of all, like any other programming paradigm you need to do it right for it to work well.   For me the advantage of checked exceptions is that the authors of the Java runtime library ALREADY have decided for me what common problems I might reasonably be expected to be able to handle at the calling point (as opposed to a top-level catch-print-die block) and consider as early as possible how to handle these problems. I like checked exceptions because they make my code more robust by forcing me to think about error recovery as early as possible. To be more precise, to me this makes my code more robust as it forces me to consider strange corner cases very early in the process as opposed to saying \"Oops, my code does not handle if the file doesn't exist yet\" based on an error in production, which you then have to rework your code to handle.  Adding error handling to existing code can be a non-trivial task - and hence expensive - when reaching maintenance as opposed to just doing it right from the start. It might be that the missing file is a fatal thing and should cause the program to crash in flames, but then you make that decision with } catch (FileNotFoundException e) {   throw new RuntimeException(\"Important file not present\", e); }  This also shows a very important side effect.  If you wrap an exception, you can add an explanation which goes in the stack-trace!  This is so extremely powerful because you can add information about e.g. the name of the file that was missing, or the parameters passed to this method or other diagnostic information, and that information is present right in the stack trace which frequently is the single thing you get when a program has crashed. People may say \"we can just run this in the debugger to reproduce\", but I have found that very frequently production errors cannot be reproduced later, and we cannot run debuggers in production except for very nasty cases where essentially your job is at stake. The more information in your stack trace, the better.  Checked exceptions help me get that information in there, and early.  EDIT:  This goes for library designers as well.  One library I use on a daily basis contains many, many checked exceptions which could have been designed much better making it less tedious to use. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "able": 0.04283083266953095,
                    "add": 0.09247280474013429,
                    "adding": 0.05633754158300561,
                    "advantage": 0.05888799062514209,
                    "authors": 0.0708870729023221,
                    "based": 0.042971941050041665,
                    "basis": 0.062176091319978345,
                    "better": 0.06885563679352558,
                    "block": 0.06041420552316894,
                    "calling": 0.062176091319978345,
                    "cases": 0.0982446728844519,
                    "catch": 0.13602928211390217,
                    "cause": 0.05656845112631559,
                    "checked": 0.26288419409679153,
                    "code": 0.12331082106923326,
                    "common": 0.04507001677888397,
                    "consider": 0.09266250929188997,
                    "contains": 0.06074552244994931,
                    "corner": 0.07728327634131194,
                    "crash": 0.07009850965699503,
                    "daily": 0.062176091319978345,
                    "debugger": 0.07173409987433615,
                    "debuggers": 0.08265524563619213,
                    "decided": 0.06143843966727858,
                    "decision": 0.05588926320030279,
                    "designed": 0.06108673088201746,
                    "designers": 0.06936085800429526,
                    "diagnostic": 0.08520569467832861,
                    "die": 0.07728327634131194,
                    "early": 0.22444481923107557,
                    "edit": 0.04586467420385244,
                    "effect": 0.062176091319978345,
                    "error": 0.15041692086355823,
                    "errors": 0.05567154931015757,
                    "essentially": 0.06009222271993441,
                    "exception": 0.05567154931015757,
                    "exceptions": 0.24870436527991338,
                    "exist": 0.05729056282604817,
                    "existing": 0.05096557228812541,
                    "expected": 0.06074552244994931,
                    "expensive": 0.06256357363568475,
                    "explanation": 0.06625275526014168,
                    "extremely": 0.05947425418852216,
                    "file": 0.18727078178758003,
                    "forces": 0.07173409987433615,
                    "forcing": 0.07880949123933878,
                    "frequently": 0.12082841104633787,
                    "goes": 0.10340644788165036,
                    "handle": 0.21062498073547103,
                    "handling": 0.06256357363568475,
                    "help": 0.038895277109878335,
                    "important": 0.08497100049818329,
                    "information": 0.2361116325173641,
                    "java": 0.039826712636124216,
                    "job": 0.04043569913670356,
                    "later": 0.050823587435573574,
                    "level": 0.04318692482345429,
                    "library": 0.14885806602234378,
                    "like": 0.049210174546054655,
                    "maintenance": 0.05806139195820276,
                    "make": 0.06111615470352675,
                    "makes": 0.04215029635283097,
                    "making": 0.04550465597900566,
                    "method": 0.049001386809368996,
                    "missing": 0.12149104489989862,
                    "nasty": 0.08520569467832861,
                    "need": 0.031198698618307787,
                    "new": 0.032889004232003576,
                    "non": 0.042971941050041665,
                    "oops": 0.08520569467832861,
                    "opposed": 0.19563894348919456,
                    "paradigm": 0.06739667252553884,
                    "parameters": 0.06381168153731948,
                    "passed": 0.06801464105695108,
                    "people": 0.03161155194031782,
                    "point": 0.03899509987230839,
                    "possible": 0.08252175259163715,
                    "powerful": 0.06041420552316894,
                    "precise": 0.07728327634131194,
                    "present": 0.12762336307463895,
                    "print": 0.06625275526014168,
                    "problems": 0.08430059270566194,
                    "process": 0.04215029635283097,
                    "production": 0.17041236607529445,
                    "program": 0.0856616653390619,
                    "programming": 0.03158530707540704,
                    "reaching": 0.08520569467832861,
                    "reasonably": 0.06572104852419788,
                    "recovery": 0.0805713770361482,
                    "reproduce": 0.07473282729917545,
                    "rework": 0.08265524563619213,
                    "right": 0.12147811472691675,
                    "robust": 0.1434681997486723,
                    "run": 0.08594388210008333,
                    "runtime": 0.062176091319978345,
                    "say": 0.03710502992470341,
                    "saying": 0.05633754158300561,
                    "shows": 0.06425995992002229,
                    "single": 0.04532881199298679,
                    "stack": 0.15603645529252422,
                    "stake": 0.08520569467832861,
                    "start": 0.03924853894000177,
                    "strange": 0.07009850965699503,
                    "task": 0.04852999490282035,
                    "tedious": 0.0805713770361482,
                    "thing": 0.07552165860246764,
                    "think": 0.029267907757028075,
                    "throw": 0.06041420552316894,
                    "trace": 0.21029552897098505,
                    "trivial": 0.05947425418852216,
                    "use": 0.05297720824380235,
                    "work": 0.028264484819010154,
                    "wrap": 0.07473282729917545
                },
                "Max term": "checked",
                "Max score": 0.26288419409679153
            }
        ]
    },
    {
        "ID": "20023",
        "Question": "When I started using Java in the nineties, it was all \"Write once, run anywhere!\" from day one. That was probably all true then and I was a part of the choir as well.  I am not sure what to think about that anymore, considering all the other languages using multi platform runtimes (python, flash, perl, html, php...). But I am still seeing lots of arguments that says you should use Java because it is supposedly better for cross platform development.  So, Is that still true today? Is Java still the language of choice for multi platform development?  Please be specific with focus on cross platform aspects. I am not asking for general language feature comparisons.  Update: Great responses so far! Most answers seems to be favoring Java or web. Any input from the script crowd? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "answers": 0.10225015109586158,
                    "anymore": 0.14471859708172133,
                    "arguments": 0.11938624861678848,
                    "asking": 0.10225015109586158,
                    "aspects": 0.12786542945739124,
                    "better": 0.0694557482102914,
                    "choice": 0.1049309275184183,
                    "comparisons": 0.1589927109820985,
                    "considering": 0.12060013400192698,
                    "cross": 0.23997040859848856,
                    "crowd": 0.17189661010345703,
                    "day": 0.094251828382376,
                    "development": 0.1394572660394004,
                    "far": 0.09290073500529511,
                    "feature": 0.0974447309891382,
                    "flash": 0.1399307453547243,
                    "focus": 0.11320048421281732,
                    "general": 0.09092564916986198,
                    "great": 0.08801933955051156,
                    "html": 0.10832801405223282,
                    "input": 0.11608655820359802,
                    "java": 0.3213905793296942,
                    "language": 0.1398708741441226,
                    "languages": 0.07846853792418167,
                    "lots": 0.09984883321163009,
                    "multi": 0.25405369246673154,
                    "perl": 0.13366036251716565,
                    "php": 0.0958995647086585,
                    "platform": 0.411278102543993,
                    "probably": 0.08045666866330779,
                    "python": 0.0974447309891382,
                    "responses": 0.13853283267775018,
                    "run": 0.08669292614718282,
                    "runtimes": 0.1667512551334637,
                    "says": 0.11023476075674238,
                    "script": 0.1305813292641578,
                    "seeing": 0.12467989025394095,
                    "specific": 0.08756867053521492,
                    "started": 0.09526778553699414,
                    "supposedly": 0.15591367772909065,
                    "sure": 0.08203973606790237,
                    "think": 0.059045984511331126,
                    "today": 0.10796488060599155,
                    "true": 0.21313393585803483,
                    "update": 0.10036126535063032,
                    "use": 0.053438931190186834,
                    "using": 0.13016551922843195,
                    "web": 0.07897533848487198,
                    "write": 0.07241881224680566
                },
                "Max term": "platform",
                "Max score": 0.411278102543993
            }
        ],
        "Best answer": "While Java may not be the or the only viable cross-platform tool, it has some strengths:  It's extremely fast. It's extremely robust. It's extremely portable (e.g. bytecode compiled 10 years ago in Windows 95 runs fine in OS X today).  and some weaknesses:  Core GUI libraries (Swing...) are showing their age (3rd party additions help here). The language itself could be less verbose (e.g. checked exceptions...). Startup time could be snappier (although it's improving all the time).  When talking specifically about Java the platform, there's one point more:  There are quite a few languages that run on the JVM and interoperate with Java.  ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "10": 0.10602342554432458,
                    "3rd": 0.14823706720873472,
                    "95": 0.18014608343322983,
                    "additions": 0.17560431764694526,
                    "age": 0.14439705895143817,
                    "ago": 0.11370344205891764,
                    "checked": 0.14323821071043313,
                    "compiled": 0.14439705895143817,
                    "core": 0.12278697363148675,
                    "cross": 0.12962339987872815,
                    "exceptions": 0.13551202042011073,
                    "extremely": 0.3888701996361844,
                    "fast": 0.12041272605850711,
                    "fine": 0.11663750521061311,
                    "gui": 0.13635653332472888,
                    "help": 0.08477177439209817,
                    "improving": 0.1544974968147402,
                    "java": 0.26040547973195877,
                    "jvm": 0.1511711303604302,
                    "language": 0.0755532249016017,
                    "languages": 0.08477177439209817,
                    "libraries": 0.11235658730381962,
                    "os": 0.13097025463382617,
                    "party": 0.13313777284713113,
                    "platform": 0.2221576662671913,
                    "point": 0.08498933686560907,
                    "portable": 0.16287927085832127,
                    "quite": 0.0997629959383191,
                    "robust": 0.15634358160217474,
                    "run": 0.09365681292342562,
                    "runs": 0.13390431778552164,
                    "showing": 0.14689021245363668,
                    "specifically": 0.11996387166492312,
                    "startup": 0.14439705895143817,
                    "strengths": 0.15833750507203673,
                    "swing": 0.16550387978364325,
                    "talking": 0.11824520784520219,
                    "time": 0.11664768791277305,
                    "today": 0.11663750521061311,
                    "tool": 0.1081447699819002,
                    "verbose": 0.16050502328534166,
                    "viable": 0.1544974968147402,
                    "weaknesses": 0.1511711303604302,
                    "windows": 0.10502686286017252,
                    "years": 0.09046620018314337
                },
                "Max term": "extremely",
                "Max score": 0.3888701996361844
            }
        ]
    },
    {
        "ID": "20255",
        "Question": "You are just starting a new project and you have these two technologies to choose from, Java and .NET. The project you are working doesn't involve having features that would make it easy to choose between the two technologies (e.g. .NET has this that I need and Java does not) and both of them should work just fine for you (though you only need one of course). Take into account:   Performance  Tools available (even 3rd party tools) Cross platform compatibility Libraries (especially 3rd party libraries) Cost (Oracle seems to try and monetize Java) Development process (Easiest/Fastest)  Also keep in mind that Linux is not your main platform but you would like to port your project to Linux/MacOs as well. You should definitely keep in mind the trouble that has been revolving around Oracle and the Java community and the limitations of Mono and Java as well. It would be much appreciated if people with experience in both can give an overview and their own subjective view about which they would choose and why. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "3rd": 0.2435681149065219,
                    "account": 0.1054422742243739,
                    "appreciated": 0.12178405745326094,
                    "available": 0.08511497463399516,
                    "choose": 0.28747037910105133,
                    "community": 0.09614575620043861,
                    "compatibility": 0.12844395860501695,
                    "cost": 0.08954006807319886,
                    "course": 0.07908581490709263,
                    "cross": 0.10649201225689028,
                    "definitely": 0.09892498971100071,
                    "development": 0.061887150882960054,
                    "easiest": 0.12844395860501695,
                    "easy": 0.07908581490709263,
                    "especially": 0.08954006807319886,
                    "experience": 0.06885864207116099,
                    "fastest": 0.13186278806902388,
                    "features": 0.08054825153066973,
                    "fine": 0.09582345970035043,
                    "involve": 0.12419453495504819,
                    "java": 0.35655989537539207,
                    "libraries": 0.18461294925908284,
                    "like": 0.04405679888234325,
                    "limitations": 0.1255153419145036,
                    "linux": 0.1993661086595523,
                    "macos": 0.14111284658427248,
                    "main": 0.08862011972484575,
                    "make": 0.0547159639459423,
                    "mind": 0.1733800269873992,
                    "mono": 0.13186278806902388,
                    "need": 0.11172606503407134,
                    "net": 0.15214537702061787,
                    "new": 0.05888962021599199,
                    "oracle": 0.23535450088335003,
                    "overview": 0.1255153419145036,
                    "party": 0.21875848575421392,
                    "people": 0.056602269715175686,
                    "performance": 0.08977666498331119,
                    "platform": 0.18251347319405004,
                    "port": 0.13381334947907164,
                    "process": 0.07547248699595285,
                    "project": 0.17730345249248855,
                    "starting": 0.0945827522747989,
                    "subjective": 0.12419453495504819,
                    "technologies": 0.1949764622789179,
                    "tools": 0.15990135802089,
                    "trouble": 0.10876828990214779,
                    "try": 0.0719991315544323,
                    "view": 0.0978380756377669,
                    "work": 0.05060915693435635,
                    "working": 0.0647596210230653
                },
                "Max term": "java",
                "Max score": 0.35655989537539207
            }
        ],
        "Best answer": "The single most important (edit: technical) decision is:  Will you at this point in time commit 100% to use Windows as your future deployment platform?   If no, then you should go with Java.  The conclusion from Mono is frequently used to say \"Yes, .NET is cross-platform\". How valid is that claim? was that Mono is only an option IFF you develop against it!   You cannot expect .NET-applications to work out of the box.  @Basic said that this was more a comment than an answer.  To be precise I consider it a question to go on top of the list, because this is perhaps the most important technical decision you need to do when dealing with .NET.  As Basic says he will test against Mono, then that is out of the way, and I would consider Java and .NET to be pretty equally well suited.  I have very little experience with .NET, but quite a bit in Java.   Performance - Java runs pretty well, but still has quite a bit of startup time.  This is because a JVM starts from scratch when being initialized, and the random access of the runtime library jar file is rather slow when needing to be read in from disk.  Recent Java 6's have a background process to try to keep the runtime library jar files in the disk cache so access is fast when needed. Tools available.  Plenty of tools exist, and there is a lot available as high quality Open Source.  IBM has some very advanced tooling available, but they also take quite a bit of money for them.  You may want to have a look at MyEclipse who make a living from putting together the best parts in the Java world and make them accessible for a low cost, to see what is available.  Netbeans has a very nice GUI editor.  JDeveloper has a nice Swing debugger.  The Sun 6 JDK has VisualVM which is a nice entry level profiler which can analyze already running programs (which is a killer feature). Cross platform compatibility.  Very good, tending to excellent.  The JVM is very, very reliable and predictable.  Issues only show when operating system differences seep in - like file separators, file name case sensitivity and menu behaviour.  Libraries.  There are many and many of them are freely available and usable, but primarily written in Java as it is rather difficult to pull in code written in non-JVM languages. Cost.  Java is basically freely available.  What Oracle is indicating is that the power tools - most likely coming from JRocket - will be at a cost.  Also note that exended support (\"Java for Business\") also comes for a price.   Non-x86 platforms are a dying breed, but IBM has plenty and IBM provides an excellent Java implementation for them.  This is priced as  being a part of the operating system - most likely for better adoption. Development process.   Much time with Java is spent researching and choosing the appropriate technology and learning it, but when that is done I think there are plenty of technologies which are quite fast to develop with.  The latest version of Java EE provides for writing very powerful web pages using Facelets which can be reloaded at least as fast as PHP pages.  I think that unless you are not skilled in neither Java or .NET, you will save time and money by choosing the technology you and your organization are the most familiar with. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "100": 0.043368051245269296,
                    "access": 0.07788635762725639,
                    "accessible": 0.05672814950751438,
                    "adoption": 0.06371676971677097,
                    "advanced": 0.05012188720296532,
                    "analyze": 0.06232345020664035,
                    "answer": 0.03234411864927788,
                    "applications": 0.03710291189493721,
                    "appropriate": 0.045306034634281844,
                    "available": 0.22554965101380686,
                    "background": 0.04275502412912291,
                    "basic": 0.08016194152651301,
                    "basically": 0.04321085275310064,
                    "behaviour": 0.05430339570943422,
                    "best": 0.02847855067345378,
                    "better": 0.027225913932849604,
                    "bit": 0.1057379052901672,
                    "box": 0.048586223247511474,
                    "breed": 0.06738164129850775,
                    "business": 0.035574684127044884,
                    "cache": 0.05672814950751438,
                    "case": 0.033177541434136,
                    "choosing": 0.11345629901502877,
                    "claim": 0.05430339570943422,
                    "code": 0.019503122519872716,
                    "comes": 0.039756192633513786,
                    "coming": 0.04550469505911375,
                    "comment": 0.043368051245269296,
                    "commit": 0.048586223247511474,
                    "compatibility": 0.05672814950751438,
                    "conclusion": 0.060051898135034185,
                    "consider": 0.0732785758803727,
                    "cost": 0.1186379435140916,
                    "cross": 0.09406584565401216,
                    "dealing": 0.047521619434370006,
                    "debugger": 0.05672814950751438,
                    "decision": 0.08839574161370041,
                    "deployment": 0.04803825635910213,
                    "develop": 0.08106599845022684,
                    "development": 0.027332881873243127,
                    "differences": 0.04803825635910213,
                    "difficult": 0.03965047580883562,
                    "disk": 0.1075735175694042,
                    "dying": 0.06738164129850775,
                    "edit": 0.036270310771410616,
                    "editor": 0.049793171505976175,
                    "ee": 0.06536471692325149,
                    "entry": 0.05485136259784357,
                    "equally": 0.05823809883546436,
                    "excellent": 0.09717244649502295,
                    "exist": 0.045306034634281844,
                    "expect": 0.04352803215564408,
                    "experience": 0.03041188845875905,
                    "familiar": 0.04352803215564408,
                    "fast": 0.13107268727863175,
                    "feature": 0.03819729723575068,
                    "file": 0.11107191272608048,
                    "files": 0.03954598117136387,
                    "freely": 0.1246469004132807,
                    "frequently": 0.04777624713071992,
                    "future": 0.039863160573907305,
                    "good": 0.022961098979790744,
                    "gui": 0.04947599210343273,
                    "high": 0.03965047580883562,
                    "ibm": 0.17471429650639309,
                    "implementation": 0.04177311700877003,
                    "important": 0.06719604244715044,
                    "indicating": 0.06371676971677097,
                    "initialized": 0.06738164129850775,
                    "issues": 0.03846984106377669,
                    "jar": 0.13072943384650298,
                    "java": 0.4094404790196731,
                    "jdk": 0.06738164129850775,
                    "jvm": 0.16455408779353067,
                    "killer": 0.06536471692325149,
                    "languages": 0.03075883155836141,
                    "latest": 0.047521619434370006,
                    "learning": 0.03354437901585684,
                    "level": 0.03415271582756961,
                    "libraries": 0.040767783476673994,
                    "library": 0.07847911141756334,
                    "like": 0.019457985419973192,
                    "likely": 0.07518321700460229,
                    "list": 0.036270310771410616,
                    "little": 0.03415271582756961,
                    "living": 0.05543470599118262,
                    "look": 0.031284719953165493,
                    "lot": 0.028002720524449246,
                    "low": 0.0449213516657747,
                    "make": 0.048331356599156446,
                    "menu": 0.060051898135034185,
                    "money": 0.0799428191958432,
                    "mono": 0.17471429650639309,
                    "need": 0.02467228894988104,
                    "needed": 0.038943178813628195,
                    "needing": 0.05823809883546436,
                    "net": 0.20158812734145132,
                    "netbeans": 0.05329806217733817,
                    "nice": 0.1245333233411635,
                    "non": 0.06796540838416473,
                    "note": 0.04008097076325651,
                    "open": 0.034267859874781335,
                    "operating": 0.10860679141886843,
                    "option": 0.04305634154665749,
                    "oracle": 0.051972959485132274,
                    "organization": 0.04803825635910213,
                    "pages": 0.10024377440593064,
                    "parts": 0.044197870806850205,
                    "performance": 0.03965047580883562,
                    "php": 0.037591608502301144,
                    "platform": 0.12091247856576941,
                    "platforms": 0.048586223247511474,
                    "plenty": 0.15850331466776194,
                    "point": 0.030837772544605128,
                    "power": 0.04916956664085053,
                    "powerful": 0.04777624713071992,
                    "precise": 0.06111650194817566,
                    "predictable": 0.06371676971677097,
                    "pretty": 0.06865197333955325,
                    "price": 0.04947599210343273,
                    "priced": 0.06738164129850775,
                    "primarily": 0.05157117398461393,
                    "process": 0.06666587627023073,
                    "profiler": 0.06738164129850775,
                    "programs": 0.039863160573907305,
                    "provides": 0.10024377440593064,
                    "pull": 0.05672814950751438,
                    "putting": 0.0537867587847021,
                    "quality": 0.039863160573907305,
                    "question": 0.02665920106024857,
                    "quite": 0.14479315596868209,
                    "random": 0.052834438222587314,
                    "read": 0.03184310607670117,
                    "recent": 0.04947599210343273,
                    "reliable": 0.05430339570943422,
                    "researching": 0.06232345020664035,
                    "running": 0.04053299922511342,
                    "runs": 0.048586223247511474,
                    "runtime": 0.09833913328170106,
                    "said": 0.03710291189493721,
                    "save": 0.0461282999242394,
                    "say": 0.029343083536794004,
                    "says": 0.04321085275310064,
                    "scratch": 0.052393439274571484,
                    "sensitivity": 0.06738164129850775,
                    "single": 0.035846544784708806,
                    "skilled": 0.057451630366438876,
                    "slow": 0.04727396872445005,
                    "source": 0.03060298829304456,
                    "spent": 0.044197870806850205,
                    "starts": 0.051972959485132274,
                    "startup": 0.052393439274571484,
                    "suited": 0.05329806217733817,
                    "sun": 0.05543470599118262,
                    "support": 0.03591580708126186,
                    "swing": 0.060051898135034185,
                    "technical": 0.07312855534351359,
                    "technologies": 0.04305634154665749,
                    "technology": 0.08276579465234343,
                    "test": 0.032533417410433745,
                    "think": 0.04629079475232472,
                    "time": 0.08464955723554465,
                    "tools": 0.10593228645526961,
                    "try": 0.03179890703766816,
                    "unless": 0.040417855177901696,
                    "usable": 0.05823809883546436,
                    "use": 0.020947492162094655,
                    "used": 0.02735982283349037,
                    "using": 0.025511748954227417,
                    "valid": 0.04634611011358861,
                    "version": 0.035985604227098844,
                    "want": 0.025315957497986867,
                    "way": 0.024015343266902814,
                    "web": 0.03095749198319332,
                    "windows": 0.03810824542703326,
                    "work": 0.02235187900000839,
                    "world": 0.03550797765843795,
                    "writing": 0.03215870321482548,
                    "written": 0.07254062154282123,
                    "x86": 0.06738164129850775,
                    "yes": 0.03913967971498281
                },
                "Max term": "java",
                "Max score": 0.4094404790196731
            }
        ]
    },
    {
        "ID": "21256",
        "Question": "Java is often found in academia. What is the reason behind that?  ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "academia": 0.7741846010041826,
                    "java": 0.41868245678347943,
                    "reason": 0.4747032799020295
                },
                "Max term": "academia",
                "Max score": 0.7741846010041826
            }
        ],
        "Best answer": "A few Universities have somebody who's sufficiently well known that many (if not most) decisions revolve around that person's likes, dislikes, opinions, taste, etc. Just for example, Texas A&M has Bjarne Stroustrup on staff; it probably comes as little surprise to anybody that their curriculum tends to emphasize C++. Most universities are a bit different though. First, decisions are often made much more for the benefit of the faculty than the students. The single biggest criterion in many cases is \"which language requires the least effort on our part?\" Most of them are also careful in their laziness -- they want not only the language with the fewest advanced concepts to learn, but also one that is (for example) the slowest to innovate, update, or embrace anything new. Second, most decisions are made by committee. This means the final decision is rarely (if ever) what anybody actually wanted -- it's just what the fewest members of the committee (especially those with the most influence) found particularly objectionable. It's like picking a flavor of ice cream. One really likes strawberry, but another is allergic to strawberries. Another really loves chocolate, but somebody else can't stand it.  Yet another thinks rum raisin is great, but the other two worry that mentioning \"rum\" would be interpreted as encouraging alcohol abuse -- so they end up with vanilla, even though it's not what anybody really wanted. Finally, even though it usually runs directly contrary to most of what the previous two criteria would produce in isolation, they generally need (or at least want) to be seen as responsive to the needs of industry. Java is the intersection of these three:  Every concept it embodies was well known by 1980. There's not much to know beyond the very most basic notion of what OOP is. It's the tasteless, odorless, non-toxic, biodegradable, politically correct choice. Nearly the only other language in history to have existed as long and (probably) innovated less is SQL. Even though they're hardly what you'd call fast-moving targets, COBOL and Fortran have still both innovated more than Java. It is widely used. When you get down to it, profs and PHBs have similar criteria.  Note that I'm not really saying (for example) that there's nothing more to know about Java than the most basic notion of what OOP is -- only that that's all that's needed to do what passes for an acceptable job of teaching it. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "abuse": 0.10328062034239428,
                    "acceptable": 0.08592454871998666,
                    "actually": 0.04788861125205883,
                    "advanced": 0.07682537117374158,
                    "anybody": 0.23537149482039904,
                    "basic": 0.12286989288419653,
                    "benefit": 0.06914582039524673,
                    "biggest": 0.07789160746559014,
                    "bit": 0.054023995466332145,
                    "careful": 0.08496870531698338,
                    "cases": 0.05954279698762051,
                    "chocolate": 0.10328062034239428,
                    "choice": 0.06304563702962228,
                    "cobol": 0.09367759693476806,
                    "comes": 0.060937135969289055,
                    "committee": 0.1953264235107709,
                    "concept": 0.0669681345007622,
                    "concepts": 0.06748131295545531,
                    "contrary": 0.09552757212761287,
                    "correct": 0.06323673294549796,
                    "criteria": 0.1739025158516561,
                    "curriculum": 0.10018913731161842,
                    "decision": 0.0677452111105756,
                    "decisions": 0.21627208921356694,
                    "different": 0.04383959021436985,
                    "directly": 0.0688541415325068,
                    "effort": 0.06671850190473422,
                    "embrace": 0.09058611390399221,
                    "emphasize": 0.09367759693476806,
                    "encouraging": 0.09766321175538545,
                    "end": 0.05001366300446112,
                    "especially": 0.060614929952998296,
                    "example": 0.12943673088458693,
                    "existed": 0.10018913731161842,
                    "fast": 0.0669681345007622,
                    "final": 0.07447155011951563,
                    "finally": 0.07363164240769113,
                    "flavor": 0.10018913731161842,
                    "fortran": 0.08695125792582804,
                    "generally": 0.05854770643585556,
                    "great": 0.05288464958926988,
                    "hardly": 0.08169371981214853,
                    "history": 0.07323004228158458,
                    "industry": 0.06267117547095509,
                    "influence": 0.09367759693476806,
                    "innovate": 0.10328062034239428,
                    "interpreted": 0.08806018834775924,
                    "intersection": 0.09766321175538545,
                    "isolation": 0.09204580316837661,
                    "java": 0.14482579842060864,
                    "job": 0.04901343867429731,
                    "know": 0.07163608136798554,
                    "known": 0.1344446955322307,
                    "language": 0.1260579016719139,
                    "laziness": 0.10018913731161842,
                    "learn": 0.04661445826007055,
                    "like": 0.029824634218766063,
                    "likes": 0.16646933163063468,
                    "little": 0.05234828966873227,
                    "long": 0.04751245508948178,
                    "loves": 0.10328062034239428,
                    "means": 0.052793801826047246,
                    "members": 0.07037811970226533,
                    "mentioning": 0.09204580316837661,
                    "moving": 0.07363164240769113,
                    "nearly": 0.07904679580778377,
                    "need": 0.03781696703886828,
                    "needed": 0.05969097202839106,
                    "needs": 0.05494454143814593,
                    "new": 0.03986584197627472,
                    "non": 0.052087700777749935,
                    "note": 0.061434946442098265,
                    "notion": 0.18117222780798442,
                    "oop": 0.14982280804605222,
                    "opinions": 0.07447155011951563,
                    "particularly": 0.0707041167253516,
                    "passes": 0.09766321175538545,
                    "person": 0.05687026440988726,
                    "picking": 0.08695125792582804,
                    "politically": 0.10018913731161842,
                    "previous": 0.06828858405796392,
                    "probably": 0.09668154183177564,
                    "produce": 0.06974827332234833,
                    "rarely": 0.0707041167253516,
                    "really": 0.15561150961654455,
                    "requires": 0.0677452111105756,
                    "responsive": 0.09552757212761287,
                    "runs": 0.07447155011951563,
                    "saying": 0.06828858405796392,
                    "second": 0.0640286190000649,
                    "seen": 0.057878289547829094,
                    "similar": 0.0543240989168949,
                    "single": 0.05494454143814593,
                    "somebody": 0.15365074234748316,
                    "sql": 0.0648685267118894,
                    "staff": 0.08496870531698338,
                    "stand": 0.08030714013297782,
                    "stroustrup": 0.09766321175538545,
                    "students": 0.07632152531236043,
                    "sufficiently": 0.09367759693476806,
                    "surprise": 0.09204580316837661,
                    "taste": 0.09204580316837661,
                    "teaching": 0.07904679580778377,
                    "tends": 0.07789160746559014,
                    "thinks": 0.08169371981214853,
                    "universities": 0.1953264235107709,
                    "update": 0.06030004743852876,
                    "used": 0.04193634082290407,
                    "usually": 0.05392538840061168,
                    "want": 0.07760712694339418,
                    "wanted": 0.13657716811592785,
                    "widely": 0.08030714013297782,
                    "worry": 0.07005961753153807
                },
                "Max term": "anybody",
                "Max score": 0.23537149482039904
            }
        ]
    },
    {
        "ID": "21480",
        "Question": "As part of a research I'm working on, I'm looking for public APIs that only work correctly when you apply a certain sequence of actions on them. For example, the java.nio.channels.SocketChannel class, from the Java standard library, only works correctly with sequences such as open() -> connect() -> read() -> read() -> close(). A more complete demonstration if how it may be used may be represented in the following graph:  Additional examples of Java standard library APIs that require certain sequences are java.io.PrintStream (very similar to the one above) and java.util.Iterator (which requires a next() call between every two remove() calls, thus enforcing a certain sequence). So, does you favorite API for doing X also behave that way? I would very much like to know about additional APIs that require a certain method sequence for correct usage; especially classes that are not part of the Java standard library. The more complex the sequence(s) required, the better.  Some APIs require a sequence that spans across multiple classes, for example: X x = new X(); x.setup(); Y y = x.createNewY(); Z z = new Z(y); z.doSomething();  These examples are also interesting, but I'm mostly looking for sequences that all appear in the same class.  EDIT added bounty for greater visibility. I'm sure many of you have encountered many APIs that will match this description - I would really appreciate some good examples. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "actions": 0.09138279703320636,
                    "added": 0.06716743646767748,
                    "additional": 0.13994730269733502,
                    "api": 0.06803966490377755,
                    "apis": 0.3984624318277343,
                    "appear": 0.07711040348801937,
                    "apply": 0.06929776801329388,
                    "appreciate": 0.07711040348801937,
                    "behave": 0.0859029968936204,
                    "better": 0.04070881165742842,
                    "calls": 0.0683433821809795,
                    "certain": 0.23176469720927398,
                    "class": 0.10782335236264101,
                    "classes": 0.12263468660042563,
                    "close": 0.06803966490377755,
                    "complete": 0.060433705112436835,
                    "complex": 0.06187665829124653,
                    "connect": 0.0859029968936204,
                    "correct": 0.06168763632809152,
                    "correctly": 0.14529447321452685,
                    "description": 0.07598351354566403,
                    "dosomething": 0.09773482560889238,
                    "edit": 0.054232201482435675,
                    "encountered": 0.07653521668064894,
                    "enforcing": 0.09527077710659186,
                    "especially": 0.059130059078415856,
                    "example": 0.08417729812393693,
                    "examples": 0.18028744878567327,
                    "favorite": 0.07445189335653855,
                    "following": 0.05620783618850558,
                    "good": 0.03433196241350348,
                    "graph": 0.0897909769670059,
                    "greater": 0.07969248636554685,
                    "interesting": 0.05822873515194494,
                    "io": 0.08482123170122492,
                    "iterator": 0.10075057724617781,
                    "java": 0.2825560641026771,
                    "know": 0.03494061386130221,
                    "library": 0.17601565407241831,
                    "like": 0.0290940265824814,
                    "looking": 0.09845845954153458,
                    "match": 0.0811956841465997,
                    "method": 0.057941174302318495,
                    "multiple": 0.05852254781158566,
                    "new": 0.07777851407551824,
                    "open": 0.05123809092272459,
                    "public": 0.06460985921800179,
                    "read": 0.09522508673619873,
                    "really": 0.03794988200119422,
                    "remove": 0.06997365134866751,
                    "represented": 0.09318745378248147,
                    "require": 0.18340779957931985,
                    "required": 0.06187665829124653,
                    "requires": 0.066085671275282,
                    "research": 0.069631484969978,
                    "sequence": 0.3949963259147473,
                    "sequences": 0.28581233131977557,
                    "setup": 0.07143614171925312,
                    "similar": 0.05299333317432651,
                    "standard": 0.17054541101865164,
                    "sure": 0.04808443145557417,
                    "usage": 0.07264723660726342,
                    "used": 0.04090903532040199,
                    "util": 0.09318745378248147,
                    "visibility": 0.09138279703320636,
                    "way": 0.03590829267851557,
                    "work": 0.03342104271119079,
                    "working": 0.042765661221736785,
                    "works": 0.053192084551220147
                },
                "Max term": "apis",
                "Max score": 0.3984624318277343
            }
        ],
        "Best answer": "From the Spring framework The Lifecycle interface forces the following action sequence: start (isRunning)* stop  which is used in just about all the principal components that make up the framework. Fortunately, this lifecycle is managed by the container. From the Hibernate framework The Lifecycle interface supports the following action sequence: (onDelete, onSave, onUpdate)* onLoad  From the Servlet API My all-time favourite - the lifecycle of a servlet: init service destroy  with service delegating to the doGet, doPost operations etc.  ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "action": 0.24817524236938907,
                    "api": 0.10687289488783429,
                    "components": 0.11548025803626441,
                    "container": 0.1435389794423272,
                    "delegating": 0.15351639016670193,
                    "favourite": 0.13880200567569823,
                    "following": 0.17657624203005892,
                    "forces": 0.13323244011682892,
                    "fortunately": 0.1582533639333309,
                    "framework": 0.2535487179757079,
                    "hibernate": 0.13880200567569823,
                    "init": 0.15351639016670193,
                    "interface": 0.2044609594329198,
                    "lifecycle": 0.5641545505458826,
                    "make": 0.05675581373414309,
                    "managed": 0.10937323669369084,
                    "operations": 0.11548025803626441,
                    "principal": 0.1582533639333309,
                    "sequence": 0.24817524236938907,
                    "service": 0.2022453225273954,
                    "servlet": 0.3165067278666618,
                    "spring": 0.1275376330764904,
                    "start": 0.07289669241207868,
                    "stop": 0.10380367113482152,
                    "supports": 0.11771688999703685,
                    "time": 0.04970225171811244,
                    "used": 0.06425762146158491
                },
                "Max term": "lifecycle",
                "Max score": 0.5641545505458826
            }
        ]
    },
    {
        "ID": "21821",
        "Question": "I started learning Java a couple of months ago. I also wanted to become more exposed to linux so I installed ubuntu and started working with Java since then. In the meanwhile however I became more interested in C# and in learning the Windows platform. At this point I'm asking myself if I should stop learning Java and move to the .NET world. I don't hate or dislike Java by the way, I am just more curious about windows/.NET at this point in time.  My question is, should I remain with Java or go with C#/.NET? What is your advice?   ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "advice": 0.14130219514883186,
                    "ago": 0.12811054315198742,
                    "asking": 0.12446032536174516,
                    "couple": 0.12622613574907846,
                    "curious": 0.1526824362155009,
                    "dislike": 0.178400085422201,
                    "exposed": 0.178400085422201,
                    "hate": 0.15779967867724215,
                    "installed": 0.16701984435553194,
                    "interested": 0.12153740738103497,
                    "java": 0.4890014298618537,
                    "learning": 0.31248826414642705,
                    "linux": 0.13670958717591525,
                    "months": 0.1273415326378768,
                    "net": 0.31298797708989734,
                    "platform": 0.12515337607862545,
                    "point": 0.19151627973300162,
                    "question": 0.08278274639207207,
                    "remain": 0.18351732788394223,
                    "started": 0.23192258314241548,
                    "stop": 0.13724421530128672,
                    "time": 0.065713923806218,
                    "ubuntu": 0.19352816917039056,
                    "wanted": 0.1383450280754699,
                    "way": 0.07457298013881421,
                    "windows": 0.23666914919944118,
                    "working": 0.08881410301136246,
                    "world": 0.11026016506461737
                },
                "Max term": "java",
                "Max score": 0.4890014298618537
            }
        ],
        "Best answer": "If it will help your decision, Java is a relatively stable language; it's speed of evolution is much slower than that of C#.  Consequently, C# is getting all of the cool new features more rapidly than Java.  Whether this is a good thing or not depends on your own point of view. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "cool": 0.2584493059685208,
                    "decision": 0.2294071393694174,
                    "depends": 0.2182221084894206,
                    "evolution": 0.31169678342800755,
                    "features": 0.18464886137209813,
                    "getting": 0.17816755115555763,
                    "good": 0.11917859248811247,
                    "help": 0.1596523866270906,
                    "java": 0.3269512494232197,
                    "language": 0.14229090707859954,
                    "new": 0.13499860161927715,
                    "point": 0.160062126406464,
                    "rapidly": 0.3307191410749782,
                    "relatively": 0.2568029999796559,
                    "slower": 0.28470362835070484,
                    "speed": 0.24290371690806872,
                    "stable": 0.2637661106465591,
                    "thing": 0.15499584954567797,
                    "view": 0.22428406479403393
                },
                "Max term": "rapidly",
                "Max score": 0.3307191410749782
            }
        ]
    },
    {
        "ID": "21843",
        "Question": "Not talking about the recent Java/Oracle debacle here, but something I've been wondering recently. When I first started programming, Java was the big thing client-side, however these days you hardly ever see a Java applet whereas Flash and Javascript are ubiquitous. Where did Java go wrong? Did Sun decide to concentrate on the server-side and let client-side stagnate? How did Flash become dominant over Java? Flashy (no pun intended) graphics? Marketing? Never having been a Java developer, I've not followed this closely so I'm interested to hear your thoughts. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "big": 0.10277682771139582,
                    "client": 0.22558174205012782,
                    "closely": 0.16844414355905038,
                    "concentrate": 0.16435902865297858,
                    "days": 0.11417866404989825,
                    "decide": 0.12408244441598035,
                    "developer": 0.0892766347455664,
                    "dominant": 0.18681309193203297,
                    "flash": 0.32164068232389104,
                    "followed": 0.16082034116194552,
                    "graphics": 0.15921374074646366,
                    "hardly": 0.15626617346725832,
                    "hear": 0.1334165686553915,
                    "intended": 0.15921374074646366,
                    "interested": 0.11475479088609322,
                    "java": 0.55405417676093,
                    "javascript": 0.12492381002577593,
                    "let": 0.10655486165279335,
                    "marketing": 0.16082034116194552,
                    "oracle": 0.15238106547828117,
                    "programming": 0.07323380946725333,
                    "recent": 0.1450601325574469,
                    "recently": 0.12208896427221617,
                    "server": 0.10742381788530403,
                    "started": 0.10948986038031701,
                    "sun": 0.16253066300425179,
                    "talking": 0.12579276625828661,
                    "thing": 0.08755239807452139,
                    "thoughts": 0.13062443167936574,
                    "ubiquitous": 0.18681309193203297,
                    "wondering": 0.12286845548844931,
                    "wrong": 0.10786921981048074
                },
                "Max term": "java",
                "Max score": 0.55405417676093
            }
        ],
        "Best answer": " Firewalls would sometimes block java applets, so developers couldn't be sure if they were going to work or not. They required a browser plug-in, which led many developers to favour javascript over java applets, so that they didn't require the user to download and install a plug-in.  The Macromedia Flash plug-in had a simpler, more seamless, and less noisy means for downloading, installing and updating. The API wasn't so standardized then, so applets could fail to work if the user didn't have the right version of java installed. They had a slow loading time and used too much memory.  They would often crash the browser. Java applets died before Swing came out, so GUIs were difficult and ugly. IE wasn't so good at supporting applets fully, so compatibility was difficult to sort out. Flash and javascript are much easier to use for non-programmers.  ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "api": 0.08339617414550515,
                    "applets": 0.6174495933485942,
                    "block": 0.08755923362537106,
                    "browser": 0.17327742217245326,
                    "came": 0.08576666010514623,
                    "compatibility": 0.1039653299321123,
                    "crash": 0.10159484397247122,
                    "developers": 0.11303239131911476,
                    "difficult": 0.14533436522144208,
                    "download": 0.09682934926092525,
                    "downloading": 0.1197935137994373,
                    "easier": 0.06701112630811296,
                    "fail": 0.08198552286009843,
                    "favour": 0.11677333111200879,
                    "flash": 0.2010515082624136,
                    "fully": 0.08853393493120586,
                    "going": 0.054532843517611146,
                    "good": 0.04208066456885962,
                    "guis": 0.12348991866971884,
                    "install": 0.09011276170321521,
                    "installed": 0.09857466128504272,
                    "installing": 0.11200783640046283,
                    "java": 0.23088585911467943,
                    "javascript": 0.15617502265013625,
                    "led": 0.11421980303416465,
                    "loading": 0.10273772076490863,
                    "means": 0.0631241589385354,
                    "memory": 0.08132282876550147,
                    "non": 0.062279892504641346,
                    "plug": 0.3158737465282583,
                    "programmers": 0.057565922385643446,
                    "require": 0.07493427456367763,
                    "required": 0.07584218084695789,
                    "right": 0.058686697582875647,
                    "seamless": 0.12348991866971884,
                    "simpler": 0.09248324766285629,
                    "slow": 0.08663871108622663,
                    "sort": 0.07067334098431897,
                    "standardized": 0.11677333111200879,
                    "supporting": 0.11005674355429874,
                    "sure": 0.058937057156700244,
                    "swing": 0.11005674355429874,
                    "time": 0.03878418044217566,
                    "ugly": 0.09682934926092525,
                    "updating": 0.11421980303416465,
                    "use": 0.03839033976586928,
                    "used": 0.0501421786619565,
                    "user": 0.1192475871065329,
                    "version": 0.065950595053011,
                    "work": 0.08192830173424587
                },
                "Max term": "applets",
                "Max score": 0.6174495933485942
            }
        ]
    },
    {
        "ID": "22642",
        "Question": "I have seen several times on this site posts that decry Java's implementation of generics. Now, I can honestly say that I have not had any issues with using them. However, I have not attempted to make a generic class myself. So, what are your issues with Java's generic support? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "attempted": 0.30245875373399334,
                    "class": 0.17115487964655832,
                    "generic": 0.48960903326772576,
                    "generics": 0.27271860450335095,
                    "honestly": 0.2395441455939003,
                    "implementation": 0.1982938709262796,
                    "issues": 0.365226932759339,
                    "java": 0.2990128333996235,
                    "make": 0.11471267256825786,
                    "posts": 0.2661046207050411,
                    "say": 0.13928942908910766,
                    "seen": 0.17924656593045413,
                    "site": 0.18626724439280268,
                    "support": 0.17048965754912898,
                    "times": 0.17804911242169466,
                    "using": 0.12110236957350222
                },
                "Max term": "generic",
                "Max score": 0.48960903326772576
            }
        ],
        "Best answer": "Java's generic implementation uses type erasure. This means that your strongly typed generic collections are actually of type Object at runtime. This has some performance considerations as it means primitive types must be boxed when added to a generic collection. Of course the benefits of compile time type correctness outweigh the general silliness of type erasure and obsessive focus on backwards compatibility. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "actually": 0.09301045431215708,
                    "added": 0.13373022975137316,
                    "backwards": 0.18194296351409278,
                    "benefits": 0.13373022975137316,
                    "collection": 0.15866757868973144,
                    "collections": 0.17593860812200726,
                    "compatibility": 0.16887890024890048,
                    "compile": 0.14549479592694728,
                    "considerations": 0.18968392395305209,
                    "correctness": 0.16887890024890048,
                    "course": 0.10398251184292155,
                    "focus": 0.13209894006026268,
                    "general": 0.10610539312755063,
                    "generic": 0.4605799707557524,
                    "implementation": 0.12435797962130334,
                    "java": 0.09376142507259543,
                    "means": 0.20507487539620545,
                    "object": 0.11292520604722156,
                    "obsessive": 0.18968392395305209,
                    "outweigh": 0.17877365299145176,
                    "performance": 0.11803890673456223,
                    "primitive": 0.2005941949146524,
                    "runtime": 0.14637710575984728,
                    "strongly": 0.15022766884834085,
                    "time": 0.0630001342217302,
                    "type": 0.4427676867781491,
                    "typed": 0.16012242159089213,
                    "types": 0.12396515455642419,
                    "uses": 0.11965064826713186
                },
                "Max term": "generic",
                "Max score": 0.4605799707557524
            }
        ]
    },
    {
        "ID": "22762",
        "Question": "I'm an experienced Java developer who is just starting up a project for an NGO. I will be working on the project for at least 6 months, following which the NGO will have to pay or find a volunteer to maintain the project. Seeing as they already have people working on their website in PHP, I figured PHP was the obvious choice to make sure the skills are still available (it is webby) - eliminated Java because Java devs are typically expensive. Unfortunately I have next to zero experience with proper PHP development (just a few months spending a small percentage of my time on a Drupal project without any real coding). What are some things I can do to ensure that the code I leave behind is maintainable by a relatively low-skilled PHP developer (eg a teenager wanting to make some holiday cash)? Do I go with a CMS? Are Drupal developers cheap? Any other CMS / Framework I should look at?  Background: the project is a website that people will search for educational information, with some simple user-management to only allow some users to create content, restrictions to specific content-types etc.  The CMS vs write myself question is not the only thing I'm interested in hearing. I'm also interested in any tips about code style, anything you think my Java experience would push me towards that is going to make it difficult for the hypothetical volunteer etc. There's probably things about this scenario that I haven't thought through - so anything related to keeping maintenance costs low would be appreciated. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "allow": 0.07673800985395667,
                    "appreciated": 0.09849157118797053,
                    "available": 0.06883583745387824,
                    "background": 0.0782908209716216,
                    "cash": 0.11969253800545072,
                    "cheap": 0.09849157118797053,
                    "choice": 0.0753184677374284,
                    "cms": 0.3156074916923863,
                    "code": 0.07142624777755117,
                    "coding": 0.06132710974097178,
                    "content": 0.18119582992000888,
                    "costs": 0.08845930831670148,
                    "create": 0.06339870746628772,
                    "developer": 0.11151619428434027,
                    "developers": 0.056468557289592054,
                    "development": 0.050050580135655685,
                    "devs": 0.10044101942798662,
                    "difficult": 0.07260593032561678,
                    "drupal": 0.22382684654724067,
                    "educational": 0.10996397503360422,
                    "eliminated": 0.11969253800545072,
                    "ensure": 0.09117871771538168,
                    "expensive": 0.09059791496000444,
                    "experience": 0.11137740011760688,
                    "experienced": 0.08191641600277673,
                    "figured": 0.10822013415981703,
                    "following": 0.06883583745387824,
                    "framework": 0.06589500428279188,
                    "going": 0.05448687694565004,
                    "hearing": 0.09674773031418332,
                    "hypothetical": 0.10996397503360422,
                    "information": 0.06838235209657186,
                    "interested": 0.14334117310742306,
                    "java": 0.23069124187535706,
                    "keeping": 0.08845930831670148,
                    "leave": 0.07912551111437074,
                    "look": 0.0572869846033424,
                    "low": 0.16451537907905606,
                    "maintain": 0.07912551111437074,
                    "maintainable": 0.10044101942798662,
                    "maintenance": 0.08407833417125048,
                    "make": 0.13275287514956838,
                    "management": 0.06602380789108553,
                    "months": 0.1501865562787935,
                    "obvious": 0.07970631386974798,
                    "pay": 0.0782908209716216,
                    "people": 0.09155297653295029,
                    "percentage": 0.09943761039167619,
                    "php": 0.27534334981551295,
                    "probably": 0.05775106678547788,
                    "project": 0.23898715998108516,
                    "proper": 0.08949409400721475,
                    "push": 0.08569436606912528,
                    "question": 0.04881697016825429,
                    "real": 0.06253871246746906,
                    "related": 0.07443552880128775,
                    "relatively": 0.09059791496000444,
                    "restrictions": 0.1066426382051601,
                    "scenario": 0.09240529211195019,
                    "search": 0.08260614830762082,
                    "seeing": 0.08949409400721475,
                    "simple": 0.06212491141105334,
                    "skilled": 0.10520249723079543,
                    "skills": 0.06930209871311978,
                    "small": 0.06253871246746906,
                    "specific": 0.06285599720214405,
                    "spending": 0.09443450522989065,
                    "starting": 0.07649280270040879,
                    "style": 0.07625117534143207,
                    "sure": 0.058887378205370766,
                    "thing": 0.054681217888441394,
                    "things": 0.0947460390160641,
                    "think": 0.04238267195971153,
                    "thought": 0.07095859806424733,
                    "time": 0.03875148866037499,
                    "tips": 0.09003680427135842,
                    "types": 0.07625117534143207,
                    "typically": 0.08260614830762082,
                    "unfortunately": 0.09003680427135842,
                    "user": 0.05957353574127328,
                    "users": 0.06526560600832297,
                    "vs": 0.07856440042572473,
                    "wanting": 0.09674773031418332,
                    "website": 0.1565816419432432,
                    "working": 0.10474732009232202,
                    "write": 0.051981566376953114,
                    "zero": 0.09759669486931803
                },
                "Max term": "cms",
                "Max score": 0.3156074916923863
            }
        ],
        "Best answer": "Definitely go with a well-known CMS like Drupal, Wordpress or Joomla.  They all have very large communities and therefore plenty of developers and developer resources. Trying to build your own will lead to a good deal of pain :-) ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "build": 0.19024075803628795,
                    "cms": 0.3054866118101377,
                    "communities": 0.31424921446107656,
                    "deal": 0.21491319839276044,
                    "definitely": 0.23231688339222134,
                    "developer": 0.16191015066471237,
                    "developers": 0.16397318214186368,
                    "drupal": 0.32497377335948235,
                    "good": 0.12209067499102659,
                    "known": 0.23319876600645384,
                    "large": 0.19097453189231953,
                    "lead": 0.22976435858785696,
                    "like": 0.10346362671843383,
                    "pain": 0.283400911806192,
                    "plenty": 0.28093569175608196,
                    "resources": 0.22894277868417182,
                    "trying": 0.1822119292413807,
                    "wordpress": 0.31424921446107656
                },
                "Max term": "drupal",
                "Max score": 0.32497377335948235
            }
        ]
    },
    {
        "ID": "23364",
        "Question": "To me it seems these are two different platforms that address similar enterprise(but not only) problems. I'm interested however in problems that Java can solve better than C#/.NET or C#/.NET can solve better than Java. Leaving aside the 'cost' factor, since that is somehow not an issue for big enterprise companies (the developers probably cost more than the licenses from Microsoft - it's just a thought) and even for small projects there are free/open-source tools for .NET so the cost can be zero for the .NET world as well. With Mono, you can port .NET to Linux and MacOS as well so the benefit that Java had(cross platform) isn't THE decision factor to use Java nowadays.. What real world problems can you think of where .NET would be a much better solution than Java, and vice-versa? I'm only interested in solutions to problems. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "address": 0.10791680732874018,
                    "aside": 0.10791680732874018,
                    "benefit": 0.09839731736672205,
                    "better": 0.1781551162489781,
                    "big": 0.07646034040122923,
                    "companies": 0.08791124811769892,
                    "cost": 0.2587725389179187,
                    "cross": 0.1025879958145875,
                    "decision": 0.09640419333546772,
                    "developers": 0.06726320820786065,
                    "different": 0.0623855215961387,
                    "enterprise": 0.2041517709612391,
                    "factor": 0.21721727517716707,
                    "free": 0.07927099108620483,
                    "interested": 0.17074258019445934,
                    "issue": 0.0825500370246127,
                    "java": 0.3434883450805837,
                    "leaving": 0.10860863758858354,
                    "licenses": 0.11164773972134719,
                    "linux": 0.09602865551736918,
                    "macos": 0.13593962408983598,
                    "microsoft": 0.08971650809739115,
                    "mono": 0.12702867439383556,
                    "net": 0.4397030998911401,
                    "nowadays": 0.1209139267641032,
                    "open": 0.0747448989793671,
                    "platform": 0.08791124811769892,
                    "platforms": 0.10597604757619536,
                    "port": 0.1289077278695776,
                    "probably": 0.06879088497863281,
                    "problems": 0.29082260785456643,
                    "projects": 0.06692032757686149,
                    "real": 0.07449374731105851,
                    "similar": 0.077305404306901,
                    "small": 0.07449374731105851,
                    "solution": 0.08127765108733108,
                    "solutions": 0.09757573435034549,
                    "solve": 0.182230662917564,
                    "source": 0.0667510978738927,
                    "think": 0.05048463472887372,
                    "thought": 0.08452319635609105,
                    "tools": 0.07701967264841757,
                    "use": 0.04569057394445296,
                    "versa": 0.12702867439383556,
                    "vice": 0.12702867439383556,
                    "world": 0.1548996764163116,
                    "zero": 0.11625348906521372
                },
                "Max term": "net",
                "Max score": 0.4397030998911401
            }
        ],
        "Best answer": "There are some language features in C# (4/5) such as LINQ, using predicate and some functional aspects that many would argue place it ahead of Java 6 in terms of productivity/flexibility (YMMV on that).  Others would argue that C# is becoming a big cesspit of every brand new idea that happens to be popular and it's getting harder to wield effectively (YMMV on that). Some will also argue that the Java eco-system is far more flexible and that the JVM is probably the most capable and flexible runtime around (if you look at the various languages that run on the JVM adn their interoperability with Java).  Again YMMV. What it really boils down to is the quality of the developer(s) who are designing and writing the code.  .NET and the Java eco-system are so close in capabilities that its usually the developer that makes a difference. From a systems integration flexibility aspect, yes Java still has an edge there.  Cross platform is still an issue - many enterprises will see using Mono as risky (again YMMV here) and there are some systems that Mono won't run on that have JVMs (Some older big IBM machines for example).  Java has also been around a bit longer and has that established 'trust' in enterprises, it's not easy for .NET to gain that trust at say a mega-bank. Meh - I conclude with no real conclusion, which I think mirrors the fact that Java and .NET are neck and neck these days. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "ahead": 0.08288087835921236,
                    "argue": 0.2748530179025921,
                    "aspect": 0.08103829809620694,
                    "aspects": 0.0799289876419582,
                    "bank": 0.09424564135708273,
                    "big": 0.11180173506409853,
                    "bit": 0.05620647450218322,
                    "boils": 0.10745298461795853,
                    "brand": 0.09746201513031695,
                    "capabilities": 0.09046394327843703,
                    "capable": 0.08747104564267537,
                    "close": 0.07256598687720198,
                    "code": 0.031101479330935426,
                    "conclusion": 0.09576429962571936,
                    "cross": 0.07500303993307207,
                    "days": 0.06210238743661876,
                    "designing": 0.07748007615503379,
                    "developer": 0.09711608041908255,
                    "difference": 0.0659929877655587,
                    "easy": 0.055700670950862056,
                    "eco": 0.21490596923591707,
                    "edge": 0.08288087835921236,
                    "effectively": 0.07889898369937944,
                    "enterprises": 0.20847322168944862,
                    "established": 0.08747104564267537,
                    "example": 0.04488858608914745,
                    "fact": 0.060912935826803696,
                    "far": 0.058072473002888265,
                    "features": 0.0567306748934408,
                    "flexibility": 0.17494209128535074,
                    "flexible": 0.18092788655687406,
                    "functional": 0.06520298611244577,
                    "gain": 0.07841032937332157,
                    "getting": 0.05473938667186254,
                    "happens": 0.06866161638038071,
                    "harder": 0.07390778498664943,
                    "ibm": 0.09287184784685394,
                    "idea": 0.05218912122143374,
                    "integration": 0.07104732860856536,
                    "issue": 0.06035310149370521,
                    "java": 0.3515785429014566,
                    "jvm": 0.17494209128535074,
                    "language": 0.04371681000242878,
                    "languages": 0.04905087187866085,
                    "linq": 0.08747104564267537,
                    "longer": 0.0674891066673922,
                    "look": 0.049889502053121995,
                    "machines": 0.0757823606504362,
                    "makes": 0.053155779818964376,
                    "mono": 0.18574369569370788,
                    "neck": 0.20321728424367788,
                    "net": 0.16073551733789357,
                    "new": 0.0414763552974154,
                    "older": 0.0794047872507006,
                    "place": 0.061347559371084256,
                    "platform": 0.06427273289415798,
                    "popular": 0.07390778498664943,
                    "probably": 0.05029365718781404,
                    "productivity": 0.07841032937332157,
                    "quality": 0.06356947526693943,
                    "real": 0.05446307299378026,
                    "really": 0.04047448856758154,
                    "risky": 0.09576429962571936,
                    "run": 0.10838391349512376,
                    "runtime": 0.07841032937332157,
                    "say": 0.04679318940829104,
                    "systems": 0.12299079153171256,
                    "terms": 0.06374209915214264,
                    "think": 0.036909787002953144,
                    "trust": 0.16325340629311155,
                    "using": 0.08136677929264179,
                    "usually": 0.05610388387597516,
                    "various": 0.06445404248142184,
                    "writing": 0.05128323643183005,
                    "yes": 0.0624157459111791,
                    "ymmv": 0.38305719850287745
                },
                "Max term": "ymmv",
                "Max score": 0.38305719850287745
            }
        ]
    },
    {
        "ID": "24047",
        "Question": "I am about to start my first professional career position as a software developer, and I'm likely going to be writing a lot of Java code.  I don't know that much about what specifically I'll be writing, and besides, I have fairly broad interests when it comes to code anyway. For reasons not worth discussing, my last internship had me coding only for the Java 1.3 and 1.4 SDK's.  Also, my university education has focused mainly on algorithms, data structures, and other theory, not language features or libraries. So, with the above in mind, what features, classes, etc. in the current version of Java (what number are we on now, anyway?) would be worth my time to read up on and why?  What have I missed since 1.4.2 that makes your life as a programmer easier? Examples and stories of how you discovered a particular package or some such and put it to use would also be great. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "algorithms": 0.13874281559373938,
                    "broad": 0.170491829378069,
                    "career": 0.13488331972316145,
                    "classes": 0.12612442360131845,
                    "code": 0.11996538910214853,
                    "coding": 0.10300317896438826,
                    "comes": 0.12227188527477341,
                    "current": 0.11747743523807694,
                    "data": 0.09807145029296739,
                    "developer": 0.0936496319964628,
                    "discovered": 0.17240975303912795,
                    "discussing": 0.170491829378069,
                    "easier": 0.11245501313089053,
                    "education": 0.16869773161011467,
                    "examples": 0.12361184909417704,
                    "fairly": 0.13289684148472436,
                    "features": 0.21882295099865987,
                    "focused": 0.16113828241014352,
                    "going": 0.09151452858202902,
                    "great": 0.10611437023615078,
                    "interests": 0.1817633000070534,
                    "java": 0.2905965816679769,
                    "know": 0.07186979321587281,
                    "language": 0.08431277603296453,
                    "libraries": 0.1253830765465359,
                    "life": 0.12930490174151818,
                    "likely": 0.11561461341277632,
                    "lot": 0.08612357483298523,
                    "mainly": 0.16542349666253095,
                    "makes": 0.10251688900642403,
                    "mind": 0.11775404316245165,
                    "missed": 0.1586093700435613,
                    "number": 0.10880048679380666,
                    "package": 0.16113828241014352,
                    "particular": 0.11110964412635643,
                    "position": 0.13488331972316145,
                    "professional": 0.13195441675729874,
                    "programmer": 0.09460011319895956,
                    "read": 0.09793484624885025,
                    "reasons": 0.12293379433190667,
                    "software": 0.08101072830963574,
                    "specifically": 0.1338723404183577,
                    "start": 0.09545930772337809,
                    "stories": 0.1521655477951095,
                    "structures": 0.15122312306768387,
                    "theory": 0.15415202603354658,
                    "time": 0.06508584113094742,
                    "university": 0.13995165243869945,
                    "use": 0.06442491568668803,
                    "version": 0.11067527799153692,
                    "worth": 0.23894821856670853,
                    "writing": 0.19781095772002733
                },
                "Max term": "java",
                "Max score": 0.2905965816679769
            }
        ],
        "Best answer": "The changes that I consider most important are:   Generics (e.g. typed collections, like Set)  Enhanced for loop (for (String s : set) {...})  Autoboxing/unboxing (automatically convert between types like Integer to int and vice versa)  Typesafe enums (enum is now a keyword, types can be created out of enums)  Varargs (for printf() function, allows variable number of arguments)  Static import (can now import static methods of a class, such as java.lang.Math)  Annotations  java.util.concurrent (Demonstrates java's concurrency)    Also read What Java are you aiming for?, to get a better understanding of each of the three versions. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "aiming": 0.17133657293369056,
                    "allows": 0.11585320141297763,
                    "annotations": 0.1766234146212112,
                    "arguments": 0.12266912580081162,
                    "automatically": 0.12888520653688124,
                    "better": 0.07136563895349343,
                    "changes": 0.09584372614097808,
                    "class": 0.09451126331347236,
                    "collections": 0.1549141426721428,
                    "concurrency": 0.14377855409811566,
                    "concurrent": 0.14869806193607316,
                    "consider": 0.09604034601378571,
                    "convert": 0.14234220168720516,
                    "created": 0.11678244046152661,
                    "demonstrates": 0.16701690874749742,
                    "enhanced": 0.1766234146212112,
                    "function": 0.10132718770130635,
                    "generics": 0.15059447848594965,
                    "import": 0.2875571081962313,
                    "important": 0.08806845779749803,
                    "int": 0.1252329825067867,
                    "integer": 0.15059447848594965,
                    "java": 0.3302281616498163,
                    "keyword": 0.1549141426721428,
                    "lang": 0.16336468471740287,
                    "like": 0.1020080769864393,
                    "loop": 0.13320487072307438,
                    "math": 0.13518039438716983,
                    "methods": 0.10182599683451227,
                    "number": 0.09272902799036052,
                    "printf": 0.15741040287378363,
                    "read": 0.08346840502884806,
                    "set": 0.18377157486881768,
                    "static": 0.234522188580998,
                    "string": 0.1154019009355496,
                    "typed": 0.14098797261223586,
                    "types": 0.21830291650381659,
                    "understanding": 0.10717593458781284,
                    "util": 0.16336468471740287,
                    "variable": 0.11927870066316747,
                    "versa": 0.1526560006426424,
                    "versions": 0.12206928214904725,
                    "vice": 0.1526560006426424
                },
                "Max term": "java",
                "Max score": 0.3302281616498163
            }
        ]
    },
    {
        "ID": "24079",
        "Question": "What apsects of Java are the most diificult to learn when coming from such a background?  What common mistakes do people make ? What are the top timesaving and produtivtity increasing tricks ? If you had a room of C/PHP coders who were about to start development using Java what advise would you give ? This is my list of topics so far (in no particular order):  Use jodatime instead of the standard library , and also less importantly the guava library. Arrays are zero indexed I'd also highlight the pass-by-value/reference aspects of Java, and the fact that  String s1 = new String(\"test\");  String s2 = new String(\"test\");  if(s1 == s2) // will be false  if(s1.equals(s2)) // will be true   Introduce the concept of design patterns and give a quick overview. Introduce Spring (it will be used) and the concept of dependency injection  Is there anything obvious I am missing. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "advise": 0.14771605514782074,
                    "arrays": 0.14325445966652778,
                    "aspects": 0.12329014875662533,
                    "background": 0.10516909037417109,
                    "coders": 0.1395402763496852,
                    "coming": 0.11193274906518468,
                    "common": 0.08767214765958779,
                    "concept": 0.21494230716778334,
                    "dependency": 0.1299624996472627,
                    "design": 0.07634795696333271,
                    "development": 0.0672336031253836,
                    "equals": 0.16078456184757553,
                    "fact": 0.09395796369810512,
                    "false": 0.12887772752600923,
                    "far": 0.08957656097514155,
                    "highlight": 0.15330363391720467,
                    "importantly": 0.12784342856637135,
                    "increasing": 0.1395402763496852,
                    "injection": 0.13492374352958594,
                    "instead": 0.08501658737695322,
                    "introduce": 0.25371022788386516,
                    "java": 0.23241793639620975,
                    "learn": 0.07480736383422674,
                    "library": 0.19304343593005655,
                    "list": 0.08921794968230337,
                    "make": 0.05944289488332523,
                    "missing": 0.1181648198628125,
                    "mistakes": 0.12784342856637135,
                    "new": 0.12795422950700866,
                    "obvious": 0.10707054061673543,
                    "order": 0.09702136636605851,
                    "overview": 0.1363586554563801,
                    "particular": 0.08886503087317886,
                    "pass": 0.12248157171689185,
                    "patterns": 0.10787911765646892,
                    "people": 0.06149215925650028,
                    "php": 0.09246808655631251,
                    "quick": 0.11569189380916597,
                    "reference": 0.10914994457177349,
                    "room": 0.1259088682385469,
                    "spring": 0.13357585096296892,
                    "standard": 0.09352200035457876,
                    "start": 0.07634795696333271,
                    "string": 0.4331788306628642,
                    "test": 0.1600518294872368,
                    "topics": 0.12329014875662533,
                    "tricks": 0.1363586554563801,
                    "true": 0.10275378876265606,
                    "use": 0.051526779394493745,
                    "used": 0.06729987267710814,
                    "using": 0.06275396835860349,
                    "value": 0.09462836880404134,
                    "zero": 0.13110292490932238
                },
                "Max term": "string",
                "Max score": 0.4331788306628642
            }
        ],
        "Best answer": "The automatic garbage collecting doesn't mean that you should give up memory usage optimization. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "automatic": 0.4401720399256133,
                    "garbage": 0.46734997184561544,
                    "mean": 0.3009971867254497,
                    "memory": 0.3560882058493282,
                    "optimization": 0.46734997184561544,
                    "usage": 0.3898954553952898
                },
                "Max term": "garbage",
                "Max score": 0.46734997184561544
            }
        ]
    }
]
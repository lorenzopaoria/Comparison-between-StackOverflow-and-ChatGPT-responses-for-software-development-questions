[
    {
        "ID": "262",
        "Question": "Will Java have the same importance it had in the past, or it will be less relevant than nowadays? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "java": 0.3999116517482759,
                    "nowadays": 0.5988488578919821,
                    "past": 0.48792029032277434,
                    "relevant": 0.4933401529257213
                },
                "Max term": "nowadays",
                "Max score": 0.5988488578919821
            }
        ],
        "Best answer": "Java is relevant and will continue to be relevant for many years in the Enterprise computing world.   Whether it continues to be relevant in other areas depends a lot on what Oracle does.  If they inject some life (and resources) into ME, desktop applications and other areas, and if they press on with the evolution of the Java language, then Java will do well.   But if Oracle cuts back on R&D and/or tries to stomp other players in the Java space, there's a good chance that someone / some company will develop a better (and more open) Java-like language.  If Oracle win their lawsuit against Google, I predict that the next generation of the Android platform will have a new language, just like happened with C#.  If Google get the openness right ... then, the game is on! ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "applications": 0.1056737339185394,
                    "areas": 0.25309014308102706,
                    "better": 0.075545652198811,
                    "chance": 0.11745376488450039,
                    "company": 0.08932683003710547,
                    "computing": 0.1456756639192924,
                    "continue": 0.12885761282815178,
                    "depends": 0.11598281035177588,
                    "desktop": 0.12885761282815178,
                    "develop": 0.11203956173701117,
                    "enterprise": 0.13141400861972205,
                    "game": 0.11598281035177588,
                    "generation": 0.1456756639192924,
                    "good": 0.06606986878637687,
                    "google": 0.2172969463163121,
                    "happened": 0.12443388675211123,
                    "java": 0.4591521103350772,
                    "language": 0.21336577836831133,
                    "life": 0.11745376488450039,
                    "like": 0.10771732805692368,
                    "lot": 0.07751023038463427,
                    "new": 0.07157545930708899,
                    "open": 0.09403769933312199,
                    "oracle": 0.41253519221679896,
                    "platform": 0.12069367964779239,
                    "predict": 0.15108986706678162,
                    "relevant": 0.3398523218895202,
                    "resources": 0.12249178500967998,
                    "right": 0.08662812698183633,
                    "space": 0.12249178500967998,
                    "win": 0.137511730738933,
                    "world": 0.09346677137042739,
                    "years": 0.08885568282739877
                },
                "Max term": "java",
                "Max score": 0.4591521103350772
            }
        ]
    },
    {
        "ID": "368",
        "Question": "For a long time in SO and in other places Java has the reputation of being slow. From jokes to many comments in questions and answers, people still believe Java is slow based solely on experience with it in the 90s. This is my issue: we have disproved (most) of the reasons that people believe Java is slow. Outside of small things, Java is pretty fast. So why is it that people still refuse to believe Java is fast now? Is it part of their mindset that anything thats not C/C++ is slow? Is it because people don't check over time? Is it because people are just biased? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "answers": 0.10897498173920536,
                    "based": 0.09859180641917185,
                    "believe": 0.3299618556356082,
                    "biased": 0.148885809393297,
                    "check": 0.1044537733256269,
                    "comments": 0.11450849362544785,
                    "experience": 0.08853708611935092,
                    "fast": 0.23707727331176448,
                    "issue": 0.10529446371553332,
                    "java": 0.46927010142031705,
                    "long": 0.08566468974384119,
                    "outside": 0.11853863665588224,
                    "people": 0.34532077042556875,
                    "places": 0.1343098806798976,
                    "pretty": 0.0967075085446741,
                    "questions": 0.09925312538333318,
                    "reasons": 0.10897498173920536,
                    "reputation": 0.1343098806798976,
                    "slow": 0.5173346019272028,
                    "small": 0.09228731041938883,
                    "thats": 0.15441932127953947,
                    "things": 0.0733877678955516,
                    "time": 0.1217248552957265
                },
                "Max term": "slow",
                "Max score": 0.5173346019272028
            }
        ],
        "Best answer": "It's the applications. As you note, we have proved, time and time again, that in contrived scenarios Java code can meet or even beat the performance of so-called \"performant\" languages like C, C++, Lisp, VB6, or JavaScript. And when presented with such evidence, most sane, open-minded opponents will hang their heads in shame and promise never again to spread such slander. ...but then, they fire up Eclipse, or NetBeans, or Guiffy, or enable the Java support in their browser, or try to run an app on their favorite feature phone. And they wait for it to become responsive... ...and wait...   ...and wait...     ...and wait...         ...and wait...             ...and...      ...what did I promise never to do again? Sorry, must have dozed off... ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "app": 0.09668487166483242,
                    "applications": 0.10376704744827775,
                    "beat": 0.1483637307351939,
                    "browser": 0.13503058668563114,
                    "called": 0.11687219423324528,
                    "code": 0.051931612574534124,
                    "eclipse": 0.1430472168384368,
                    "evidence": 0.13503058668563114,
                    "favorite": 0.1290428866488525,
                    "feature": 0.09291510051271404,
                    "hang": 0.1430472168384368,
                    "java": 0.18034702495075933,
                    "javascript": 0.12028164801029853,
                    "languages": 0.08121389190523327,
                    "like": 0.05288688436097514,
                    "lisp": 0.1221887081300024,
                    "meet": 0.126532616276416,
                    "netbeans": 0.1430472168384368,
                    "note": 0.11124010575829646,
                    "open": 0.09234096351841885,
                    "performance": 0.11389011572388352,
                    "phone": 0.1483637307351939,
                    "presented": 0.1430472168384368,
                    "promise": 0.27740661738404643,
                    "responsive": 0.1483637307351939,
                    "run": 0.0917803368915586,
                    "scenarios": 0.13870330869202321,
                    "sorry": 0.1430472168384368,
                    "spread": 0.1483637307351939,
                    "support": 0.09808677790062396,
                    "time": 0.11695138603920609,
                    "try": 0.08506508315310496,
                    "vb6": 0.1430472168384368,
                    "wait": 0.6592456508658655
                },
                "Max term": "wait",
                "Max score": 0.6592456508658655
            }
        ]
    },
    {
        "ID": "1189",
        "Question": "By now I work with asp.net and C#. I have done a decent work in Java as well. I am planning my career in such a way I should be language-agnostic someday. What are the things that I need to learn?  First would OOP paradigms as its speaks about the Class design. Are there any others? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "agnostic": 0.32427895791300726,
                    "asp": 0.2905156881721685,
                    "career": 0.24478503232203794,
                    "class": 0.23103431284572226,
                    "decent": 0.31569238217686924,
                    "design": 0.1988764131137023,
                    "java": 0.21081957548539243,
                    "language": 0.1632780720746743,
                    "learn": 0.18823416189504308,
                    "need": 0.1632780720746743,
                    "net": 0.21204385517945387,
                    "oop": 0.2905156881721685,
                    "paradigms": 0.30169354432265794,
                    "planning": 0.2600718462565964,
                    "things": 0.16484725989077104,
                    "way": 0.15252381099776705,
                    "work": 0.29373596051495116
                },
                "Max term": "agnostic",
                "Max score": 0.32427895791300726
            }
        ],
        "Best answer": "To be language agnostic you need to have experience in all of the common styles and types of languages.  An imperative language (You tell it what to do, step by step. Eg - C) A declarative language (You tell it your goal, it figures out what to do. Eg - SQL/HTML/Prolog)  Also:  A functional language (Functions are key, avoiding state and side effects are the goals. Eg - Haskell/OCaml/Lisp/F#) An object oriented language (Architecture where objects encapsulate related data and the methods that act on them). Eg - Java/C#)  Some typing styles:  A statically typed language (Data types are defined and checked at compile time. Eg - C#) A dynamically typed language (Data types are checked at runtime. Eg - Python/Javascript) Experience of strong vs. weak typing is also useful.  Some different runtime styles:  Something compiled (Eg - C++) Something interpreted (Eg - PHP) Something Managed (Eg - C#/Java)  Lower level stuff:  Something fairly low level (Eg - C) Some dialect of assembly (Eg - NASM)  On top of that I would say you need experience of some concurrent programming and something event driven. You should probably also make sure you know something about the various domains such as web programming (client & server), rich client development/desktop, games. You might also want to learn about embedded programming, or dedicated hardware (like games consoles), and mobile development is becoming an increasingly relevant domain. Others have also mentioned that it's worth getting some experience of Generic programming and Meta programming approaches. When you learn these paradigms avoid just learning the syntax and writing in your old style. I've seen many C# devs write JavaScript as if it's statically typed. Don't do this, try to learn the language paradigms and embrace them. If you've done all of this, the differences between languages will become largely syntactical so switching will become a fairly simple exercise of learning some new syntax. Don't forget though that modern programming is almost always dependant on a framework, so familiarising yourself with the common and popular frameworks for each language you learn is also critical. Knowing C# is irrelevant without .net.  ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "agnostic": 0.07529662814050252,
                    "approaches": 0.06868963289523976,
                    "architecture": 0.06633149422168255,
                    "assembly": 0.07529662814050252,
                    "avoid": 0.05584295990877657,
                    "avoiding": 0.07529662814050252,
                    "client": 0.11168591981755314,
                    "common": 0.09790338097929029,
                    "compile": 0.07005236098404953,
                    "compiled": 0.07529662814050252,
                    "concurrent": 0.07330285030069063,
                    "critical": 0.07157576137813554,
                    "data": 0.14770789399054143,
                    "declarative": 0.0805408952969555,
                    "dedicated": 0.07330285030069063,
                    "defined": 0.06868963289523976,
                    "desktop": 0.06868963289523976,
                    "development": 0.081418623725843,
                    "devs": 0.0805408952969555,
                    "differences": 0.07157576137813554,
                    "different": 0.04333785664135861,
                    "domain": 0.06633149422168255,
                    "driven": 0.06182651137458579,
                    "dynamically": 0.0805408952969555,
                    "effects": 0.07005236098404953,
                    "embedded": 0.0805408952969555,
                    "embrace": 0.0805408952969555,
                    "encapsulate": 0.0805408952969555,
                    "event": 0.07330285030069063,
                    "exercise": 0.07157576137813554,
                    "experience": 0.1847140920954433,
                    "fairly": 0.12689073147757352,
                    "figures": 0.0805408952969555,
                    "forget": 0.07157576137813554,
                    "framework": 0.052861377455765815,
                    "frameworks": 0.06108722706522955,
                    "functional": 0.054480231819966786,
                    "functions": 0.06344536573878676,
                    "games": 0.12522125491863112,
                    "generic": 0.0805408952969555,
                    "getting": 0.04895169048964514,
                    "goal": 0.06433771638187066,
                    "goals": 0.07765476681405972,
                    "hardware": 0.06182651137458579,
                    "haskell": 0.06633149422168255,
                    "html": 0.06108722706522955,
                    "imperative": 0.07157576137813554,
                    "interpreted": 0.07765476681405972,
                    "irrelevant": 0.07330285030069063,
                    "java": 0.09790338097929029,
                    "javascript": 0.13059245100588027,
                    "key": 0.06182651137458579,
                    "know": 0.03512272725981532,
                    "knowing": 0.06745689539051195,
                    "language": 0.34121422864022966,
                    "languages": 0.0881757223572706,
                    "learn": 0.1748296933327686,
                    "learning": 0.099053255105744,
                    "level": 0.09847192932702761,
                    "like": 0.028710231232336268,
                    "lisp": 0.06633149422168255,
                    "low": 0.06344536573878676,
                    "lower": 0.06868963289523976,
                    "make": 0.03654996398232685,
                    "managed": 0.06344536573878676,
                    "mentioned": 0.07157576137813554,
                    "methods": 0.05584295990877657,
                    "mobile": 0.0805408952969555,
                    "modern": 0.06433771638187066,
                    "need": 0.07582538414227326,
                    "net": 0.049235964663513807,
                    "new": 0.038154455264268236,
                    "object": 0.057916824408465115,
                    "objects": 0.06633149422168255,
                    "old": 0.05683837049352399,
                    "oriented": 0.06038792409913379,
                    "paradigms": 0.14010472196809906,
                    "php": 0.05683837049352399,
                    "popular": 0.06433771638187066,
                    "probably": 0.04573248040045106,
                    "programming": 0.2051509518526179,
                    "prolog": 0.07529662814050252,
                    "python": 0.054480231819966786,
                    "related": 0.06038792409913379,
                    "relevant": 0.06038792409913379,
                    "runtime": 0.15059325628100503,
                    "say": 0.04195692453230857,
                    "seen": 0.054918712938194454,
                    "server": 0.05736636030286259,
                    "simple": 0.049823972929718345,
                    "sql": 0.05972449897641978,
                    "state": 0.06745689539051195,
                    "statically": 0.15059325628100503,
                    "step": 0.1349137907810239,
                    "strong": 0.06633149422168255,
                    "stuff": 0.05075936505759981,
                    "style": 0.05972449897641978,
                    "styles": 0.22588988442150756,
                    "sure": 0.04736595766530019,
                    "switching": 0.07529662814050252,
                    "syntax": 0.12689073147757352,
                    "tell": 0.11473272060572517,
                    "time": 0.031744177944101525,
                    "try": 0.04617852302386082,
                    "typed": 0.22588988442150756,
                    "types": 0.17728034767625303,
                    "typing": 0.15059325628100503,
                    "useful": 0.05212209314640958,
                    "various": 0.06344536573878676,
                    "vs": 0.06261062745931556,
                    "want": 0.038033008792205475,
                    "weak": 0.07765476681405972,
                    "web": 0.04761711029931282,
                    "worth": 0.054056129751853324,
                    "write": 0.03970839629650102,
                    "writing": 0.044884048150144705
                },
                "Max term": "language",
                "Max score": 0.34121422864022966
            }
        ]
    },
    {
        "ID": "4296",
        "Question": "Has anybody's organization started the migration from Java to Scala? If yes, how do you do that? What can I do to encourage my colleagues to do the same? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "anybody": 0.3973900586676734,
                    "colleagues": 0.4209827068589848,
                    "encourage": 0.37976847731115027,
                    "java": 0.26537733629409216,
                    "organization": 0.34878819558391483,
                    "scala": 0.40819874468033296,
                    "started": 0.2845400273096254,
                    "yes": 0.2845400273096254
                },
                "Max term": "colleagues",
                "Max score": 0.4209827068589848
            }
        ],
        "Best answer": "Probably the easiest way is to first use Scala only for testing. In this case, you might even not have to tell your boss :-) If he asks, tell him \"that's just my private test case, it's so much easier and faster to use Scala for it\". Once you (and your organization) has enough experience with Scala you can start using it for the 'real' code. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "asks": 0.22677135045310812,
                    "boss": 0.16816060012844122,
                    "case": 0.29556224836315065,
                    "code": 0.07937655555288044,
                    "easier": 0.1467552279829299,
                    "easiest": 0.21864515256029432,
                    "experience": 0.1300204820102951,
                    "faster": 0.17002854324538422,
                    "organization": 0.18114959829031568,
                    "private": 0.18384838139925838,
                    "probably": 0.12876460215326918,
                    "real": 0.13704543682500803,
                    "scala": 0.6360166963018367,
                    "start": 0.12637575203606402,
                    "tell": 0.32304202600418497,
                    "test": 0.12815253889335212,
                    "testing": 0.13336382896740528,
                    "use": 0.17083360741101272,
                    "using": 0.10641152467863774,
                    "way": 0.09971629673670174
                },
                "Max term": "scala",
                "Max score": 0.6360166963018367
            }
        ]
    },
    {
        "ID": "4714",
        "Question": "It seems to me that rapid-development web platforms are going to radically change the world of web applications. It has been five years since Rails 1.0 was released for Ruby, and since that time we have seen Grails for Groovy, Django for Python, and Roo for Java. But to my knowledge (which is probably limited, being a Java/Groovy progammer) there is no similar framework for C#. Does such a thing exist?  If not, why not? Edit:  It's quite possible I'm not using the right words when I say \"rapid-development,\" but I'm talking about frameworks that can conceivably allow you to build a working blog engine in 30 minutes.  You couldn't reasonably do this with, say, Java, Spring, and Hibernate, given the various configuration needed to allow your controllers to be found, and both configuration and code necessary for your entities to persist and be retrieved.   So I'm talking about frameworks that handle all of the CRUD with a convention-over-configuration mentality.  If someone has the right words for what I'm talking about, let me know. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "30": 0.11481068173196923,
                    "allow": 0.21045569556478438,
                    "applications": 0.09587472103539019,
                    "blog": 0.11113325214743562,
                    "build": 0.0906264821032901,
                    "change": 0.08479969713312255,
                    "code": 0.04798179182059841,
                    "configuration": 0.36546280013641147,
                    "convention": 0.11113325214743562,
                    "crud": 0.1370794644908493,
                    "development": 0.13857334586076298,
                    "django": 0.13216731463916895,
                    "edit": 0.09130387115471293,
                    "engine": 0.11289526486217015,
                    "exist": 0.10522784778239219,
                    "framework": 0.08996931667034673,
                    "frameworks": 0.20793919269107297,
                    "given": 0.09504392782890282,
                    "going": 0.07085972820022371,
                    "handle": 0.10656240226675838,
                    "java": 0.24994525427740089,
                    "know": 0.05977838496185221,
                    "knowledge": 0.08584815276807369,
                    "let": 0.08933120221839906,
                    "limited": 0.1169087835271235,
                    "minutes": 0.10950188318212485,
                    "necessary": 0.09504392782890282,
                    "needed": 0.09504392782890282,
                    "platforms": 0.11481068173196923,
                    "possible": 0.08061618992334472,
                    "probably": 0.07783603472519461,
                    "python": 0.09272458389844436,
                    "quite": 0.08752086147730191,
                    "radically": 0.1370794644908493,
                    "rails": 0.11922812745758193,
                    "rapid": 0.2741589289816986,
                    "reasonably": 0.1247604142941703,
                    "released": 0.11922812745758193,
                    "right": 0.1571903859213365,
                    "ruby": 0.10950188318212485,
                    "say": 0.14282018409073344,
                    "seen": 0.0934708725590606,
                    "similar": 0.08933120221839906,
                    "talking": 0.3049507572452341,
                    "thing": 0.07821234144701515,
                    "time": 0.05402814181833604,
                    "using": 0.06432397562327312,
                    "various": 0.10798311501048982,
                    "web": 0.16208729630742613,
                    "words": 0.2257905297243403,
                    "working": 0.07314889610516644,
                    "world": 0.08479969713312255,
                    "years": 0.08061618992334472
                },
                "Max term": "configuration",
                "Max score": 0.36546280013641147
            }
        ],
        "Best answer": "I don't know what you mean by \"rapid development web platforms\". The definition of \"rapid development\" that I'm familiar with has nothing to do with languages, paradigms, or frameworks, but rather the use of rapid prototyping and iterative development to produce a system. Any language or framework can be used equally well. I've never used Grails or Roo before, but Django and Rails are both MVC frameworks, so their counterpart in .NET would be ASP.NET MVC. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "asp": 0.15960718259519271,
                    "definition": 0.15222701232946587,
                    "development": 0.28896224177894136,
                    "django": 0.18373597650066237,
                    "familiar": 0.15011565557038115,
                    "framework": 0.12507328531758252,
                    "frameworks": 0.2890723075229299,
                    "know": 0.08310254289863121,
                    "language": 0.08970377203164813,
                    "languages": 0.10431460369816685,
                    "mean": 0.12692855242388484,
                    "mvc": 0.36747195300132474,
                    "net": 0.23299066928019987,
                    "paradigms": 0.1657482145610006,
                    "platforms": 0.15960718259519271,
                    "produce": 0.14628534611711816,
                    "rails": 0.1657482145610006,
                    "rapid": 0.5716942044674752,
                    "use": 0.07177904314191799,
                    "used": 0.18598220788290726,
                    "web": 0.11266502518683694
                },
                "Max term": "rapid",
                "Max score": 0.5716942044674752
            }
        ]
    },
    {
        "ID": "7539",
        "Question": "I'm writing a small database-centric application in Java Swing that will be used internally in a small company. I haven't much experience with developing production-level applications. I don't use an ORM, just a few simple methods that run SQL queries with Java JDBC. On every method that access the database I use a try-catch statement for SQLException and IOException. Should I do any logging here? In case I should, how much should I log? Please give me examples of good practice in this case. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "access": 0.14558332425467976,
                    "application": 0.1214106800142646,
                    "applications": 0.14810339714936266,
                    "case": 0.275990467082515,
                    "catch": 0.21175482078342803,
                    "centric": 0.21175482078342803,
                    "company": 0.1251929547154768,
                    "database": 0.3140504095590768,
                    "developing": 0.15227254089666659,
                    "examples": 0.15536607463905278,
                    "experience": 0.1214106800142646,
                    "good": 0.09259795839161072,
                    "internally": 0.19796680852256732,
                    "java": 0.25740355650286584,
                    "level": 0.12944918025781701,
                    "log": 0.17439604587733365,
                    "logging": 0.19272484954514713,
                    "method": 0.14810339714936266,
                    "methods": 0.14682002135561226,
                    "orm": 0.20416673007000574,
                    "practice": 0.15378414185834544,
                    "production": 0.16680795516391136,
                    "queries": 0.20416673007000574,
                    "run": 0.13099514749061514,
                    "simple": 0.13099514749061514,
                    "small": 0.2531067060327977,
                    "sql": 0.1570252047795384,
                    "statement": 0.18818405813819436,
                    "try": 0.1214106800142646,
                    "use": 0.15952120869247877,
                    "used": 0.10333136699147306,
                    "writing": 0.11800729973295837
                },
                "Max term": "database",
                "Max score": 0.3140504095590768
            }
        ],
        "Best answer": "Two main things in production system are:  Don't blow up the logs with information that is not interesting Allow raising the log level for troubleshooting purpose.  Use some kind of a logging infrastructure. If the exception can occur during the normal operation, report it in debug level. If it is a real problem, report it in error level. Either way you will have a way to troubleshoot the system by raising the log level. Also - when you report an exception always make sure the the entire stack trace + inner exceptions are printed. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "allow": 0.13021735710382665,
                    "blow": 0.16963309575731067,
                    "debug": 0.1336269451940403,
                    "entire": 0.13752517689916824,
                    "error": 0.12579015438766034,
                    "exception": 0.2950848464005629,
                    "exceptions": 0.15858775947879605,
                    "information": 0.11298671450262693,
                    "infrastructure": 0.15858775947879605,
                    "inner": 0.1635544085574495,
                    "interesting": 0.11864304981427369,
                    "kind": 0.11385158559085903,
                    "level": 0.4147979273225245,
                    "log": 0.279411264787803,
                    "logging": 0.15438851751640384,
                    "main": 0.12866029611538687,
                    "make": 0.07698056393935657,
                    "normal": 0.14207592246248782,
                    "occur": 0.15858775947879605,
                    "operation": 0.1635544085574495,
                    "problem": 0.08836856072470795,
                    "production": 0.1336269451940403,
                    "purpose": 0.12866029611538687,
                    "real": 0.10251489732538403,
                    "report": 0.43401684441766475,
                    "stack": 0.12866029611538687,
                    "sure": 0.0997609227293791,
                    "things": 0.08061811278334431,
                    "trace": 0.16963309575731067,
                    "use": 0.06389482980680013,
                    "way": 0.14918272594049803
                },
                "Max term": "report",
                "Max score": 0.43401684441766475
            }
        ]
    },
    {
        "ID": "7581",
        "Question": "Is Java becoming the de facto standard from Linux application development in the same way .NET is the standard for Windows application development?  If not why not?   ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "application": 0.42614600150360654,
                    "development": 0.3756748665474515,
                    "facto": 0.371624926923103,
                    "java": 0.225868713451766,
                    "linux": 0.3169418431586912,
                    "net": 0.22718038708912203,
                    "standard": 0.48781691491318974,
                    "way": 0.16341156593977207,
                    "windows": 0.267234869429464
                },
                "Max term": "standard",
                "Max score": 0.48781691491318974
            }
        ],
        "Best answer": "In short: No. It really depends on what sort of application you are writing. For many the answer is still regular old C/C++ (if doing, say Qt or GTK+ GUI development). Many doing GTK+ development may also be using Python + PyGTK. If doing web or web services development, you see lots of Ruby, Python, PHP, and Java. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "answer": 0.16054467740946132,
                    "application": 0.15569437194970037,
                    "depends": 0.2084527444356175,
                    "development": 0.4117635425277922,
                    "gui": 0.24132307585568002,
                    "java": 0.16504431514025095,
                    "lots": 0.20360243897585656,
                    "old": 0.19163485138017586,
                    "php": 0.19163485138017586,
                    "python": 0.3673684181064411,
                    "really": 0.1266306906620239,
                    "regular": 0.22015114721432913,
                    "ruby": 0.21691946144698962,
                    "say": 0.1414609343530408,
                    "services": 0.2236416337524214,
                    "short": 0.19527094006314855,
                    "sort": 0.19923801934373103,
                    "using": 0.1274235816303058,
                    "web": 0.32108935481892265,
                    "writing": 0.15132995231757485
                },
                "Max term": "development",
                "Max score": 0.4117635425277922
            }
        ]
    }
]
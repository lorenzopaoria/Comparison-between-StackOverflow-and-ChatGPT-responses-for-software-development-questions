[
    {
        "ID": "1750",
        "Question": "I work for a company that supports several languages: COBOL, VB6, C#, and Java. I use those languages for my primary work, but I often find myself coding some minor programs (e.g. scripts) in Python because I find it to be the best tool for that type of task. For example: an analyst gives me a complex CSV file to populate some DB tables, so I use Python to parse it and create a DB script. What's the problem? The main problem I see is that a few parts of these quick and dirty scripts are slowly gaining importance and:  My company does not support Python They're not version controlled (I back them up in another way) My coworkers do not know Python  The analysts have even started to reference them in emails (\"launch the script that exports...\"), so they are needed more often than I initially thought. I should add that these scripts are just utilities that are not part of the main project; they simply help to get trivial tasks done in less time. For my own small tasks they help a lot. In short, if I were a lottery winner to be in a accident, my coworkers would need to keep the project alive without those scripts; they would spend more time fixing CSV errors by hand, for example. Is this a common scenario? Am I doing something wrong? What should I do? ",
        "ChatGpt answer": "It is not uncommon for developers to use a different language for quick tasks or utilities that are not part of the main project. However, there are some potential issues with this approach, such as lack of support for the language in the company, lack of version control, and lack of knowledge among coworkers.  To address these issues, you could consider the following steps:  1. Discuss with your manager or team lead about the importance of these scripts and how they are becoming increasingly essential for the workflow. You can make a case for the adoption of Python as a supported language within the company.  2. Introduce version control for your Python scripts to ensure that changes are tracked and easily reversible. This will also make it easier for your coworkers to understand and contribute to the scripts if necessary.  3. Offer to provide training or documentation for your coworkers on how to use and understand Python scripts. This could help alleviate any concerns they may have about not knowing the language.  4. Consider refactoring or rewriting the most important scripts in a language that is supported by the company, such as C# or Java. This will ensure that the scripts can be maintained and supported by the rest of the team in the long term.  Overall, it's important to communicate with your team about the importance of these scripts and work together to find a sustainable solution that meets the needs of the project.",
        "Stack Overflow best answer": "You need to get the situation formalised as it shouldn't really have got to this point. However, these things happen so you need to explain to your boss that you created these scripts for personal use, but they've \"escaped\" into wider circulation. Admit (if necessary) that you were at fault for not bringing this to his attention sooner. At the very least the scripts should be put under source control \"just in case\" - then at least if you aren't available (for what ever reason) your co-workers will have access to the scripts. Then you either need to convince your boss that Python is the way to go for these or accept that you are going to have to re-write them in a supported language. If the cost of documenting the scripts and educating your co-workers in Python is lower than that of the re-write you might even win the argument. ",
        "Are the two answers equivalent?": "No"
    }
]
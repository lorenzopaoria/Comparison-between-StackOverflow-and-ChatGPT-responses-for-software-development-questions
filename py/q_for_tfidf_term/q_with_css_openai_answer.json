[
    {
        "ID": "1516",
        "Question": "A few years ago I considered myself somewhat of a web developer, knowing the basic 3 languages (HTML, CSS, JS) and lots of PHP. Moving on from simple text to actual websites was a pain because of the so called \"standards\" out there, which at the time were ridiculously complicated for me. It pretty much boiled down to this (minus the IE related stuff):  Standards are there to replace old ways of doing things in a simpler way. However when trying to actually implement some of the stuff (Entirely CSS based layout for example), it took me 10x longer to actually do it then if I did the simpler and still working solution. If it rendered the same, then why should I use the more complicated example that takes 10x longer and breaks once you change browsers? This sparked many long religious debates in ##php, ##css, and ##js in Freenode IRC and actually got me banned from ##css because I messed with their little world over there. My question: Should I follow every single standard and coding conventions even if they take me 10x longer but get me the same result as the simple one?  For the poll tag, those of you who have websites of any size (huge or small), do you follow all the standards?  ",
        "ChatGpt answer": "Your question touches on a long-standing debate in the web development community regarding standards, best practices, and the balance between efficiency and maintainability. Here are a few points to consider:  1. **Understanding Standards**: Web standards, as set by organizations like the W3C, aim to create consistent behavior across different browsers and devices. They are designed to ensure that your code is maintainable, accessible, and performs well in a variety of environments.  2. **Short-Term vs. Long-Term**: While using non-standard techniques may provide quicker results in the short term, it can create technical debt. This means that as the project grows or as requirements change, you may find yourself spending much more time fixing issues, updating code, or dealing with cross-browser compatibility problems.  3. **Learning Curve**: There can be a steep learning curve when adhering to standards, especially for complex layouts or modern JavaScript features. However, investing the time upfront can pay off in the long run as you become more familiar and comfortable with these practices.  4. **Best Practices**: It's essential to strike a balance. Follow best practices that are well-supported and widely accepted. Use standards where they make sense, but don't feel compelled to implement every single recommendation if a simpler solution serves your needs effectively and doesn't violate important accessibility or functionality guidelines.  5. **Community Evolution**: The web development community is continually evolving. What may have been a best practice a few years ago may no longer be relevant today. Being part of communities (like those on IRC, Slack, or Discord) can be valuable for keeping up with current standards and best practices, even if debates and disagreements arise.  6. **Poll Insights**: In response to your poll, many web developers\u2014especially those maintaining larger websites\u2014tend to follow standards because it prevents headaches down the line. However, there are also many who opt for pragmatic solutions based on the specific needs of their projects.  In conclusion, while it's beneficial to follow standards and conventions, it\u2019s also crucial to apply common sense and practicality. Choose what works best for you and your project, and don't be afraid to innovate within the constraints of agreed-upon practices!",
        "Stack Overflow best answer": "The standards writers have thought of things that haven't occurred to you, such as accessibility concerns. Standards exist for a reason. And, with HTML5, standards are fairly easy to follow. There may, occasionally, be reason to not follow the standard, but following it should be your default behaviour. ",
        "Are the two answers equivalent?": "No."
    },
    {
        "ID": "15842",
        "Question": "I am thinking about creating a silverlight application, and I lack the skills to create a good looking UI. Today's graphic designers usually know HTML and CSS and thus save me the trouble of doing something I am not very good with. Is this the same case with XAML? Do I have to hire two employees for this job? ",
        "ChatGpt answer": "Creating a Silverlight application can certainly benefit from a strong UI/UX design, and you're right to consider the importance of good design skills. XAML (eXtensible Application Markup Language) is the markup language used for designing user interfaces in Silverlight and other Microsoft technologies.  Typically, a graphic designer might not have extensive experience with XAML as they do with HTML and CSS; however, many designers are adaptable and can pick up new technologies. If your graphic designer has experience with designing user interfaces and is willing to learn, they might be able to manage XAML as well, especially with tools like Expression Blend that are tailored for designing XAML-based UIs.  Here are a few options you could consider:  1. **Hire One Designer/Developer**: Look for a designer who has experience with XAML and UI design for Silverlight or similar technologies. If they have a strong understanding of general design principles and are willing to learn the technical aspects, this could be a more cost-effective solution.  2. **Hire a Developer with Design Skills**: You might find a developer who is also skilled in design or has experience with XAML. This could be a good mix because they\u2019d be able to bridge the gap between design and implementation, ensuring your application is built to specifications while looking good.  3. **Collaborate with Both**: If the budget allows, hiring both a graphic designer and a developer could be beneficial. The designer can create the look and feel of the application, while the developer focuses on the functionality and implementation using XAML.  4. **Use Design Tools**: Consider leveraging design tools that aid in the creation of XAML or offer templates that could make the transition smoother for a designer less familiar with XAML.  5. **Online Resources and Learning**: Encourage on-the-job training; there are many resources available that can help graphic designers learn XAML quickly, especially if they are motivated.  In summary, while it could be beneficial to have both a designer and a developer, you may find someone who can fulfill both roles or can learn the necessary skills through available resources. It ultimately depends on your project's budget and timeline, as well as the skills and willingness to learn of the candidates you consider.",
        "Stack Overflow best answer": "Silverlight is a pretty cool technology, but I'm seriously concerned about its future. However, if you want a cool UI done in XAML... you have several options.   Hire a Silverlight/WPF dev and hope they also design / See #3 Hire a UX designer with XAML skillz Hire a great graphic designer and then hire #1 OR you can use the built-in Ai/PSD to XAML tools in Expression Studio (design).  Tons of options, if you are a small company you may even qualify for Bizspark ( a free version of Expression Studio).  Good luck. ",
        "Are the two answers equivalent?": "No."
    }
]
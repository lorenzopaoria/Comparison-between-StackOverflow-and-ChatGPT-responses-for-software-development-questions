[
    {
        "ID": "1674",
        "Question": "i wonder apart from those very simple hello world apps, what other programs should i try developing for learning. i am entering uni next year and wonder what kind of programs will be developed in that environment.  this is not really a language specific thing, but if you want to know what i use currently mainly  windows: C#/WPF - i studied java/vb etc in poly but i think C# is the way to go, maybe even F# web: PHP/MySQL, Zend Framework/Doctrine, + HTML/CSS/JS(jQuery) of course. looking to try google app engine with python too.   for now, i am thinking of   todo lists apps that integrate with api eg. twitter/tumblr which i use text editor - i am currently trying to develop a text editor that uses markdown and generates html files for viewing (link to blog entry). not very pratical after i started developing it. cos when editing theres no formatting and in HTML format, i cannot edit directly  blog software (for web)  ",
        "ChatGpt answer": "It's great to hear that you're diving into programming and looking to expand your skills before entering university! Developing a range of projects will not only deepen your understanding of programming concepts but also give you practical experience that can be valuable in your studies and future career. Here are some project ideas that you can consider:  ### Web Development Projects  1. **Personal Portfolio Website**: Create a responsive portfolio site to showcase your projects, skills, and experiences. This will also familiarize you with HTML/CSS and JavaScript.  2. **Blog Platform**: Develop a basic content management system (CMS) similar to WordPress where you can create, read, update, and delete (CRUD) posts, categorizing them and adding tags.  3. **Task Management App**: Expand on your idea of a to-do list app to include features like deadlines, prioritization, categorization, and even collaboration with other users.  4. **E-commerce Store**: Create a simple online store with product listings, shopping cart functionality, and payment integration (like PayPal or Stripe).  5. **Weather App**: Use a weather API to fetch and display current weather data based on user input (like city or zip code). You could add features like a 5-day forecast and unit conversion (Celsius/Fahrenheit).  ### Desktop Applications  1. **Markdown Editor**: Refine your text editor project by incorporating a split view for live previewing. Libraries like Marked.js can help with rendering Markdown to HTML.  2. **Expense Tracker**: Build an application to track personal finances, allowing users to input expenses, categorize spending, and visualize data with charts.  3. **Note-taking Application**: Develop a note-taking app that allows for tagging, searching, and organization of notes. This could also integrate with cloud services for synchronization.  ### Game Development  1. **Text-Based Adventure Game**: Create a simple console-based game with story branching and choices, which is a fun way to get familiar with game mechanics and storytelling.  2. **2D Game**: Use a framework like Unity (C#) or Godot to develop a simple 2D game, such as a platformer or puzzle game.  ### APIs and Integrations  1. **Social Media Aggregator**: Create an app that aggregates content from multiple social media APIs (Twitter, Tumblr, Instagram) into one feed.  2. **Fitness Tracker App**: Build an app that uses fitness tracking APIs to log workouts, visualize progress, and set personal goals.  3. **Recipe Finder**: Use a recipe API to allow users to search for recipes based on ingredients and dietary restrictions.   ### Miscellaneous  1. **Learning Management System (LMS)**: Create a simple LMS where users can upload courses, track progress, and take quizzes.  2. **Virtual Study Group**: Develop an application to facilitate online study groups where users can schedule sessions, share resources, and communicate.  3. **Language Learning App**: Create a flashcard application or a quiz-based app for learning new languages, with spaced repetition techniques.  ### Final Thoughts  As you choose projects, consider not only your interests but also areas where you want to grow. Don't hesitate to reach for projects that feel challenging; they can lead to great learning experiences. Additionally, make use of version control (e.g., Git), as it will be important in a collaborative environment during university. Good luck, and enjoy your coding journey!",
        "Stack Overflow best answer": "Have a look at Project Euler.  There's nothing else like it for sharpening your foundational programming skills. ",
        "Are the two answers equivalent?": "No."
    },
    {
        "ID": "4142",
        "Question": "Often when stating a new project I'll require a \"quick 'n' dirty\" content management solution. Ideally something that can read my database schema and generated HTML forms. Previously I've used; phpMyEdit and phpMyAdmin but they are lacking is key areas. My wish list woulds be:  Database independent Foreign key aware Handles views as-well-as tables Generates modern HTML and CSS AJAX interface.  What's your swiss army knife when it comes to CMS on a project? ",
        "ChatGpt answer": "It sounds like you're looking for a flexible and powerful content management solution that can streamline your project development while being database-independent and feature-rich. Here are a few options you might find interesting that can serve as a \"Swiss Army knife\" for your content management needs:  ### 1. **Adminer** - **Overview**: A lightweight and easy-to-use database management tool written in PHP. It supports multiple database systems (MySQL, PostgreSQL, SQLite, etc.). - **Key Features**:    - Foreign key awareness.   - Can manage both tables and views.   - Offers a simple AJAX interface for quick data manipulation.   - Highly customizable with plugins.    ### 2. **Django + Django Admin** - **Overview**: Django is a high-level Python web framework that encourages rapid development. It comes with a powerful built-in admin panel. - **Key Features**:    - ORM that provides database-independent models.   - Automatically generates forms and CRUD interfaces based on your models.   - Foreign key awareness out of the box.   - Views are also supported through the ORM.   - Extensible and customizable with third-party packages.    ### 3. **CakePHP + Bake** - **Overview**: A PHP framework that has a tool called \u201cBake\u201d which generates code based on your database schema. - **Key Features**:    - Foreign key support when generating models.   - Generates views for both tables and foreign keys.   - Easy and quick to set up AJAX interfaces.   - Highly customizable and can use modern HTML/CSS.    ### 4. **Grav CMS** - **Overview**: A flat-file CMS that is lightweight and fast, focusing on speed and simplicity. - **Key Features**:   - While it's primarily a flat-file CMS, plugins can facilitate connections with databases for more complex setups.   - A modern and flexible theming system.   - Supports AJAX through custom plugins or extensions.    ### 5. **PHPMaker** - **Overview**: A powerful automation tool that enables you to generate a full set of PHP scripts quickly from various databases. - **Key Features**:   - Database independent with support for popular databases.   - Foreign key awareness for creating proper relationships.   - Supports views and generated forms alongside tables.   - Generates user-friendly modern HTML and CSS.   - Built-in AJAX support for dynamic user interfaces.    ### 6. **Echo (PHP Code Generator)** - **Overview**: A PHP framework for building web applications with code generation capabilities. - **Key Features**:   - Simplifies CRUD operations and allows customization.   - Designed to work with modern web technologies.   - Can read database schemas and automatically generate PHP code.  ### Conclusion Each of these tools has its own strengths, and the best choice ultimately depends on your specific project requirements, the programming language you're comfortable with, and your development environment. If you're keen on using PHP, Adminer, CakePHP + Bake, or PHPMaker could serve you well. If you're open to other languages, Django offers a robust environment for rapid development with a powerful admin interface.   Evaluate these options based on your wishlist, and consider setting up a small test project with each to see which fits best into your workflow.",
        "Stack Overflow best answer": "I think you're looking for \"scaffolding\", where the software generates views that allow users to maintain the data without you having to do much or any work.  If you must stick with PHP, then look at CakePHP. http://book.cakephp.org/view/105/Scaffolding But two quick suggestions for you. Look at this site: http://www.phpscaffold.com/ Second suggestion: Consider switching to Python/Django or Ruby on Rails.  Both of those are better than what PHP has to offer in terms of scaffolding.  There may be something in PHP somewhere that's as good, but I have not seen it.  CakePHP is the closest I know of. ",
        "Are the two answers equivalent?": "No."
    },
    {
        "ID": "7245",
        "Question": "I had a question posed to me the other day by another programmer.  I remember (a very long time ago) wondering the very same.  Why was a browser-side include tag never considered?  Or was it? Specifically with a tag that instructed the browser to include additional HTML from other sources. e.g. <include src=\"http://server/foo/bar.html\">.  Many folks will make javascript calls and fill innerHTML to accomplish the same, when the same outside a the javascript engine could be accomplished by the browser. It would have been painful to have nested <HTML>s <BODY>s (i.e.) but we have to consider that aspect anywhere anyway. ",
        "ChatGpt answer": "The idea of a dedicated browser-side include tag, such as `<include src=\"...\">`, would certainly simplify the process of combining HTML fragments from different sources directly in the markup. However, there are several reasons why this method was not widely adopted or implemented in browsers.  ### 1. **Security:**  One of the primary concerns is related to security. Including external HTML could expose websites to cross-site scripting (XSS) attacks. If a browser allowed arbitrary HTML inclusion from any source, malicious actors could exploit this to insert harmful scripts or content.   ### 2. **CORS (Cross-Origin Resource Sharing):** Working with resources from different origins is heavily regulated in web browsers due to the Same-Origin Policy, which restricts how documents and scripts from one origin can interact with resources from another origin. Introducing an `<include>` tag would need to elegantly handle these security restrictions and could complicate matters further.  ### 3. **Performance and Caching:** Loading additional HTML at the time of page rendering could introduce performance issues. The browser would need to make additional network requests before fully rendering the page, which could lead to slower load times. Caching behavior might also become complex and less efficient.  ### 4. **SEO and Indexing:** Search engines index HTML content, and having server-side includes could create inconsistencies in how pages are crawled. Traditional SEO practices might be affected since search engines might not render JavaScript content in the same way they would direct HTML content.  ### 5. **Complexity of Implementation:** HTML parsing and rendering is already quite complex, and adding in-browser directives for including other HTML snippets could introduce significant complexity into the browser rendering engine. Browsers might have to deal with various edge cases, such as ensuring that the included content fits within the structure of the DOM.  ### 6. **Alternatives Exist:** As noted, developers have found alternative solutions for dynamically including content, primarily through JavaScript. Libraries and frameworks like jQuery, React, and others have provided straightforward and manageable ways to handle these types of situations, hence lessening the perceived need for a dedicated HTML tag for includes.  ### 7. **HTML Standards and Bloat:** HTML specifications evolve through standardization processes, and adding new tags can lead to bloat if the functionality can be effectively achieved through existing mechanisms. Concerns about maintaining a streamlined and coherent standard likely influenced the decision against creating a dedicated `<include>` tag.  ### Current Alternatives: To dynamically include content, developers typically use:  - **JavaScript Fetch API or XMLHttpRequest:** To load external HTML and inject it into the DOM. - **JavaScript frameworks** (React, Vue, Angular, etc.): For component-based architectures that can manage HTML reuse and rendering efficiently. - **Web Components:** With Shadow DOM and custom elements, developers can create reusable components that encapsulate their behavior and markup.  In summary, while the idea of a native `<include>` tag for including HTML snippets is intriguing, various web standards, performance implications, security concerns, and existing alternatives have contributed to it not being implemented as a core feature of browsers.",
        "Stack Overflow best answer": " Why was a browser-side include tag never considered? Or was it?  It was certainly requested by every newbie web author who hadn't worked out Server Side Includes yet, back in the early days on the www-html list. But in those days W3 were happy to completely ignore web author pressure. If cross-site inclusion were allowed it would be a security disaster. You could pull in a page from the user's bank and read content from it. (Originally, DOM scripting was limited, but you could still have read from document.links, document.images, scripting functions dropped by the target page, etc. Since then you can do what you like with imported content.) If cross-site inclusion weren't allowed... well then the feature wouldn't have any advantage over server-side includes. It'd be more, slower work for the client to do that the server could have dealt with better. Unlike <iframe>, an include would have to block page loading. SSIs would be in every way superior. ",
        "Are the two answers equivalent?": "No."
    },
    {
        "ID": "9584",
        "Question": "I realized I have to write down a convention specification about HTML, JavaScript and PHP coding for me and my team. In web development, just like in C++, I'm definitely a fan of indentation and comments. Nonetheless, often in my work I encounter HTML+JavaScript+PHP code which suddenly brings up the headache. I'm trying to make my code readable, but what seems to be better to me (to indent & comment) seems not to fascinate my teammates, so I was wondering if there is a best or at least shared good practice when writing \"hybrid\" documents just like today's web pages, which day by day become more and more complex.  I'm aware of the fact that probably it is in the nature of today's web pages' code to be a little bit intricated, but I wonder if a good convention concerning these aspects already exists. ",
        "ChatGpt answer": "Creating a coding convention for your team that pertains to HTML, JavaScript, and PHP is a great idea to ensure consistency, readability, and maintainability across your web development projects. Here are some best practices and guidelines that you can consider incorporating into your convention specification:  ### General Guidelines  1. **Consistent Indentation**:    - Use two or four spaces (not tabs) for indentation. Be consistent across all files.    - Maintain a clear visual hierarchy in nested structures (HTML elements, PHP blocks, etc.).  2. **Commenting**:    - Use comments generously to explain the purpose of sections of code, especially complex logic.    - For HTML, use comments to segment sections (e.g., headers, footers, navigation).    - For JavaScript, explain the logic and flow of functions and complex calculations.    - For PHP, explain business logic and the purpose of data manipulation.  3. **File Organization**:    - Separate files logically (e.g., separate JavaScript, CSS, and PHP files rather than embedding them directly in HTML).    - In hybrid PHP/HTML documents, keep PHP code minimal and separate logical blocks of PHP from HTML using indentation or comments.  ### HTML Conventions  1. **Doctype and HTML Tags**:    - Always declare the doctype at the beginning of the HTML document (`<!DOCTYPE html>`).    - Use semantic HTML where possible (e.g., `<header>`, `<footer>`, `<main>`, `<article>`, etc.).  2. **Attribute Formatting**:    - Use quotes for attribute values (e.g., `<div class=\"container\">`).    - Keep attributes on a single line if they fit, or use separate lines for readability when there are many.  3. **Closing Tags**:    - Always use closing tags for elements that require them (e.g., `<div>...</div>`).  ### JavaScript Conventions  1. **Script Placement**:    - Place JavaScript at the end of the body for better performance, unless it\u2019s needed in the head for functionality like analytics.  2. **Variable Naming**:    - Use `camelCase` for variable and function names (e.g., `myVariable`, `getData`).    - Use meaningful names that describe the content or purpose.  3. **Commenting**:    - Use block comments to summarize file purpose and function comments to describe their logic.    - Inline comments should clarify complex code within a function.  4. **Code Structure**:    - Keep JavaScript functions short and focused.    - Use ES6 features (like let, const, arrow functions) if your target browsers support them.  ### PHP Conventions  1. **File Extensions**:    - Use `.php` for PHP files, with clear separation of logic (e.g., `functions.php`, `database.php`).  2. **Opening and Closing Tags**:    - Use `<?php` and `?>` only when necessary, and avoid closing tags in files with pure PHP code.  3. **Error Handling**:    - Implement error handling with appropriate error logging and user-friendly error messages.     4. **Separate Logic from Presentation**:    - Use templates or include files to keep HTML presentation separate from PHP logic.  ### Hybrid Document Practices  1. **Clear Separation**:    - Use comments to clearly separate PHP and HTML sections. Example:       ```php      <!-- Begin PHP Block -->      <?php      // Fetch data from database      ?>      <!-- End PHP Block -->       <!-- HTML output -->      <div>          <!-- Display data -->      </div>      ```  2. **Using Templating**:    - If feasible, consider using a templating engine (like Twig or Blade) to manage HTML and PHP separation cleanly.  3. **Consistent Styling and Structure**:    - Stick to consistent styles when mixing PHP and HTML. For example, when embedding PHP variables:      ```html      <p><?php echo htmlspecialchars($variable); ?></p>      ```  ### Conclusion  Creating a coding convention like this serves as a valuable resource for both current team members and future developers who join your project. Ensure everyone is on board with the guidelines and encourage team discussions to refine and adapt the conventions as needed for your specific situation and to keep team members engaged. Regular code reviews can also help enforce these conventions and promote better coding practices.",
        "Stack Overflow best answer": "Some general rules I follow: General  Indents are 4 spaces. Indent new levels Comments are < ~80 chars from the indent level. If I'm in two levels (8 spaces) that means the cursor stop will be around 88 characters.  Use multi-line comments. I prefer the look, however this is a subjective point. Comment now rather then later when you have no idea what's going on. Allman style braces. It's cleaner and is more readable. Subjective.  JavaScript  Use a library. jQuery in particular is very good. It eliminates all cross browser headaches. Understand that ID's are for particular elements, classes are for styles. ID's shouldn't be used more then once per page and they will have particular hooks attached to them. Use classes for things like navigation. Out source into methods. It's tempting to put all the code into the bind call, however putting it in it's own function will increase the flexibility of your code. Use functions instead of evals. That means setTimeout(function(){ /* Do something */ }, 1000); instead of setTimeout('doSomething', 1000); Use local variables with var.   HTML  Semantic markup. Use appropriate tags. Don't put <br />'s in there to add space, adjust margins and CSS rules. All tags are lowercase. All tags should end with a closing tag or be self closing. Make use of classes for layout that is similar. Have a couple of predefined classes like hide, clear, error, etc. Everything (scripts included) should go in <head>. Worry about optimizing (moving stuff around) when it presents a problem. External stylesheets and JavaScript source is a must unless it is page specific.  PHP  Frameworks are good, I recommend CodeIgniter. If you don't want to use a framework, try to use the latest version of PHP possible. (That means 5.3). Use includes to your advantage.  Clear injections or use prepared statements. Perform if checks on preconceived fail-secure values. $logged_in = false; if(check_user($user)) {      $logged_in = true;      $user = load_user($_SESSION); }  Know the difference between single and double quotes. Use single quotes when possible. Don't echo HTML.  ",
        "Are the two answers equivalent?": "No."
    },
    {
        "ID": "17979",
        "Question": "What I am looking for is the most optimal solution for storing content revisions in an MSSQL database. We have an application that allows users to make changes to small HTML content blocks similar to a wiki, but we need to have tight audit control over the changes. At any point in time, the manager might want to look at previously submitted contents or revert the entire HTML block back to the previous state. I had it setup in the past where we had a primary table that stored the HTML information (along with various other meta tags) and then an audit table that kept a copy of the entire data row everytime a change was made. What I am wondering is if this is the best way to go, or should I just keep 1 table with all the current records and the changes in it and just have a flag that lets me know which one is the current one? ",
        "ChatGpt answer": "When designing a database schema for storing content revisions with a strong emphasis on audit control, it's important to prioritize simplicity, clarity, and efficiency. Below are two common approaches, along with their pros and cons, to help you determine the best solution for your specific use case.  ### Option 1: Separate Primary and Audit Tables  **Schema Design:** - **Primary Table (e.g., `ContentBlocks`):** Stores the current version of the content. - **Audit Table (e.g., `ContentBlockAudit`):** Stores historical versions of content whenever a change is made, keeping a complete copy of every row.  ```sql -- Primary Table CREATE TABLE ContentBlocks (     Id INT PRIMARY KEY,     HtmlContent NVARCHAR(MAX),     LastModified DATETIME,     ModifiedBy NVARCHAR(255) );  -- Audit Table CREATE TABLE ContentBlockAudit (     AuditId INT PRIMARY KEY IDENTITY,     ContentBlockId INT,     HtmlContent NVARCHAR(MAX),     ModifiedAt DATETIME,     ModifiedBy NVARCHAR(255) ); ```  **Pros:** - **Clear Separation:** Offers a clear separation between current and historical data, making it easy to manage and query each independently. - **Simpler Queries:** Retrieving the current record is straightforward, and querying audit logs can be done on historical data without impacting current data. - **Audit Trail:** It provides an inherent audit trail that can include timestamps, user IDs, and reasons for changes, which enhances traceability.  **Cons:** - **Redundancy:** Involves storing redundant data since the current values are duplicated in the audit table. - **Potentially More Complex Operations:** Requires additional operations to manage and maintain both tables, particularly when inserting new audits.  ### Option 2: Single Table with Versioning Flag  **Schema Design:** - **Single Table (e.g., `ContentBlocks`):** Stores all versions of the content. An additional field (e.g., `IsCurrent`) indicates whether a record is the current version. Another field (e.g., `VersionNumber`) indicates the sequence of versions.  ```sql CREATE TABLE ContentBlocks (     Id INT PRIMARY KEY,     HtmlContent NVARCHAR(MAX),     IsCurrent BIT,     VersionNumber INT,     LastModified DATETIME,     ModifiedBy NVARCHAR(255) ); ```  **Pros:** - **Simplicity:** A single table for both current and historical data simplifies the schema and reduces the need for complex joins. - **Easier to Retrieve All Versions:** Queries to retrieve all versions, whether current or historical, are simple. - **Reduced Redundancy:** May lead to less storage overhead as values may not be repeated as much.  **Cons:** - **Complex Queries for Current Data:** Filtering to get only current records may complicate some queries. - **Potential for Data Integrity Issues:** If management of the `IsCurrent` flag is not handled correctly, it may lead to challenges ensuring only one record is current. - **Scalability Concerns:** As the number of revisions grows, the table may become unwieldy.  ### Recommendations  1. **For Strong Audit Control:** If compliance and a detailed audit trail are paramount (e.g., in regulated industries), Option 1 (Separate Primary and Audit Tables) is often the best choice due to its clarity and separation of concerns.  2. **For Simplicity and Flexibility:** If you're looking for a more straightforward implementation and manageable data volume, Option 2 (Single Table with Versioning Flag) can work well, especially if you use indexes effectively to help with performance.  3. **Hybrid Approach:** You might also consider a hybrid solution, where you keep a limited number of recent versions in the main table (versioned) and archive older revisions into an audit table or other storage.  Ultimately, the best approach depends on your specific requirements regarding audit trails, performance, scalability, and maintenance. Carefully consider how often content changes, how much historical data you need to retain, and how you plan to query that data.",
        "Stack Overflow best answer": "I have had decent success with doing a bit of both. One table that has the current version of the record and one table with every version (and a timestamp and an edited by) in another table. This gives you the advantage of having a complete copy of each version without the overhead of having to sort out the current version from all the others at runtime.  it also allows you to set much stricter permissions on the audit table and optionally implement the audit copy with triggers and completely hide the audit information from the rest of the app if you like that sort of thing. ",
        "Are the two answers equivalent?": "No."
    },
    {
        "ID": "23455",
        "Question": "It seems like most of the jobs I'm receiving, and most of the Internet, is still using standard HTML (HTML 4, let's say) + CSS + JS. Does anyone have any vision on where HTML5 is as a standard, particularly regarding acceptance and diffusion? It's easy to find information about inconsistencies between implementations of HTML5 and so forth. What I want to know about is relevance of HTML5. ",
        "ChatGpt answer": "HTML5 has grown significantly in relevance and acceptance since its official recommendation by the W3C in 2014. Its features have been widely adopted and are now integral to modern web development. Here are a few points to illustrate its current standing:  1. **Core Standard**: HTML5 is now the baseline for web development. Most browsers have excellent support for HTML5 features, which allows developers to create rich, interactive experiences without needing to rely extensively on third-party plugins like Flash.  2. **New Features**: HTML5 introduced several new elements and attributes, making it easier to create modern web interfaces. Features like `<video>` and `<audio>`, `<canvas>` for drawing graphics, and semantic elements like `<article>`, `<section>`, and `<header>` enhance both the functionality and accessibility of web pages.  3. **APIs**: HTML5 comes packed with various APIs, such as the Geolocation API, Web Storage API, and others, which allow developers to implement features that enhance user experience while improving performance and security.  4. **Mobile and Responsive Design**: HTML5 plays a crucial role in mobile-first and responsive design. Its semantics facilitate better adaptive layouts and improved page performance on mobile devices, catering to the significant mobile user base.  5. **Future Development**: The HTML Living Standard, maintained by WHATWG, continues to evolve HTML. New features are regularly added, meaning HTML5 is not static but is consistently being enhanced with feedback from developers and industry standards.  6. **General Acceptance**: Most modern web projects utilize HTML5, and job descriptions often specify HTML5 knowledge/experience. The industry has largely moved beyond HTML4. While legacy systems and applications may still use older standards, new projects are predominantly based on HTML5.  7. **Training and Resources**: There are ample resources, tutorials, and frameworks that focus specifically on HTML5 and its associated technologies (like CSS3 and modern JavaScript), reflecting its importance and relevance in the developer community.  In summary, HTML5 is not just relevant but is essential for current web development. While you may still encounter HTML4 in legacy systems, new developments\u2014particularly in dynamic web applications, mobile apps, and progressive web apps\u2014are firmly rooted in HTML5. As trends like Web Components and frameworks like React, Vue.js, and Angular evolve, they leverage HTML5 standards to provide robust solutions in web design and development.",
        "Stack Overflow best answer": "I'd say definitely get in there and start learning some of the technologies involved.  Just be aware that 'HTML 5' right now is actually really a marketing term! HTML 5 has not been ratified as a standard yet and although all of the major players are throwing their support behind 'HTML 5' they're all actually just implementing bits a pieces of various specs including ECMA script (Java script), CSS, HTML and a whole lot more that I'm not qualified to talk about. MS for example released IE9 beta to great fanfare in San Fran, highlighting their awesome HTML 5 support.  Naturally their IE/GPU enhanced lovely demos didn't quite work so nice on other 'HTML 5' browsers such as the latest Chrome of FF Beta or Opera. So, um yeah, don't delay in starting to investigate - MS is banking on it heavily (even though they have their Silverlight platform) and I bet you'll see Adobe hedging their bets in the next few years as well. For production websites that users will use tomorrow?  Um don't use 'HTML 5' yet. ",
        "Are the two answers equivalent?": "No."
    }
]
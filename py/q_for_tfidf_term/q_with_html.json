[
    {
        "ID": "1674",
        "Question": "i wonder apart from those very simple hello world apps, what other programs should i try developing for learning. i am entering uni next year and wonder what kind of programs will be developed in that environment.  this is not really a language specific thing, but if you want to know what i use currently mainly  windows: C#/WPF - i studied java/vb etc in poly but i think C# is the way to go, maybe even F# web: PHP/MySQL, Zend Framework/Doctrine, + HTML/CSS/JS(jQuery) of course. looking to try google app engine with python too.   for now, i am thinking of   todo lists apps that integrate with api eg. twitter/tumblr which i use text editor - i am currently trying to develop a text editor that uses markdown and generates html files for viewing (link to blog entry). not very pratical after i started developing it. cos when editing theres no formatting and in HTML format, i cannot edit directly  blog software (for web)  ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "apart": 0.11408025117696441,
                    "api": 0.09988245990801992,
                    "app": 0.08025831167246777,
                    "apps": 0.19253045662194546,
                    "blog": 0.19638588422112152,
                    "course": 0.07666842652486792,
                    "css": 0.1107659238747776,
                    "currently": 0.17949551646780165,
                    "develop": 0.08896962532755939,
                    "developed": 0.10125126784879268,
                    "developing": 0.1769346478355823,
                    "directly": 0.09860202559191023,
                    "edit": 0.07961305655978175,
                    "editing": 0.12167875845523812,
                    "editor": 0.2185912662496892,
                    "engine": 0.10859942674620521,
                    "entry": 0.12039832413912843,
                    "environment": 0.08404019023878645,
                    "files": 0.08680312819898701,
                    "format": 0.10664639086796214,
                    "formatting": 0.12304756639601089,
                    "framework": 0.07898812785823062,
                    "generates": 0.12304756639601089,
                    "google": 0.08591129958932747,
                    "hello": 0.1278321844481307,
                    "html": 0.27962070771822234,
                    "integrate": 0.12304756639601089,
                    "java": 0.0691322108077594,
                    "jquery": 0.10859942674620521,
                    "js": 0.11500320111995899,
                    "kind": 0.07779439366232295,
                    "know": 0.05129294020037658,
                    "language": 0.060173405065975225,
                    "learning": 0.07362965706809418,
                    "link": 0.1003283179057981,
                    "lists": 0.1092956331248446,
                    "looking": 0.07226867704059439,
                    "mainly": 0.11806152685819091,
                    "maybe": 0.08126733483477379,
                    "mysql": 0.12167875845523812,
                    "php": 0.08251329503980642,
                    "programs": 0.17499866915525278,
                    "python": 0.08384277720767773,
                    "really": 0.05571055608311674,
                    "simple": 0.07446892976375452,
                    "software": 0.05781675801256354,
                    "specific": 0.07534527992975776,
                    "started": 0.08196970361319342,
                    "studied": 0.12972312373129002,
                    "text": 0.1833833488804291,
                    "theres": 0.14347505700245633,
                    "thing": 0.06554619848691477,
                    "think": 0.050803971380898455,
                    "thinking": 0.0776501032377266,
                    "todo": 0.14790219068146102,
                    "try": 0.13959671867629042,
                    "trying": 0.07521769205639312,
                    "twitter": 0.12451785714594389,
                    "uni": 0.1318134601293572,
                    "use": 0.09195917227160648,
                    "uses": 0.08822086303492081,
                    "vb": 0.12167875845523812,
                    "viewing": 0.14347505700245633,
                    "want": 0.0555683343562891,
                    "way": 0.05271349600118546,
                    "web": 0.13590291937336527,
                    "windows": 0.08364730916416266,
                    "wonder": 0.20443851437791488,
                    "world": 0.07793974116904827,
                    "wpf": 0.1092956331248446,
                    "year": 0.09055766031585832,
                    "zend": 0.12972312373129002
                },
                "Max term": "html",
                "Max score": 0.27962070771822234
            }
        ],
        "Best answer": "Have a look at Project Euler.  There's nothing else like it for sharpening your foundational programming skills. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "euler": 0.7145725493895795,
                    "like": 0.2127163231481775,
                    "look": 0.3420071736885367,
                    "programming": 0.273061839286866,
                    "project": 0.28535390263222987,
                    "skills": 0.41373821777617514
                },
                "Max term": "euler",
                "Max score": 0.7145725493895795
            }
        ]
    },
    {
        "ID": "4142",
        "Question": "Often when stating a new project I'll require a \"quick 'n' dirty\" content management solution. Ideally something that can read my database schema and generated HTML forms. Previously I've used; phpMyEdit and phpMyAdmin but they are lacking is key areas. My wish list woulds be:  Database independent Foreign key aware Handles views as-well-as tables Generates modern HTML and CSS AJAX interface.  What's your swiss army knife when it comes to CMS on a project? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "ajax": 0.16601080728142034,
                    "areas": 0.1430759523881846,
                    "army": 0.1957482993754217,
                    "aware": 0.12894120913858717,
                    "cms": 0.17205090865428815,
                    "comes": 0.11905822382417004,
                    "content": 0.14816619378204124,
                    "css": 0.15112202552994233,
                    "database": 0.229862337176707,
                    "dirty": 0.16787832231975386,
                    "foreign": 0.1744061527763562,
                    "forms": 0.15444065360422593,
                    "generated": 0.15444065360422593,
                    "generates": 0.16787832231975386,
                    "handles": 0.1744061527763562,
                    "html": 0.25433121338090514,
                    "ideally": 0.15010046158368834,
                    "independent": 0.16426386363088666,
                    "interface": 0.13035378520235097,
                    "key": 0.25974937789313135,
                    "knife": 0.20178840074828952,
                    "lacking": 0.1957482993754217,
                    "list": 0.10861902239488035,
                    "management": 0.10797705795478234,
                    "modern": 0.14157177477573096,
                    "new": 0.07788938980234263,
                    "previously": 0.16107568511898823,
                    "project": 0.1563383345976969,
                    "quick": 0.1408499124818656,
                    "read": 0.09536083310303649,
                    "require": 0.12244616879114968,
                    "schema": 0.17698603081672026,
                    "solution": 0.11159151664364955,
                    "stating": 0.20178840074828952,
                    "tables": 0.159612181040567,
                    "used": 0.0819347048830172,
                    "views": 0.159612181040567,
                    "wish": 0.16426386363088666
                },
                "Max term": "key",
                "Max score": 0.25974937789313135
            }
        ],
        "Best answer": "I think you're looking for \"scaffolding\", where the software generates views that allow users to maintain the data without you having to do much or any work.  If you must stick with PHP, then look at CakePHP. http://book.cakephp.org/view/105/Scaffolding But two quick suggestions for you. Look at this site: http://www.phpscaffold.com/ Second suggestion: Consider switching to Python/Django or Ruby on Rails.  Both of those are better than what PHP has to offer in terms of scaffolding.  There may be something in PHP somewhere that's as good, but I have not seen it.  CakePHP is the closest I know of. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "allow": 0.10513821127403658,
                    "better": 0.06830558430437,
                    "book": 0.09410249714662196,
                    "cakephp": 0.4519826222344956,
                    "closest": 0.1482716498779876,
                    "com": 0.10228002916766735,
                    "consider": 0.09192227586640814,
                    "data": 0.08000083482364728,
                    "django": 0.14064158461678394,
                    "generates": 0.14064158461678394,
                    "good": 0.05760582678522142,
                    "http": 0.20960450933154104,
                    "know": 0.0586270870747491,
                    "look": 0.15697699489318048,
                    "looking": 0.08260205020582427,
                    "maintain": 0.10840931007386428,
                    "offer": 0.11860303621301069,
                    "org": 0.12189527874983934,
                    "php": 0.28293450019975724,
                    "python": 0.09583107891146436,
                    "quick": 0.11799828954005452,
                    "rails": 0.12574802081136013,
                    "ruby": 0.10840931007386428,
                    "scaffolding": 0.5071501796010028,
                    "second": 0.10480225466577052,
                    "seen": 0.09473537514224133,
                    "site": 0.09844594334437748,
                    "software": 0.06608371626076866,
                    "stick": 0.12335879661118253,
                    "suggestion": 0.14232210562971054,
                    "suggestions": 0.11799828954005452,
                    "switching": 0.1482716498779876,
                    "terms": 0.10028205094562914,
                    "think": 0.05806820280248095,
                    "users": 0.08941995090164938,
                    "view": 0.10840931007386428,
                    "views": 0.13371654991244172,
                    "work": 0.056077388592418585,
                    "www": 0.11799828954005452
                },
                "Max term": "scaffolding",
                "Max score": 0.5071501796010028
            }
        ]
    },
    {
        "ID": "7245",
        "Question": "I had a question posed to me the other day by another programmer.  I remember (a very long time ago) wondering the very same.  Why was a browser-side include tag never considered?  Or was it? Specifically with a tag that instructed the browser to include additional HTML from other sources. e.g. <include src=\"http://server/foo/bar.html\">.  Many folks will make javascript calls and fill innerHTML to accomplish the same, when the same outside a the javascript engine could be accomplished by the browser. It would have been painful to have nested <HTML>s <BODY>s (i.e.) but we have to consider that aspect anywhere anyway. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "accomplish": 0.14975439913399463,
                    "accomplished": 0.15900081756864198,
                    "additional": 0.12776760304639687,
                    "ago": 0.11263784695134647,
                    "aspect": 0.1387412434488856,
                    "bar": 0.14079887548689954,
                    "body": 0.15487837568897903,
                    "browser": 0.3872001229712894,
                    "calls": 0.12479083136360965,
                    "consider": 0.10003205554634179,
                    "considered": 0.12316316754880009,
                    "day": 0.1008686539252152,
                    "engine": 0.13507864013024753,
                    "folks": 0.1468478331563788,
                    "foo": 0.13974861959392862,
                    "html": 0.34779911904235455,
                    "http": 0.11404836163264874,
                    "include": 0.34779911904235455,
                    "javascript": 0.23265576944772912,
                    "long": 0.08462961945336832,
                    "make": 0.0659767863918302,
                    "nested": 0.16395282625889498,
                    "outside": 0.11928425352105512,
                    "painful": 0.1568536126964448,
                    "programmer": 0.08397731833679653,
                    "question": 0.07278456627305065,
                    "remember": 0.11404836163264874,
                    "server": 0.10003205554634179,
                    "sources": 0.143043812323367,
                    "specifically": 0.11883960565840065,
                    "src": 0.17015458496594915,
                    "tag": 0.3137072253928896,
                    "time": 0.05777725010092114,
                    "wondering": 0.11441395778203121
                },
                "Max term": "browser",
                "Max score": 0.3872001229712894
            }
        ],
        "Best answer": " Why was a browser-side include tag never considered? Or was it?  It was certainly requested by every newbie web author who hadn't worked out Server Side Includes yet, back in the early days on the www-html list. But in those days W3 were happy to completely ignore web author pressure. If cross-site inclusion were allowed it would be a security disaster. You could pull in a page from the user's bank and read content from it. (Originally, DOM scripting was limited, but you could still have read from document.links, document.images, scripting functions dropped by the target page, etc. Since then you can do what you like with imported content.) If cross-site inclusion weren't allowed... well then the feature wouldn't have any advantage over server-side includes. It'd be more, slower work for the client to do that the server could have dealt with better. Unlike <iframe>, an include would have to block page loading. SSIs would be in every way superior. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "advantage": 0.0950666652114497,
                    "allowed": 0.19402146884219965,
                    "author": 0.20463785308690421,
                    "bank": 0.12064600265240683,
                    "better": 0.05557903828507036,
                    "block": 0.09753053193896372,
                    "browser": 0.09650517973809031,
                    "certainly": 0.09170254229874755,
                    "client": 0.07853241491094476,
                    "completely": 0.08668493242813528,
                    "considered": 0.09209101120784624,
                    "content": 0.20200078984240846,
                    "cross": 0.19202621626647678,
                    "days": 0.158997375189193,
                    "dealt": 0.1334356713728854,
                    "disaster": 0.12476335633783098,
                    "document": 0.1901333304228994,
                    "dropped": 0.12476335633783098,
                    "early": 0.09058392153380392,
                    "feature": 0.07797604336398484,
                    "functions": 0.08250909504355101,
                    "happy": 0.0924878349242589,
                    "html": 0.08668493242813528,
                    "ignore": 0.10301529566366247,
                    "images": 0.12476335633783098,
                    "imported": 0.13007154846018326,
                    "include": 0.17336986485627057,
                    "includes": 0.20898442203845224,
                    "inclusion": 0.2751060501166191,
                    "like": 0.03972157258978892,
                    "limited": 0.09416640902626157,
                    "links": 0.10609770941526814,
                    "list": 0.07404228912012283,
                    "loading": 0.11443755434486644,
                    "newbie": 0.1334356713728854,
                    "originally": 0.10301529566366247,
                    "page": 0.25747969228998985,
                    "pressure": 0.11316452605428053,
                    "pull": 0.11580496438414102,
                    "read": 0.13000916818569358,
                    "requested": 0.11728187973970468,
                    "scripting": 0.2157126678638565,
                    "security": 0.0872801966836643,
                    "server": 0.22438655967853452,
                    "site": 0.16020742403039426,
                    "slower": 0.11197368761735241,
                    "superior": 0.11888737813574671,
                    "tag": 0.11728187973970468,
                    "target": 0.10231892654345211,
                    "unlike": 0.11888737813574671,
                    "user": 0.06641378710953043,
                    "way": 0.04902497253727991,
                    "web": 0.1263933792185888,
                    "work": 0.04562917306463039,
                    "worked": 0.07433990188886068,
                    "www": 0.09601310813323839
                },
                "Max term": "inclusion",
                "Max score": 0.2751060501166191
            }
        ]
    },
    {
        "ID": "9584",
        "Question": "I realized I have to write down a convention specification about HTML, JavaScript and PHP coding for me and my team. In web development, just like in C++, I'm definitely a fan of indentation and comments. Nonetheless, often in my work I encounter HTML+JavaScript+PHP code which suddenly brings up the headache. I'm trying to make my code readable, but what seems to be better to me (to indent & comment) seems not to fascinate my teammates, so I was wondering if there is a best or at least shared good practice when writing \"hybrid\" documents just like today's web pages, which day by day become more and more complex.  I'm aware of the fact that probably it is in the nature of today's web pages' code to be a little bit intricated, but I wonder if a good convention concerning these aspects already exists. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "aspects": 0.12648625993736395,
                    "aware": 0.10865583705515866,
                    "best": 0.07186771217402914,
                    "better": 0.06870659144971254,
                    "bit": 0.0889457874268629,
                    "brings": 0.1515453711166457,
                    "code": 0.1476526820298736,
                    "coding": 0.08451713029077654,
                    "comment": 0.10944245935060323,
                    "comments": 0.10379913186766487,
                    "complex": 0.10443277777955899,
                    "convention": 0.26666316292541375,
                    "day": 0.186470437160932,
                    "definitely": 0.11025718117036495,
                    "development": 0.06897653289582752,
                    "documents": 0.13115757665967537,
                    "encounter": 0.1357348322755817,
                    "exists": 0.13115757665967537,
                    "fact": 0.09639368221514365,
                    "fan": 0.14315764758252358,
                    "good": 0.11588803598893743,
                    "headache": 0.17004251579308127,
                    "html": 0.2143191541616035,
                    "hybrid": 0.17004251579308127,
                    "indent": 0.15727779943936532,
                    "indentation": 0.14696811550073938,
                    "javascript": 0.21504908288503516,
                    "like": 0.09820730778638993,
                    "little": 0.08618688426953966,
                    "make": 0.06098386229124927,
                    "nature": 0.13333158146270688,
                    "nonetheless": 0.1649526591448349,
                    "pages": 0.2529725198747279,
                    "php": 0.18973036451047187,
                    "practice": 0.1000608849680311,
                    "probably": 0.07958885485644654,
                    "readable": 0.1256567217572373,
                    "realized": 0.14696811550073938,
                    "shared": 0.13115757665967537,
                    "specification": 0.12734710874145957,
                    "suddenly": 0.13842143811095325,
                    "team": 0.08013587833832003,
                    "teammates": 0.1649526591448349,
                    "today": 0.21360072085765047,
                    "trying": 0.0864774587211138,
                    "web": 0.2343705073676908,
                    "wonder": 0.11752104262164287,
                    "wondering": 0.10575545471611815,
                    "work": 0.056406606675342905,
                    "write": 0.07163769557632473,
                    "writing": 0.08115484713509166
                },
                "Max term": "convention",
                "Max score": 0.26666316292541375
            }
        ],
        "Best answer": "Some general rules I follow: General  Indents are 4 spaces. Indent new levels Comments are < ~80 chars from the indent level. If I'm in two levels (8 spaces) that means the cursor stop will be around 88 characters.  Use multi-line comments. I prefer the look, however this is a subjective point. Comment now rather then later when you have no idea what's going on. Allman style braces. It's cleaner and is more readable. Subjective.  JavaScript  Use a library. jQuery in particular is very good. It eliminates all cross browser headaches. Understand that ID's are for particular elements, classes are for styles. ID's shouldn't be used more then once per page and they will have particular hooks attached to them. Use classes for things like navigation. Out source into methods. It's tempting to put all the code into the bind call, however putting it in it's own function will increase the flexibility of your code. Use functions instead of evals. That means setTimeout(function(){ /* Do something */ }, 1000); instead of setTimeout('doSomething', 1000); Use local variables with var.   HTML  Semantic markup. Use appropriate tags. Don't put <br />'s in there to add space, adjust margins and CSS rules. All tags are lowercase. All tags should end with a closing tag or be self closing. Make use of classes for layout that is similar. Have a couple of predefined classes like hide, clear, error, etc. Everything (scripts included) should go in <head>. Worry about optimizing (moving stuff around) when it presents a problem. External stylesheets and JavaScript source is a must unless it is page specific.  PHP  Frameworks are good, I recommend CodeIgniter. If you don't want to use a framework, try to use the latest version of PHP possible. (That means 5.3). Use includes to your advantage.  Clear injections or use prepared statements. Perform if checks on preconceived fail-secure values. $logged_in = false; if(check_user($user)) {      $logged_in = true;      $user = load_user($_SESSION); }  Know the difference between single and double quotes. Use single quotes when possible. Don't echo HTML.  ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "1000": 0.16949811257692804,
                    "80": 0.06808265434070146,
                    "add": 0.04863379044991211,
                    "adjust": 0.07641585531458274,
                    "advantage": 0.06194137193367863,
                    "appropriate": 0.06026111644541225,
                    "attached": 0.07641585531458274,
                    "bind": 0.08694097485532248,
                    "braces": 0.07641585531458274,
                    "browser": 0.06287864645707188,
                    "characters": 0.06912872840953485,
                    "checks": 0.07154124523388916,
                    "classes": 0.21818178193276236,
                    "cleaner": 0.0786077738814412,
                    "clear": 0.10662261952107167,
                    "closing": 0.1792473327383152,
                    "code": 0.05188182751839815,
                    "codeigniter": 0.08694097485532248,
                    "comment": 0.05768342357034012,
                    "comments": 0.10941803254941383,
                    "couple": 0.0540676766128953,
                    "cross": 0.06255803365103368,
                    "css": 0.06712035948003654,
                    "cursor": 0.08289581554639933,
                    "difference": 0.055042989631540126,
                    "dosomething": 0.08694097485532248,
                    "double": 0.06859431741929353,
                    "echo": 0.07641585531458274,
                    "elements": 0.06622941359863675,
                    "end": 0.04340028005400525,
                    "error": 0.052738712604617675,
                    "external": 0.06425411832884127,
                    "fail": 0.05950156277587848,
                    "false": 0.06968800449182447,
                    "flexibility": 0.07295726442139502,
                    "follow": 0.052599725302651466,
                    "framework": 0.04786410252392411,
                    "frameworks": 0.05706676185298506,
                    "function": 0.10283250478587778,
                    "functions": 0.05375939644707664,
                    "general": 0.09481385398693089,
                    "going": 0.03957759002704984,
                    "good": 0.06108066929736673,
                    "head": 0.060525352746172774,
                    "headaches": 0.08694097485532248,
                    "hide": 0.07456261457251803,
                    "hooks": 0.08694097485532248,
                    "html": 0.11296038687449923,
                    "id": 0.14591452884279005,
                    "idea": 0.043529552995474195,
                    "included": 0.0675918813937248,
                    "includes": 0.06808265434070146,
                    "increase": 0.06500575479840519,
                    "indent": 0.16579163109279865,
                    "instead": 0.09194197378765905,
                    "javascript": 0.11334510764904782,
                    "jquery": 0.0658075363572263,
                    "know": 0.031081766527126402,
                    "later": 0.05345882409862075,
                    "latest": 0.06320804426000788,
                    "layout": 0.07641585531458274,
                    "level": 0.04542619547319536,
                    "levels": 0.14591452884279005,
                    "library": 0.0521921517722915,
                    "like": 0.051761754682405785,
                    "line": 0.05104630727426643,
                    "local": 0.061071913578498956,
                    "look": 0.041611502027884356,
                    "make": 0.03214253389748989,
                    "markup": 0.07987444620777046,
                    "means": 0.13743839063507873,
                    "methods": 0.05166936211472867,
                    "moving": 0.06389521801362799,
                    "multi": 0.06622941359863675,
                    "navigation": 0.08474905628846402,
                    "new": 0.034594320879970566,
                    "optimizing": 0.08694097485532248,
                    "page": 0.11184183470992,
                    "particular": 0.14415586283688342,
                    "perform": 0.0658075363572263,
                    "php": 0.10000046641086609,
                    "point": 0.04101702162257757,
                    "possible": 0.0868005601080105,
                    "predefined": 0.0896236663691576,
                    "prefer": 0.05667255382452391,
                    "prepared": 0.07295726442139502,
                    "problem": 0.03867662419697744,
                    "putting": 0.07154124523388916,
                    "quotes": 0.1792473327383152,
                    "readable": 0.06622941359863675,
                    "recommend": 0.05667255382452391,
                    "rules": 0.1205222328908245,
                    "scripts": 0.07089123462491498,
                    "secure": 0.07222841898750929,
                    "self": 0.060002563088609955,
                    "semantic": 0.08289581554639933,
                    "similar": 0.04714074045055291,
                    "single": 0.09535828182157853,
                    "source": 0.08140947474177371,
                    "space": 0.06425411832884127,
                    "spaces": 0.1572155477628824,
                    "specific": 0.045656661336807514,
                    "statements": 0.06859431741929353,
                    "stop": 0.05878715850615526,
                    "stuff": 0.04629375172130363,
                    "style": 0.05538650636471869,
                    "styles": 0.07373316380074763,
                    "subjective": 0.14591452884279005,
                    "tag": 0.07641585531458274,
                    "tags": 0.2323857881502484,
                    "tempting": 0.08474905628846402,
                    "things": 0.034410302985478966,
                    "true": 0.055562017039746704,
                    "try": 0.04229541727281945,
                    "understand": 0.04271310630038515,
                    "unless": 0.05375939644707664,
                    "use": 0.33434466943108293,
                    "used": 0.03639103450574905,
                    "user": 0.08654476476534953,
                    "values": 0.060525352746172774,
                    "var": 0.07295726442139502,
                    "variables": 0.05974945336682017,
                    "version": 0.04786410252392411,
                    "want": 0.033672509082464226,
                    "worry": 0.06079552743565357
                },
                "Max term": "use",
                "Max score": 0.33434466943108293
            }
        ]
    },
    {
        "ID": "17979",
        "Question": "What I am looking for is the most optimal solution for storing content revisions in an MSSQL database. We have an application that allows users to make changes to small HTML content blocks similar to a wiki, but we need to have tight audit control over the changes. At any point in time, the manager might want to look at previously submitted contents or revert the entire HTML block back to the previous state. I had it setup in the past where we had a primary table that stored the HTML information (along with various other meta tags) and then an audit table that kept a copy of the entire data row everytime a change was made. What I am wondering is if this is the best way to go, or should I just keep 1 table with all the current records and the changes in it and just have a flag that lets me know which one is the current one? ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "allows": 0.10413909239310658,
                    "application": 0.07391030166222459,
                    "best": 0.06710120568398317,
                    "block": 0.1125704682898617,
                    "blocks": 0.1292408664305905,
                    "change": 0.07711085645943712,
                    "changes": 0.25845842489019544,
                    "content": 0.23315082011151667,
                    "contents": 0.14149437640549156,
                    "control": 0.08462488087613539,
                    "copy": 0.10373342365419622,
                    "current": 0.18000106310027372,
                    "data": 0.07513342999336302,
                    "database": 0.0904264850461371,
                    "entire": 0.21737514500371657,
                    "everytime": 0.15876472872301564,
                    "flag": 0.13925051720604442,
                    "html": 0.3001571890292888,
                    "information": 0.08798989181764628,
                    "kept": 0.12245876850987372,
                    "know": 0.05506010221212638,
                    "lets": 0.11890102353931914,
                    "look": 0.07371310613429406,
                    "looking": 0.07757638242311297,
                    "make": 0.056939209044247034,
                    "manager": 0.09720858296685386,
                    "meta": 0.13366295468553172,
                    "need": 0.05813288585166102,
                    "optimal": 0.14684661095304546,
                    "past": 0.10181347890954576,
                    "point": 0.07266000795048487,
                    "previous": 0.10497437454286067,
                    "previously": 0.126732445259279,
                    "primary": 0.11515508619668935,
                    "records": 0.13536762141804104,
                    "revert": 0.15876472872301564,
                    "revisions": 0.15876472872301564,
                    "row": 0.14400279757680307,
                    "setup": 0.1125704682898617,
                    "similar": 0.08350793013316969,
                    "small": 0.08047068250381745,
                    "solution": 0.08779888636819519,
                    "state": 0.10181347890954576,
                    "stored": 0.11657541005575833,
                    "storing": 0.13925051720604442,
                    "submitted": 0.1372206996560863,
                    "table": 0.3475602297032095,
                    "tags": 0.1372206996560863,
                    "tight": 0.13925051720604442,
                    "time": 0.04986285482230552,
                    "users": 0.08397946891290621,
                    "various": 0.09523261365003001,
                    "want": 0.05964949869246196,
                    "way": 0.05658498940488652,
                    "wiki": 0.11890102353931914,
                    "wondering": 0.09874140005911879
                },
                "Max term": "table",
                "Max score": 0.3475602297032095
            }
        ],
        "Best answer": "I have had decent success with doing a bit of both. One table that has the current version of the record and one table with every version (and a timestamp and an edited by) in another table. This gives you the advantage of having a complete copy of each version without the overhead of having to sort out the current version from all the others at runtime.  it also allows you to set much stricter permissions on the audit table and optionally implement the audit copy with triggers and completely hide the audit information from the rest of the app if you like that sort of thing. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "advantage": 0.12721733419691728,
                    "allows": 0.12073910145503855,
                    "app": 0.09988576261361909,
                    "bit": 0.09628442457680604,
                    "complete": 0.11041290966811408,
                    "completely": 0.11600097672532117,
                    "copy": 0.24053753638612577,
                    "current": 0.20869364347482405,
                    "decent": 0.13272713890754287,
                    "edited": 0.16144736753745814,
                    "gives": 0.12376636730170769,
                    "hide": 0.15313927929824298,
                    "implement": 0.10979558377251063,
                    "information": 0.10201568144156303,
                    "like": 0.0531550419249762,
                    "optionally": 0.1840721889183542,
                    "overhead": 0.14197897576598664,
                    "permissions": 0.17406054596702852,
                    "record": 0.13692224339410675,
                    "rest": 0.1176206884038166,
                    "runtime": 0.13432070791586204,
                    "set": 0.09576090497294143,
                    "sort": 0.21068920788506088,
                    "success": 0.13692224339410675,
                    "table": 0.5372828316634481,
                    "thing": 0.08157575067125526,
                    "timestamp": 0.1702542959685134,
                    "triggers": 0.1702542959685134,
                    "version": 0.39321980361308645
                },
                "Max term": "table",
                "Max score": 0.5372828316634481
            }
        ]
    },
    {
        "ID": "23455",
        "Question": "It seems like most of the jobs I'm receiving, and most of the Internet, is still using standard HTML (HTML 4, let's say) + CSS + JS. Does anyone have any vision on where HTML5 is as a standard, particularly regarding acceptance and diffusion? It's easy to find information about inconsistencies between implementations of HTML5 and so forth. What I want to know about is relevance of HTML5. ",
        "TF-IDF scores": [
            {
                "Scores": {
                    "acceptance": 0.18324180256389297,
                    "css": 0.17028277556491073,
                    "easy": 0.11786397847056412,
                    "forth": 0.19651909552040484,
                    "html": 0.28657784843355794,
                    "html5": 0.6079187821251775,
                    "implementations": 0.18509086631148494,
                    "information": 0.12601374281198077,
                    "internet": 0.15222509329343062,
                    "jobs": 0.15423682521776225,
                    "js": 0.1767968306543011,
                    "know": 0.07885371167110349,
                    "let": 0.1226358028500613,
                    "like": 0.0656591779581547,
                    "particularly": 0.1556556955029798,
                    "receiving": 0.2205672112511064,
                    "regarding": 0.1727240950252841,
                    "relevance": 0.2205672112511064,
                    "say": 0.09901553024115747,
                    "standard": 0.2565903911644173,
                    "using": 0.08608704490496491,
                    "vision": 0.19386523017660537,
                    "want": 0.08542636468599485
                },
                "Max term": "html5",
                "Max score": 0.6079187821251775
            }
        ],
        "Best answer": "I'd say definitely get in there and start learning some of the technologies involved.  Just be aware that 'HTML 5' right now is actually really a marketing term! HTML 5 has not been ratified as a standard yet and although all of the major players are throwing their support behind 'HTML 5' they're all actually just implementing bits a pieces of various specs including ECMA script (Java script), CSS, HTML and a whole lot more that I'm not qualified to talk about. MS for example released IE9 beta to great fanfare in San Fran, highlighting their awesome HTML 5 support.  Naturally their IE/GPU enhanced lovely demos didn't quite work so nice on other 'HTML 5' browsers such as the latest Chrome of FF Beta or Opera. So, um yeah, don't delay in starting to investigate - MS is banking on it heavily (even though they have their Silverlight platform) and I bet you'll see Adobe hedging their bets in the next few years as well. For production websites that users will use tomorrow?  Um don't use 'HTML 5' yet. ",
        "Best answer TF-IDF scores": [
            {
                "Scores": {
                    "actually": 0.12071610523942555,
                    "aware": 0.08317970088982211,
                    "awesome": 0.1020698138803613,
                    "banking": 0.13017326989107056,
                    "bet": 0.11098967673169602,
                    "beta": 0.20981532801701974,
                    "bits": 0.09888617702703674,
                    "browsers": 0.10490766400850987,
                    "chrome": 0.11806977018641128,
                    "css": 0.09748849856009967,
                    "definitely": 0.08440558371521435,
                    "delay": 0.11601308298164002,
                    "demos": 0.11601308298164002,
                    "enhanced": 0.13017326989107056,
                    "example": 0.05438000677958424,
                    "great": 0.06665498078203284,
                    "heavily": 0.10390958327698074,
                    "highlighting": 0.11417331358502057,
                    "html": 0.5742398445814945,
                    "ie9": 0.13017326989107056,
                    "implementing": 0.09498972042564603,
                    "including": 0.08606985757431132,
                    "investigate": 0.11806977018641128,
                    "involved": 0.07994680685573496,
                    "java": 0.060845386360953074,
                    "latest": 0.09180608357232148,
                    "learning": 0.0648037272291288,
                    "lot": 0.0540979059914066,
                    "lovely": 0.12627681328967985,
                    "major": 0.08231365601613821,
                    "marketing": 0.10596627048175201,
                    "ms": 0.1923889008421452,
                    "naturally": 0.1020698138803613,
                    "nice": 0.08019449411502261,
                    "opera": 0.12627681328967985,
                    "pieces": 0.10390958327698074,
                    "platform": 0.07786281447104275,
                    "players": 0.11806977018641128,
                    "production": 0.08678267732237747,
                    "qualified": 0.11417331358502057,
                    "quite": 0.06993076380698278,
                    "really": 0.04903257496981883,
                    "released": 0.09332544656654909,
                    "right": 0.06186285816499277,
                    "say": 0.056687326979016565,
                    "script": 0.19777235405407348,
                    "silverlight": 0.1020698138803613,
                    "specs": 0.10296547989601065,
                    "standard": 0.07345021214442295,
                    "start": 0.059962079665627145,
                    "starting": 0.08070066459919131,
                    "support": 0.13877008509878083,
                    "talk": 0.08095936057524665,
                    "technologies": 0.08317970088982211,
                    "term": 0.08288622072098675,
                    "throwing": 0.10959199826475895,
                    "tomorrow": 0.12309317643635528,
                    "use": 0.080936097673175,
                    "users": 0.06885586087058737,
                    "various": 0.07808246087659072,
                    "websites": 0.09558169776062217,
                    "work": 0.043181156195806134,
                    "yeah": 0.11250903972592363,
                    "years": 0.06341399852741045
                },
                "Max term": "html",
                "Max score": 0.5742398445814945
            }
        ]
    }
]
[
    {
        "ID": "6510",
        "Question": "What is a recommended setup in terms of source control, builds, testing, bug tracking, and deployment for a downloadable PHP application (a la Wordpress, phpBB, Magento, etc.)? As a developer working on the application, what would you expect? What about as a user of the application? Please describe a setup and workflow, as well as any resources you think might be relevant or helpful. "
    },
    {
        "ID": "8157",
        "Question": "I work at a company where we have a lot of different skillsets in the development team.  We do all of the following (generally geared towards web):  .NET (MVC, Umbraco, ASP.NET, Surface) Java (Spring, Hibernate, Android)  PHP (Zend, Code igniter)  Actionscript 3 AIR Objective-C Html/Javascript (obviously)  We're trying to streamline our development process. We currently have a TeamCity server that builds and deploys .NET projects with msbuild/msdeploy/nant. What I want is something like maven that will give us a standard project template structure that works for most projects to allow people from different teams to move between projects easily. Currently this works on one platform because we tend to do things in a standard way for that platform (as long as certain people have been involved) however I want to use something like maven to standardise how a project is laid out and built. Has anyone tried anything like this before? Experiences? Books? "
    },
    {
        "ID": "8416",
        "Question": "I have a Java class that handles import and export of data. It started out as a simple private void export() { } private void import() { }  Of course, I wrote the export first, committed it, and then went on to write the import. But import is a keyword in Java - I can't use that as a function name. So I go back and rename both methods. I usually end up with  private void doExport() { } private void doImport() { }  which is both ugly and feels contrived. What do you think of these names? Got any better suggestions? Note: I'm asking now, because it's now happened thrice and that keyword is getting quite annoying. "
    },
    {
        "ID": "8789",
        "Question": "I was browsing through this talk about \"Historically Bad Ideas\" over the history of Computer Science, and found an interesting presentation about the rise & fall of the Java Enterprise initiatives. Slide #16 grabbed my attention by suggesting that Container Managed Persistence is a \"na√Øve ORM solution\". Of course, I assume  the presenter made a live in-depth analysis of the problem, which is missing in the slide. So I was left intrigued by that statement. Is CMP Entity Beans just a heavy piece of naive engineering? Aside any bias from the author(s) of the presentation, what would constitute a more adequate ORM solution in the domain of languages like Java or C#? I'm not asking for specific tools or frameworks, but better approaches. "
    },
    {
        "ID": "8956",
        "Question": "If you are a solo developer, or have a leading role in a software company, you might have to decide how much your software will cost one or another day...  What is your experience with calculating how much your software costs for your customer? Why does this method it work for you? "
    },
    {
        "ID": "8986",
        "Question": "This isn't about the typical naming conventions, where to place your comments, should we use regions, etc.  This is about a coding standard that discusses specifics on how a programmer should design his applications. Stuff like: (on a .NET app and not in the exact wordings)  Make as few classes possible Classes should do as much as their real world counterparts can Modification is better than extension One DLL per category (One library for email functions, one library for File related functions)  Everyone's had their experience with bad code and possibly bad design, but what if you were placed in a team (leaving is not an option) where they had design standards that just don't feel right.  I'm unsure how to respond professionally when I feel like I'm dying inside whenever I'm asked to code this way. "
    },
    {
        "ID": "8988",
        "Question": "I don't know if it's just with me, but when I start refactoring some code I waste a lot time doing that and it never ends. Every time I read the code again, I find something that can be improved, code refactoring is like my brain into a infinite loop and the end conditional is reached randomly with no satisfaction. So, how much time should I dedicate to refactoring my code? "
    }
]
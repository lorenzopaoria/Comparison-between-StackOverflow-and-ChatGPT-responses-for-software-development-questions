[
    {
        "ID": "16",
        "Question": "I have read a few articles on Internet about programming language choice in the enterprise. Recently many dynamic typed languages have been popular, i.e. Ruby, Python, PHP and Erlang. But many enterprises still stay with static typed languages like C, C++, C# and Java. And yes, one of the benefits of static typed languages is that programming errors are caught earlier, at compile time, rather than at run time. But there are also advantages with dynamic typed languages. (more on Wikipedia) The main reason why enterprises don't start to use languages like Erlang, Ruby and Python, seem to be the fact that they are dynamic typed. That also seem to be the main reason why people on StackOverflow decide against Erlang. See Why did you decide \"against\" Erlang. However, there seem to be a strong criticism against dynamic typing in the enterprises, but I don't really get it why it is that strong. Really, why is there so much criticism against dynamic typing in the enterprises? Does it really affect the cost of projects that much, or what? But maybe I'm wrong. ",
        "Best answer": "Yes, I believe that they do. There are a few reasons that need to be considered in the selection of a language for a new project:  Run-time speed. Compared to C/C++/Fortran, Perl and Python are so slow it's funny. Initialization speed. Compared to the above fast languages, Java falls over and cries as the JVM keeps loading and loading and...while(1).... Prototype-ability. Exhaustively going through and doing the declaration/definition work required for C++ or Java increases the LOC, which is the only known metric that reliably correlates with bugcounts. It also takes a lot of time. It also requires a bit more thinking about types and connections. Internal fiddlability. Dynamically messing around with your internals is great until you begin to debug your self-modifying code. (Python, Lisp, Perl) Correctness verification. A compiler can provide a quick once-over pass of semi-correctness of your code in C++, and this can be really nice.  Static analysis details. C and Java have pretty good static analysis. Perl is not completely statically analyzable at a theoretical level (Possibly Python too). I'm reasonably sure Lisp isn't either.  Weird platforms only take C, in general.  Support chain. If you can have a contract that you will get your bugs looked at and worked on, that's huge.   If you can presume that the organization you are working with has a principle of \"Going forward\"(There's an accounting term for this), and won't just randomly decide to not work on the software, then you have a much better case for using the software. Since there's no Major Business selling (carrying implication of taking responsibility of maintaining it) Python/Perl/$dynamic_language, it considerably reduces risk.  In my experience, open source maintainers often have an issue with fully taking responsibility for bugfixes and releasing updates. \"It's free, YOU work on it!\" is not an answer that is acceptable to most businesses (not their core compentencies, among other things).  Of course, I'm not talking about the webapp/startup world, which tends to play by high risk/high reward rules and be very open to staying on the frothing edge of tech. "
    },
    {
        "ID": "192",
        "Question": "If I have some code that has 80% test coverage (all tests pass), is it fair to say that it's of higher quality than code with no test coverage?   Or is it fair to say it's more maintainable? ",
        "Best answer": "In a strict sense, it is not fair to make any claims until the quality of the test suite is established. Passing 100% of the tests isn't meaningful if most of the tests are trivial or repetitive with each other. The question is: In the history of the project, did any of those tests uncover bugs? The goal of a test is to find bugs. And if they didn't, they failed as tests. Instead of improving code quality, they might only be giving you a false sense of security. To improve you test designs, you can use (1) whitebox techniques, (2) blackbox techniques, and (3) mutation testing. (1) Here are some good whitebox techniques to apply to your test designs. A whitebox test is constructed with specific source code in mind. One important aspect of whitebox testing is code coverage:  Is every function called? [Functional coverage] Is every statement executed? [Statement coverage-- Both functional coverage and statement coverage are very basic, but better than nothing] For every decision (like if or while), do you have a test that forces it to be true, and other that forces it to be false? [Decision coverage] For every condition that is a conjunction (uses &&) or disjunction (uses ||), does each subexpression have a test where it is true/false? [Condition coverage] Loop coverage: Do you have a test that forces 0 iterations, 1 iteration, 2 iterations? Is each break from a loop covered?  (2) Blackbox techniques are used when the requirements are available, but the code itself is not. These can lead to high-quality tests:  Do your blackbox tests cover multiple testing goals? You'll want your tests to be \"fat\": Not only do they test feature X, but they also test Y and Z. The interaction of different features is a great way to find bugs. The only case you don't want \"fat\" tests is when you are testing an error condition. For example, testing for invalid user input. If you tried to achieve multiple invalid input testing goals (for example, an invalid zip code and an invalid street address) it's likely that one case is masking the other. Consider the input types and form an \"equivalence class\" for the types of inputs. For example, if your code tests to see if a triangle is equilateral, the test that uses a triangle with sides (1, 1, 1) will probably find the same kinds of errors that the test data (2, 2, 2) and (3, 3, 3) will find. It's better to spend your time thinking of other classes of input. For example, if your program handles taxes, you'll want a test for each tax bracket. [This is called equivalence partitioning.] Special cases are often associated with defects. Your test data should also have boundary values, such as those on, above, or below the edges of an equivalence task. For example, in testing a sorting algorithm, you'll want to test with an empty array, a single element array, an array with two elements, and then a very large array. You should consider boundary cases not just for input, but for output as well. [This is call boundary-value analysis.] Another technique is \"Error guessing.\" Do you have the feeling if you try some special combination that you can get your program to break? Then just try it! Remember: Your goal is to find bugs, not to confirm that the program is valid. Some people have the knack for error guessing.  (3) Finally, suppose you already have lots of nice tests for whitebox coverage, and applied blackbox techniques. What else can you do? It's time to Test your Tests. One technique you can use is Mutation Testing. Under mutation testing, you make a modification to (a copy of) your program, in the hopes of creating a bug. A mutation might be:  Change a reference of one variable to another variable;   Insert the abs() function;   Change less-than to greater-than;   Delete a statement;   Replace a variable with a constant;   Delete an overriding method;   Delete a reference to a super method;   Change argument order  Create several dozen mutants, in various places in your program [the program will still need to compile in order to test]. If your tests do not find these bugs, then you now need to write a test that can find the bug in the mutated version of your program. Once a test finds the bug, you have killed the mutant and can try another.  Addendum: I forgot to mention this effect: Bugs tend to cluster. What that means is that the more bugs you find in one module, the higher the probability that you'll find more bugs. So, if you have a test that fails (which is to say, the test is successful, since the goal is to find bugs), not only should you fix the bug, but you should also write more tests for the module, using the techniques above. So long as you are finding bugs at a steady rate, testing efforts must continue. Only when there is a decline in the rate of new bugs found should you have confidence that you've made good testing efforts for that phase of development. "
    },
    {
        "ID": "408",
        "Question": "\"Regular\" golf vs. code golf: Both are competitions.  Both have a well-defined set of rules, which I'll leave out for simplicity.  Both have well-defined goals; in short, \"use fewer hits/characters than your competitors.\" To win matches, athletic golfers rely on  equipment  Some situations call for a sand wedge; others, a 9-iron.   techniques  The drive works better when your feet are about shoulder width apart and your arms are relaxed.   and strategies  Sure, you could take that direct shortcut to the hole... but do you really want to risk the water hazard or sand bunker when those trees are in the way and the wind is so strong?  It might be better to go around the long way.    What do code golfers have that's analagous to athletic golfers' equipment, techniques and strategies? Sample answer to get this started: use the right club!  Choose GolfScript instead of C#. ",
        "Best answer": "I'd say that thorough knowledge of the syntactical oddities of your language help. Here is one I found in Ruby when doing a bit of code golf: Instead of require \"sequel\" require \"nokogiri\" require \"chronic\"  You can do something like this:  body_of_your_program if %w{sequel nokogiri chronic}.each{|i| require i}  With this kind of thing, you too can write incredibly elaborate Ruby one-liners! In Ruby and Perl, you also get the magic variables like \"$_\" which can be used to do all sorts of magic with strings and regexes. Is your data not strings? Well, you might want to turn it into strings. Obviously, in C, the preprocessor is your friend. "
    },
    {
        "ID": "501",
        "Question": "No matter how much you love a programming language, there are always a few details in it that aren’t quite as nice as they could be. In this question, I would like to specifically focus on syntax elements. In a programming language that you use frequently (perhaps your favourite programming language, or perhaps the one you are forced to use at work), which syntax element do you find most unreadable, unclear, inconvenient or unpleasant? ",
        "Best answer": "Semicolon insertion in JavaScript. I haven't really been bitten by it often, but it's just such a phenomenally bad idea it makes my head spin.  Here's the rules (from ECMA-262 Section 7.9)  When the program contains a token that is not allowed by the formal grammar, then a semicolon is inserted if (a) there is a line break at that point, or (b) the unexpected token was a closing brace. When the end of a file is reached, if the program cannot be parsed otherwise, then a semicolon is inserted. When a \"restricted production\" is encountered and contains a line terminator in a place where the grammar contains the annotation \"[no LineTerminator here]\", then a semicolon is inserted.    Example: return 1; // returns 1  return 1; // returns undefined  "
    },
    {
        "ID": "502",
        "Question": "I think everyone has their own program or set of features beyond \"Hello World!\", that they use when trying out a new language. Mine is a guessing game: I'm thinking of a number 1-10, guess what it is! Guess: 3 Nope, too low! Guess: 7 Nope, too high! Guess: 5 Yes, You win! Play again (Y/N)? N  What do you write? ",
        "Best answer": "It usually goes like this:  Hello World Hello [user inputted name] A few problems from Project Euler A linked list A simple blog engine (either terminal or web-based, depending on what language) And from there I dive into a project that I want to work on (but don't care if the design gets mangled as I learn my way through a new language).  "
    },
    {
        "ID": "566",
        "Question": "goto is almost universally discouraged. Is using this statement ever worthwhile? ",
        "Best answer": "This has been discussed several times on Stack Overflow, and Chris Gillum summarized the possible uses of goto:  Cleanly exiting a function Often in a function, you may allocate resources and need to exit in multiple places.  Programmers can simplify their code by putting the resource cleanup code at the end of the function all all \"exit points\" of the function would goto the cleanup label.  This way, you don't have to write cleanup code at every \"exit point\" of the function. Exiting nested loops If you're in a nested loop and need to break out of all loops, a goto can make this much cleaner and simpler than break statements and if-checks. Low-level performance improvements This is only valid in perf-critical code, but goto statements execute very quickly and can give you a boost when moving through a function.  This is a double-edged sword, however, because a compiler typically cannot optimize code that contains gotos.  I'd argue, as many others would argue, that in all of these cases, the usage of goto is used as a means to get out of a corner one coded oneself into, and is generally a symptom of code that could be refactored. "
    },
    {
        "ID": "812",
        "Question": "I originally tried asking this on StackOverflow, but it was too subjective :-(. I am interested in methods of defining the power of programming languages. Turing completeness is one, but it is almost universally satisfied. What would be nice is to define a measure of power that discriminates among programming languages that are actually in used. For example, can anyone propose a non-subjective method that would discriminate between assembly and Java? Turing completeness means that a language is maximally powerful in what it can output (which pretty much means it can do anything non-time based in the real world). So if we want to define a stronger measure of power, we need to take another approach. Shortness was suggested in the original question, but this is not easy to define at all. Does anyone have any other suggestions? ",
        "Best answer": "The notion you are looking for is called expressiveness and Matthias Felleisen has a mathematically rigorous definition:  \"On the Expressive Power of Programming Languages\" www.ccs.neu.edu/scheme/pubs/scp91-felleisen.ps.gz (Postscript version)  The intuition behind the idea is that if you have two equivalent programs in two different languages-- say, program A in language X and program B in language Y-- and if you make a local change to A that requires a global change to B, then X is more expressive than Y. One example Felleisen provides is assignment: In the Scheme programming languages you can remove the assignment operator and still have a Turing complete language. However, in such a restricted language, adding in a feature that would be localized if assignment was allowed would require a global change to the program without assignment. My discussion has simplified some details, and you should read the paper itself for the full account. To answer your other question: You can say that Java is more expressive than assembly because you can add a new class to your Java program, and then gain the benefits of polymorphism by having other parts of your program call its methods without global modification. Exception handling is another example where Java is more expressive than assembly: You simply need to write a single throw statement to transfer control up the stack. On a more elementary level, you can also add a new case statement near the beginning of a switch and you won't have to worry about recalculating any jump offsets by hand. "
    },
    {
        "ID": "937",
        "Question": "I know that they are implemented extremely unsafely in C/C++. Can't they be implemented in a safer way? Are the disadvantages of macros really bad enough to outweigh the massive power they provide? ",
        "Best answer": "I think the main reason is that macros are lexical. This has several consequences:  The compiler has no way of checking that a macro is semantically closed, i.e. that it represents a “unit of meaning” like a function does. (Consider #define TWO 1+1 — what does TWO*TWO equal? 3.) Macros are not typed like functions are. The compiler cannot check that the parameters and return type make sense. It can only check the expanded expression that uses the macro. If the code doesn’t compile, the compiler has no way of knowing whether the error is in the macro itself or the place where the macro is used. The compiler will either report the wrong place half of the time, or it has to report both even though one of them is probably fine. (Consider #define min(x,y) (((x)<(y))?(x):(y)): What should the compiler do if the types of x and y don’t match or don’t implement operator<?) Automated tools cannot work with them in semantically useful ways. In particular, you can’t have things like IntelliSense for macros that work like functions but expand to an expression. (Again, the min example.) The side-effects of a macro are not as explicit as they are with functions, causing potential confusion for the programmer. (Consider again the min example: in a function call, you know that the expression for x is evaluated only once, but here you can’t know without looking at the macro.)  Like I said, these are all consequences of the fact that macros are lexical. When you try to turn them into something more proper, you end up with functions and constants. "
    },
    {
        "ID": "1070",
        "Question": "Dcpromo.exe is famous among MCSEs for being they only way to create a Windows Domain Controller (in other words an Active Directory Domain) ... which in turn is often used by the ASP.NET Membership system. I'm trying to determine if I should put content on \"www.dcpromo.com\" geared for developers or more towards sysadmins. To me, a logical extension of this \"domain controller on the internet\" is to use WIF for the ASP.NET Membership system.  We'd then have a website that will serve the developer's interests in the SSO, SAML, user managment and identity areas we all struggle with. So my question is:  Q:  Do programmers see a connection between the utility dcpromo.exe and ASP.NET Membership?  If so does it make sense to have a purpose of http://www.dcpromo.com  help developers in the areas of membership and cloud computing?   ",
        "Best answer": "I've been a Microsoft developer for 11 years, mostly as a web developer.  Been coding since 1.1 and I've used .NET membership in many of my applications, and I've never heard of dcpromo. "
    },
    {
        "ID": "1090",
        "Question": "Language shortcuts can often be used to make code more concise. For example, ternary and null coalescing operators can reduce the amount of code, but arguably to the detriment of readability: In C#: Person newGuy = new Person(); if (boss == null) {     newGuy.Boss = GetDefaultBoss(); } else {     newGuy.Boss = boss; }  is functionally equivalent to: Person newGuy = new Person(); newGuy.Boss = boss ?? GetDefaultBoss();  but obviously a lot more verbose. Where do you draw the line when it comes to conciseness vs readability? ",
        "Best answer": "Both. Your first example is certainly more verbose, and arguably more explicit... but it also requires me to scan five lines instead of one. Worse, it deemphasizes its purpose - assigning a value to newGuy.Boss. Your second example may cost me a second if I'm unfamiliar with the null coalescing operator, but there can be no doubt as to its purpose, and if I'm scanning through a larger routine looking for the source of a value, it will be much easier for me to pick this one out. Now, contrast this: if (boss == null) {     newGuy.Boss = GetDefaultBoss();     newGuy.IsTemp = true;     newGuy.AddTask(\"orientation\"); } else {     newGuy.Boss = boss;     newGuy.IsTemp = false; }  ...with: newGuy.Boss = boss ?? GetDefaultBoss(); newGuy.IsTemp = boss == null; if ( boss == null ) newGuy.AddTask(\"orientation\");  The latter example is again much shorter, but now it obscures its purpose by making tasks triggered by the same test appear to be distinct. Here, I feel the verbosity of the former is justified. "
    },
    {
        "ID": "1338",
        "Question": "Have you ever had to work to coding standards that:  Greatly decreased your productivity? Were originally included for good reasons but were kept long after the original concern became irrelevant? Were in a list so long that it was impossible to remember them all? Made you think the author was just trying to leave their mark rather than encouraging good coding practice? You had no idea why they were included?  If so, what is your least favorite rule and why?  Some examples here ",
        "Best answer": "Had a professor once who demanded we have at least one comment for each line of code. //Set x to 3 var x = 3;  //if x is greater than 2 if(x>2){      //Print x     Print(x); }  It was pretty ridiculous. "
    },
    {
        "ID": "1483",
        "Question": "I've heard it said (by coworkers) that everyone \"codes in English\" regardless of where they're from. I find that difficult to believe, however I wouldn't be surprised if, for most programming languages, the supported character set is relatively narrow. Have you ever worked in a country where English is not the primary language? If so, what did their code look like? ",
        "Best answer": "I'm from Canada, but live in the States now. It took me a while to get used to writing boolean variables with an \"Is\" prefix, instead of the \"Eh\" suffix that Canadians use when programming. For example: MyObj.IsVisible  MyObj.VisibleEh  "
    },
    {
        "ID": "1752",
        "Question": "In fact this question is about cautions to be taken to enhance quality user experience and reduce avoidable support calls. ",
        "Best answer": "A lack of proper input validation is one of those things which tends to lead quite quickly to users doing \"bad\" things with your application, when it should really be handled by the programmer. I've seen legacy apps where users have been trained to:  not enter apostrophes in names not enter any symbol other than a-z0-9, ensure there are no spaces before or after the text they've entered check that a correctly formatted email address is being entered in to the email field, otherwise subsequent mailings to that user will use whatever's in the field and will fail make sure \"http://\" is put before web addresses  etc etc All of the above issues are ones which should be handled by an application developer. When your input validation is essentially \"make sure the user knows what format this field should be in and trust what they've entered is right\", then unexpected things are bound to find their way in to the app. Aside from the obvious security implications, users make mistakes. As programmers we often produce our best products by bending over backwards to make sure that the user can't get it wrong, no matter how hard they try! "
    },
    {
        "ID": "1890",
        "Question": "What is the best practice, most commonly accepted naming conventions for private variables in C#?  private int myInteger; private int MyInteger; private int mMyInteger; private int _myInteger; private int _MyInteger; Mysterious other option  Which do you use and why?  (My company is fairly new to C# and I would like to pick the most \"industry accepted\" method to try and get into our coding standard.) ",
        "Best answer": "The MSDN class design guidlines http://msdn.microsoft.com/en-us/library/ta31s3bc.aspx recommends option 1 - myInteger.  I have always used this style. I have a personal dislike for the _ character. "
    },
    {
        "ID": "1969",
        "Question": "I'm posting this here since programmers write viruses, and AV software.  They also have the best knowledge of heuristics and how AV systems work (cloaking etc). The EICAR test file was used to functionally test an antivirus system.  As it stands today almost every AV system will flag EICAR as being a \"test\" virus.  For more information on this historic test virus please click here. Currently the EICAR test file is only good for testing the presence of an AV solution, but it doesn't check for engine file or DAT file up-to-dateness. In other words, why do a functional test of a system that could have definition files that are more than 10 years old.  With the increase of zero day threats it doesn't make much sense to functionally test your system using EICAR. That being said, I think EICAR needs to be updated/modified to be effective test that works in conjunction with an AV management solution. This question is about real world testing, without using live viruses... which is the intent of the original EICAR. That being said I'm proposing a new EICAR file format with the appendage of an XML blob that will conditionally cause the Antivirus engine to respond. X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-EXTENDED-ANTIVIRUS-TEST-FILE!$H+H* <?xml version=\"1.0\"?> <engine-valid-from>2010-1-1Z</engine-valid-from> <signature-valid-from>2010-1-1Z</signature-valid-from> <authkey>MyTestKeyHere</authkey>   In this sample, the antivirus engine would only alert on the EICAR file if both the signature  or engine file is equal to or newer than the valid-from date. Also there is a passcode that will protect the usage of EICAR to the system administrator. If you have a backgound in \"Test Driven Design\" TDD for software you may get that all I'm doing is applying the principals of TDD to my infrastructure.   Based on your experience and contacts how can I make this idea happen? ",
        "Best answer": "As you said in the question, it would have to work in conjunction with an AV solution.  In order for that to happen you would either need to write an AV engine, or become involved with an existing AV vendor. If such a thing did exist... Where does the benefit come in?  Just thinking devil's advocate here..  Couldn't the AV engine just report when it's database was updated? "
    },
    {
        "ID": "2086",
        "Question": "When writing or using an algorithm, should the Big Oh complexity be mentioned? ",
        "Best answer": "If you can back it up with real analysis, then yes, absolutely. @Casebash test != analysis.  If it should always be documented then just start throwing  // this algorithm is O(n!) on every function.  I've worked with people who would say things like 'This function is O(1) because there are no loops', and then I would point to the call $(someHugeList).each(function(//... "
    },
    {
        "ID": "2204",
        "Question": "What steps and measures can I take to prevent deep indentations in my code? ",
        "Best answer": "The best thing you can do is extract methods: int Step1(int state) {     if (state == 100)     {         return Step2(state);     }     else     {         return Step3(state);     } }  int Step2(int state) {     if (state != 100)     {         throw new InvalidStateException(2, state);     }      // .... }  "
    },
    {
        "ID": "2259",
        "Question": "Sometimes, one creates a exploratory prototype and forgets about structure in the directories... What are good tips on dividing the programming files over (several levels of) directories? ",
        "Best answer": "If your language is OOP and package based (Eg Java), then you should probably keep each package in its own folder (eg my/package/name) to keep with the convention. If your language isn't package based (Eg PHP), then organize by what each file does. Here's an example  Does this do utility functions? Goes in /util Is this a 3rd party plugin? Goes in /plugin Is this part of the admin panel? Goes in /admin, along with ALL supporting files Is this Javascript? Goes in /javascript Is this CSS? Goes in /css Is this a template? Goes in /templates/templateName etc  Language agnostic, Most people have a /src directory for all source files, a /lib directory for libraries, and a /bin or /dist directory for builds.  "
    },
    {
        "ID": "2331",
        "Question": "Please, explain why and list which languages have the (mis)feature implemented As far you know. Post what you consider a harmful feature, not what you dislike. ",
        "Best answer": "Register Globals in PHP Information : http://php.net/manual/en/security.globals.php This is by far the worst feature to be ever implemented for readability reasons and security reasons. Basicly all the GET parameter received are transformed into variables. For example with this URL : /index.php?value=foobar You can do the following : <?php echo $value; // return foobar ?>  When you are reading code, it is very confusing to know where the variable comes from. Also if the feature is misused, it can lead to security hole. Here's a code example from php.net that shows how it can be misused : <?php // define $authorized = true only if user is authenticated if (authenticated_user()) {     $authorized = true; }  // Because we didn't first initialize $authorized as false, this might be // defined through register_globals, like from GET auth.php?authorized=1 // So, anyone can be seen as authenticated! if ($authorized) {     include \"/highly/sensitive/data.php\"; } ?>  "
    },
    {
        "ID": "2497",
        "Question": "How useful are infix operators in a programming language? Are they worth the extra complexity they provide? Can you provide any examples where infix operators are better suited to the problem that can't be handled by just overloading the normal operators? ",
        "Best answer": "I think infix operators stem from mathematics. This: 2 + 3 * 4  is more readable to most people, than (+ 2 (* 3 4))  because most people are familiar with mathematics. Interesting enough in Haskell you can hop between infix and prefix. This is using the same funtion \"(+)\": (+) 1 2 1 + 2  and this is using the same function \"elem\": elem 42 [1,2,42] 42 `elem` [1,2,42]  "
    },
    {
        "ID": "2654",
        "Question": "In response to This Question, I ask:   What are the best parts of your coding standard? What are the best practices that help with code quality, reliability, maintainability, readability, etc. Please include the language, the item from the standard, and the reason it improves your code. ",
        "Best answer": " All Languages: Write readable code instead of comments   A comment followed by a block of code can be replaced by a method which states the intent just as well as the comment, and makes the code more modular and reusable as well.  It makes refactoring happen more often.  It helps us write simple, readable clean code. Readable code is a joy to work with.  It tends to make methods short and sweet.  It avoids comments getting out of sync with the code  It challenges you to rewrite commented code that is hard to understand.  Compare this: public void update() {   // Fetch the data from somewhere   lots of lines of;      code;      for;        fetching;      data;   from somewhere;   // Sort the data   more lines of;       code;          which sorts;          stuff;       around;   a bit and then;   // Update the database   lines of code;       which uses;          some lib;          to update;             using iteration;             and logic;        the database;   done; }  With this version where comments are replaced with function calls: public void update() {     data = fetchData();     sorted = sortResults(data);     updateDatabase(sorted); }  "
    },
    {
        "ID": "2700",
        "Question": "I have had a few that I am proud of and some of them were written by myself few years ago. It doesn't have to be necessarily buggy, just bad code.  ",
        "Best answer": "I don't know about being proud of the fix because it was so obvious, but the most horrible code I remember fixing was this. if (userName==\"John O'Reily\") { userName= \"John O''Reily\";} if (userName==\"Stacy O'Neil\") { userName= \"Stacy O''Neil\";} if (userName==\"Finnegan O'Connor\") { userName= \"Finnegan O''Connor\";} ... someSQL = \"SELECT * from Users where UserName='\" + userName + \"'\";  Apparently the previous developer just kept adding new lines every time a new (usually Irish) user started getting errors in the application. I'll leave it as an exercise for the class as to how it was fixed. "
    },
    {
        "ID": "2715",
        "Question": "Should curly braces be on their own line or not? What do you think about it? if (you.hasAnswer()) {     you.postAnswer(); } else {     you.doSomething(); }  or should it be if (you.hasAnswer()) {     you.postAnswer(); } else {     you.doSomething(); }  or even if (you.hasAnswer())     you.postAnswer(); else     you.doSomething();  Please be constructive! Explain why, share experiences, back it up with facts and references. ",
        "Best answer": "You should never do the 3rd method.  Skimping on braces might save you a few keystrokes the first time, but the next coder who comes along, adds something to your else clause without noticing the block is missing braces is going to be in for a lot of pain.  Write your code for other people.  "
    },
    {
        "ID": "2829",
        "Question": "I originally thought of creative commons when while reading a book about wordpress (professional wordpress), I learned that I should also specify that the product is provided   ... WITHOUT ANY WARRANTY; without even the   implied warranty of MERCHANTABILITY or   FITNESS FOR A PARTICULAR PURPOSE  and they recommend GNU GPL.  How do I write a license or select 1? btw, what does MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE mean actually? Isn't without warranty enough?  ",
        "Best answer": "For small bits of code, I generally release them under the X11 licence. The problem with the GPL is that it's far too complicated for code that you don't really care enough about to protect. If you really don't want people using your code in commercial products, you would need to monitor for infringement and fight it out in court, which isn't really worth the time or the effort for small, free, open-source projects.  Copyright (c)   Permission is hereby granted, free of charge, to any person obtaining a copy    of this software and associated documentation files (the \"Software\"), to deal    in the Software without restriction, including without limitation the rights    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell    copies of the Software, and to permit persons to whom the Software is    furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in    all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN    THE SOFTWARE.   EDIT: If the body of code is more substantial, and you feel that you've invested enough time in it that you would be willing to protect it, by all means use the GPL to protect it. "
    },
    {
        "ID": "3199",
        "Question": "Are different version naming conventions suited to different projects? What do you use and why? Personally, I prefer a build number in hexadecimal (e.g 11BCF), this should be incremented very regularly. And then for customers a simple 3 digit version number, i.e. 1.1.3. 1.2.3 (11BCF) <- Build number, should correspond with a revision in source control ^ ^ ^ | | | | | +--- Minor bugs, spelling mistakes, etc. | +----- Minor features, major bug fixes, etc. +------- Major version, UX changes, file format changes, etc.  ",
        "Best answer": "I tend to follow Jeff Atwood's opinion of the .NET convention of version numbering.  (Major version).(Minor version).(Revision number).(Build number)  More often than not, for personal projects, I find this to be overkill. The few times where I have worked on substantial projects like search engines in C# I've stuck to this convention and have been able to use it as an internal tracker effectively. "
    },
    {
        "ID": "3425",
        "Question": "And what do you think about operator precedence? Would be harder programming in a language where the operations are executed in sequential order? Ex.: 2 + 3 * 4 == 20 2 + (3 * 4) == 14 OK, the Lisp family doesn't have precedence by definition. Let's gonna talk about procedural and object-oriented languages using this \"feature\". ",
        "Best answer": "Smalltalk. Everything's done with message sending, so 1 + 2 * 3 means \"send * with parameter 3 to the object returned by sending the message + with parameter 2 to the object 1\". That throws people (it threw me) because of how we usually write maths, but since I can never remember C's operator precedence I cope in the same manner in both languages - I use ()s to group terms: 1 + (2 * 3). "
    },
    {
        "ID": "3438",
        "Question": "It seems like in language holy wars, people constantly denigrate any feature they don't find particularly useful as being \"just syntactic sugar\".  The line between \"real features\" and \"syntactic sugar\" tends to get blurred in these debates.  What do you believe is a reasonable and unambiguous definition of syntactic sugar that avoids it being defined as any feature the speaker/writer doesn't find useful? ",
        "Best answer": "How about this: \"syntactic sugar is a convenience shorthand for some functionality that does not introduce any meaningful layer of abstraction.\" Take a->b, which, as you point out, is equivalent to (*a).b.  Does this notation allow you to consider the code it's in any useful, otherwise hidden manner?  No, so it's syntactic sugar. Now consider a[i] == *(a + i).  Think about any C program that uses arrays in any substantive way.  Can you imagine trying to comprehend it without the [] notation?  With multidimensional arrays?  It is meaningful to consider arrays as whole units, not as a reference to the start of a contiguous block of memory.  While it does help to know how arrays work in C if you're planning on doing complicated things with them, it is unproductive to always have to think \"I need to store the two bits of memory 2*i bytes to the right of the memory location referenced by a.\"  The whole point of an array is the ability to abstract away the process of storing a sequence as a coherent unit.  The [] notation facilitates this abstraction.  It's not syntactic sugar. This is not to imply that syntactic sugar is always bad thing.  Like many alliterations, it has become an epithet and pitted against \"real features.\"  But LISP and Scheme, for example, would be unreadable if not for the let shorthand (and others). The ternary operator, <pred> ? <cnsq> : <alt>, is another example.  Syntactic sugar can help to organize programs and remove redundant code, which may save in maintenance down the line.  Syntactic sugar may sometimes be preferable to piling on \"real features\" if it helps to remove syntactic barriers to programming. To quote R^5RS, \"Programming languages should be designed not by piling feature on top of feature, but by removing the weaknesses and restrictions that make additional features appear necessary.\"  IMHO, syntax can qualify as a weakness and restriction and so letting programmers get away from syntax can increase a language's expressivity. "
    },
    {
        "ID": "3450",
        "Question": "Long winding if conditions should be avoided if at all possible, yet sometimes we all end up writing them. Even if it's a very simple condition, the involved statements are sometimes simply very wordy, so the whole condition ends up being very lengthy. What's the most readable way to format those? if (FoobarBaz::quxQuux(corge, grault) || !garply(waldo) || fred(plugh) !== xyzzy) {     thud(); }  or if (     FoobarBaz::quxQuux(corge, grault)  || !garply(waldo)  || fred(plugh) !== xyzzy ) {     thud(); }  or if (FoobarBaz::quxQuux(corge, grault)     || !garply(waldo)     || fred(plugh) !== xyzzy) {     thud(); }  or thudable = FoobarBaz::quxQuux(corge, grault); thudable ||= !garply(waldo); thudable ||= fred(plugh) !== xyzzy;  if (thudable) {     thud(); }  or any other preferences? ",
        "Best answer": "Often, a long if condition is the sign of code that needs refactoring, but sometimes you can't avoid it. In those cases, I prefer the first:  if (bar || baz || quux) { ... }  Because you're able to tell what's going on with one line. However, I'd much rather do something like this, when possible: function foo() {   return bar || baz || quux; }  if (foo()) { ... }  "
    },
    {
        "ID": "3678",
        "Question": "I work with C# professionally and I write code like this all the time. private IEnumerable<Something> GetAlotOfSomething() {     if (somethingA.IsReady)         yield return somethingA;      if (somethingB.IsReady)         yield return somethingB;      if (somethingC.IsReady)         yield return somethingC;       // ... More complex logic }  var specialSomethings =      GetAlotOfSomething()     .Where(s => s.IsSpecial);   Then one day I have to write a bit of VB6 or JScript and I end up writing so much boilerplate just to get things done. Anyone thoughts? ",
        "Best answer": "Iterators (generators etc) are certainly great features that I use a lot.  I don't qualify them as necessary, but I will certainly choose languages that have them when I get a choice. "
    },
    {
        "ID": "3956",
        "Question": "In Windows the default way is registry. This allow you to differentiate system-wide and per-user settings. In Unix you should use text files in the /etc folder for system-wide settings (what's the convention for per-user settings?). Many new programs (and especially those designed for being portable) use XML files.  What's the best way (and location) to store non-BLOB settings? Should we follow each system default or have a unified solution? And what's the best portable way?  ",
        "Best answer": " What's the best way (and location) to store non-BLOB settings?  On Windows, it seems acceptable to use the registry. In my opinion, the registry was a poorly-devised system, and instead a simple text file in the Users\\Username\\AppData directory should be preferred. This is easier to back up, less dangerous for users to modify, and easier to clean up. On Linux and most Unixes, The preferred location is /home/user/.config/appname for user-specific settings and /etc/ for global (system-wide) settings. The less-preferred (but acceptable) location for user settings is ~/.appname, but this is generally falling out of favor. These files should be user-editable, so a human-readable format is always preferred. I disagree with most people that XML is an acceptable format for storing non-blob data. It is, in my opinion, an overwrought and excessively complex format for what usually ends up being very small pieces of structured data. I prefer to see files in YAML, JSON, ASN.1, name=value pairs, or similar formats. Having too much syntax makes it too easy for a user to mess up and leave the file in an invalid format.  Should we follow each system default or have a unified solution?  That is entirely up to you, but keep some things in mind:  Platforms like *nix have strict limitations on which locations are writable. More strict than Windows. So:  The only place you should write to anything is in the user's home directory. Unless your application is a system service; in which case, all mutable data files should be written in /var/. Nonmutable data files should be kept in your app directory in /usr/share/ or /usr/local/share/ or /opt/ Configuration files in /etc/ should never be written to by the application when it is running, even if it has write access to them. /etc/ should be the repository for default behaviors and nothing else. Plan for your application to be installed in one of three places: /usr/local/, /opt/appname, or /home/username/appname. Blobs should be stored alongside other configuration files if they are to be changed. It is generally preferable to use a user-editable format, so something like SQLite or Berkeley DB is preferred (since there are command-line tools for each), but not required.  On Windows, your applications should only ever write in the User directory. The standardized location for data files is Users\\User\\AppData. Nowhere else seems acceptable. On Mac OS X, your application settings should be stored in ~/Library/Preferences along with all of the other applications' plist files. plist seems to be the preferred format, but you'll want to double-check with the Apple guidelines.   And what's the best portable way?  There is no \"best,\" to be honest. There are only platform-specific limitations and expectations. My recommendation is to stick with platform-specific means, even if it means writing more code. "
    },
    {
        "ID": "4107",
        "Question": "I was browsing some old code that I wrote (first year in the university) and noticed that I used to write comment titles preceeding various parts of the code. Stuff like (this is from a Monopoly game):  /*Board initialization*/ ...code...  /*Player initialization*/ ...code...  /*Game logic starts here*/ /*Displaying current situation*/ ...code...  /*Executing move*/ ...code...  /*Handle special event*/ ...code...  /*Commit changes, switch to next player*/ ...code...  This might be redundant, and arguably unnecessary if the code is really super clear, but as I scanned through the file it surprised me how strongly I felt like I know what's going on even though I hardly looked at the actual code. I can definitely see this as being fitting in certain circumstances, so I wonder- do you do this? Do you think it's a good idea? Or is it too much?  ",
        "Best answer": "This is a code smell. This says what and not why. If this is necessary, split the code in small functions. "
    },
    {
        "ID": "4112",
        "Question": "If you were to run across code like this in your travels would the short names bother you? let setPropertyAssignment =      parser {         let! a = setIdentifierName         let! b = propertyName         let! c = openParenthesis          let! d = propertySetParameterList         let! e = closeParenthesis          let! f = openCurlyBracket          let! g = functionBody         let! h = closeCurlyBracket         return Node(NodeType.PropertyAssignment, [a;b;c;d;e;f;g;h])     }  Here is the largest parser in the project: let iterationStatement =      parser {         let! a = doKeyWord         let! b = statement         let! c = whileKeyWord         let! d = openParenthesis         let! e = expression         let! f = closeParenthesis         let! g = statementTerminator         let symbols = [a; b; c; d; e; f; g]         return Node(NodeType.IterationStatement, symbols)     } +++ parser {         let! a = whileKeyWord         let! b = openParenthesis         let! c = expression         let! d = closeParenthesis         let! e = statement         let symbols = [a; b; c; d; e]         return Node(NodeType.IterationStatement, symbols)     } +++ parser {         let! a = forKeyWord         let! b = openParenthesis         let! c = maybeOne expressionNoIn         let! d = semiColon         let! e = maybeOne expression         let! f = semiColon         let! g = maybeOne expression         let! h = closeParenthesis         let! i = statement         let symbols = [a;b] @ c @ [d] @ e @ [f] @ g @ [h;i]                       return Node(NodeType.IterationStatement, symbols)     } +++ parser {         let! a = forKeyWord         let! b = openParenthesis         let! c = varKeyWord         let! d = variableDeclarationListNoIn         let! e = semiColon         let! f = maybeOne expression         let! g = semiColon         let! h = maybeOne expression         let! i = closeParenthesis         let! j = statement         let symbols = [a;b;c;d;e] @ f @ [g] @ h @ [i;j]         return Node(NodeType.IterationStatement, symbols)     } +++ parser {         let! a = forKeyWord         let! b = openParenthesis         let! c = leftHandSideExpression         let! d = inKeyWord         let! e = expression         let! f = closeParenthesis         let! g = statement         let symbols = [a;b;c;d;e;f;g]                        return Node(NodeType.IterationStatement, symbols)     }  +++ parser {         let! a = forKeyWord         let! b = openParenthesis         let! a = varKeyWord         let! c = variableDeclarationNoIn         let! a = inKeyWord         let! c = expression         let! d = closeParenthesis         let! e = statement         let symbols = [a; b; c; d; e]         return Node(NodeType.IterationStatement, symbols)     }  ",
        "Best answer": "Depends on the complexity.  With something this size, it's pretty obvious what you're doing and why.  Make it much bigger--a page or so--and it'll get very confusing very quickly. "
    },
    {
        "ID": "4250",
        "Question": "I'm sure many of us have seen method names like this at one point or another:  UploadTheFileToTheServerPlease CreateATemporaryFile WriteTheRecordToTheDatabase ResetTheSystemClock  That is, method names that are also grammatically-correct English sentences, and include extra words purely to make them read like prose. Personally, I'm not a huge fan of such \"literal\" method names, and prefer to be succint, while still being as clear as possible. To me, words like \"a\", \"an\", and \"the\" just look plain awkward in method names, and it makes method names needlessly long without really adding anything useful. I would prefer the following method names for the previous examples:  UploadFileToServer CreateTemporaryFile WriteOutRecord ResetSystemClock  In my experience, this is far more common than the other approach of writing out the lengthier names, but I have seen both styles and was curious to see what other people's thoughts were on these two approaches. So, are you in the \"method names that read like prose\" camp or the \"method names that say what I mean but read out loud like a bad foreign-language-to-English translation\" camp? ",
        "Best answer": "I'll agree that prose methods suck with one exception: Unit Test Cases These are generally never called in your code and show up in test reports.  As such, it's handy to have readouts with a bit more prose:  AddingACustomerOrderFailWhenCustomersIdIsInvalid : Failed OutOfBoundsPriceReturnsAnError : Passed CanDeleteAnEventFromASeason : Passed  Even this should be done sparingly, but I can see it as at least one case where grammatical additions can make it a little easier to express what passed and what failed.  This is, of course, unless your language/framework provides a good mechanism for test-descriptions in the test readout other than method names, in which case ignore this one too. "
    },
    {
        "ID": "4596",
        "Question": "We have an offshore development crew who has a bad habit of installing nonsense software on corporate desktops (which has nothing to do with their job function) and so are considering removing their local administrator rights. Is Local Administrator, or local Power User a requirement with VS2010?  How do you run without elevated rights?  What issues will you run into? ",
        "Best answer": "A programmer should work as a limited user with admin access. That is, the programmer should be the admin of the machine, but while working, he should always use a limited user account. If you need elevated rights to work, for anything but installing software, you're doing something very wrong. Worse, if you work as a power user or disable UAC prompts or the like, you're ignoring issues that will affect end-users of your software, forcing them to run with the same privileges you did. This is wrong. This is true, irrespective of the operating system you're on. Though Windows seems to be the only one where where it comes up. To clarify: When I say the developer should be a limited user, I mean that they should have full admin rights to the machine, but when they test their code, it should be done in a limited-user environment. For example, the developer could be operating the machine as an Admin-capable user, but runs all tests in a virtual machine or in a limited user account. On Linux, this means simply that the dev has sudo access; on Windows, this may mean an Administrator-level account with UAC and other security features fully enabled. "
    },
    {
        "ID": "5427",
        "Question": "Other than being annoyed at whitespace as syntax, I'm not a hater, I just don't get the fascination with Python. I appreciate the poetry of Perl, and have programmed beautiful web services in bash & korn, and shebang gnuplot.  I write documents in troff and don't mind REXX.  Didn't find tcl any more useful years ago, but what's the big stink about Python?  I see job listings and many candidates with this as a prize & trophy on their resumes.  I guess in reality, I'm trying to personally become sold on this, I just can't find a reason. ",
        "Best answer": "I've found Python to be the most natural programming language that I've ever written code in. I've coded in a lot of languages before and after Python, and to a greater or lesser extent, you have to fight the language to get it to do what you want. Python reduces this struggle massively. Eric S Raymond said it much better than I can in Why Python? As a related point, Python maintains its cleanness even while evolving rapidly. In most languages I've worked with, introduction of new language features introduces a lot of wrinkles. But with Python, even major language features (decorators come to mind) are added all the time, without feeling like ugly hacks. "
    },
    {
        "ID": "5473",
        "Question": "I was reading the wikipedia article on programming style and noticed something in an argument against vertically aligned code:  Reliance on mono-spaced font; tabular   formatting assumes that the editor   uses a fixed-width font. Most modern   code editors support proportional   fonts, and the programmer may prefer   to use a proportional font for   readability.  To be honest, I don't think I've ever met a programmer who preferred a proportional font.  Nor can I think of any really good reasons for using them.  Why would someone prefer a proportional font? ",
        "Best answer": "Common points against proportional fonts, commented.   You cannot precisely align code vertically with proportional fonts. I mean, you could precisely align code vertically with proportional fonts, if everybody was using elastic tabstops, but alas... Some proportional fonts make it hard to distinguish some characters groups. (e.g., mrnm). Not all programming fonts are perfect either, however: Courier New has identical 'O' and '0' and identical '1' and 'l'. Some IDEs have poor support for non-fixed-width fonts (like aforementioned Visual Studio or Python's IDLE). In some contexts, also, you just can't use one. (e.g., terminals.) Choosing a proportional font for coding will get you in endless holy wars. Here, however, the problem exists between the keyboard and the chair.  Points in favour of proportional fonts  Some characters are just wider than others. Having to cram an m in the same space of an n or an i makes it truly challenging to design a good, readable monospace font. Improved spacing between letters just right. Compare rnW and Ill in this Proggy Clear screenshot for an example of font spacing done wrong. Most programmer fonts lack italic or bold. This makes it hard to use effective syntax highlighting. Vertical alignment is a can of worms anyway. Tabs or spaces or tabs and spaces?  Personally, I've been using both the 'Ubuntu' font and WenQuanYi Zen Hei Mono with pleasure and find myself unable to prefer one to the other. :) Ubuntu 10 and WenQuanYi Zen Hei Mono 9, compared. There's no clear winner here, if you ask me. That said, fonts are like food. Some like them well rounded, some like them hot and spicy --  there's no one right font, or all of us would be using it right now. Yay for choice! "
    },
    {
        "ID": "5916",
        "Question": "Someone once said we should prefix all our methods with the  /// <summary> comment blocks (C#) but did not explain why. I started to use them and found they annoyed me quite a bit, so stopped using them except for libraries and static methods. They're bulky and I'm always forgetting to update them.  Is there any good reason to use /// <summary> comment blocks in your code? I normally use // comments all the time, it's just the /// <summary> blocks I was wondering about. ",
        "Best answer": " Use them as much as possible.  Yes, those are special comments that become the documentation for the method. The contents of <summary>, the parameter tags, etc. that are generated show up in intellisense when you or someone else is getting ready to call your method.  They can essentially see all the documentation for your method or class without having to go to the file itself to figure out what it does (or try to just read the method signature and hope for the best). "
    },
    {
        "ID": "6146",
        "Question": "I've recently been frequented by erroneous error messages from mod_security. Its filter sets cover outdated PHP exploits, and I have to rewrite my stuff because Wordpress&Co had bugs years ago.   Does this happen to anyone else?  Apache mod_security blocks possibly   dangerous HTTP requests before they   reach applications (PHP specifically).   It uses various filter sets, mostly   regex based.  So I have a nice shared hosting provider, technically apt and stuff. But this bugged me: Just last week I had to change a parameter name &src= in one of my apps because mod_security blocks ANY requests with that. I didn't look up its details, but this filter rule was preventing the exploitability of another app which I don't use and probably never had heard about. Still I had to rewrite my code (renaming parameter often suffices to trick mod_security) which had nothing to do or in common with that! And today, a silly regex blocks form submissions, because I wanted to submit php sample code. Given, this is the simple stuff that mod_security is there to protect against. But I don't believe mod_security can detect seriously obfuscated code, and just goes off at obvious (and in this case totally trivial) php snippets. Basically I'm getting penalized by mod_security because other people released bug-prone apps. (Not saying my apps are ultra secure - I'm pretty security wary, but make no hyperbolic claims.) I've already asked my provider to disable it anyway, the benefits are too minuscle IMO and for my apps.  What do you think? Does mod_security make much sense outside of WP hosting? Or is it really just a bunch of blacklists of long passed security bugs? Which of its rules are actually helpful? Is there an application level equivalent? ",
        "Best answer": "I personally see mod_security as a patch. I use it on some of our servers where we can't control the code that's uploaded (shared hosting servers, for example), but it's never really felt like a good solution to me. Based on it's wide and very general blacklist approach, it's more of a patch to cover up security holes than a good security policy. It can also provide a false sense of security. mod_security can reveal some common attacks but can by no means prevent any attack. Again, it's a blacklist of common known attacks. If you simply install mod_security and think that you're magically secure, you're horribly mistaken. I have found a much better policy to me managed servers where my team reviews all code that is placed on them, combined with lots of logs, logfile analysis, reporting systems, and intrusion detection/intrusion prevention systems (IPS). Everytime third-party or open-source software is installed (I'm looking at you, WordPress!) we keep a log of where it was installed, and when new versions are released we update every copy that was installed. Again, you're more likely to find mod_security on a shared hosting server, as you're experiencing now. As you grow you can move to a VPS or clod based hosting provider where you get your own managed environment and can more tightly control the available software. "
    },
    {
        "ID": "6395",
        "Question": "What tools and techniques do you use for exploring and learning an unknown code base?  I am thinking of tools like grep, ctags, unit-tests, functional test, class-diagram generators, call graphs, code metrics like sloccount, and so on. I'd be interested in your experiences, the helpers you used or wrote yourself and the size of the code base with which you worked.  I realize that becoming acquainted with a code base is a process that happens over time, and familiarity can mean anything from \"I'm able to summarize the code\" to \"I can refactor and shrink it to 30% of the size\". But how to even begin? ",
        "Best answer": "How do you eat an elephant?  One bite at a time :) Seriously, I try to talk to the authors of the code first.  "
    },
    {
        "ID": "6723",
        "Question": "Here is a theoretical problem.  It could apply to many systems.  Let's assume RESTful Web services for example.  You want to find out something but as it happens you can't get it in a single query.  You can make multiple queries.  For example, you have a joint bank account (or a company bank account) and you want to find out how much money is in there.  Meanwhile someone else transfers money from checking to savings. Checking:  $5,000   Savings:  $3,000   Me:  Query Checking.    Response: $5,000     Joe:  Transfer $4,000 from Checking to Savings  Checking: $1,000   Savings:  $7,000  Me:  Query Savings.  Response:  $7,000 Total $12,000. How do you avoid anomalies like this?  The example shows two accounts at one bank, but it can also happen with two accounts at two different banks.  ",
        "Best answer": "You need some form of concurrency control to deal with problems like this. Some possible solutions in your example:  Ensure that the service can return both Savings and Checking figures in a single query, perhaps as a Total. Implement some kind of session so that the user requesting values can lock the data until she has finished reading all the values in which she is interested. This approach is often called \"pessimistic concurrency control\". Design the service so that you can pass your previous Checking figure back when you request a Savings figure. If the Checking figure no longer matches its previous value, the service should indicate an error rather than return a value for Savings. This approach is a variation of \"optomistic concurrency control\".  "
    },
    {
        "ID": "6905",
        "Question": "I've used TestNG and JUnit.  What other frameworks are out there? What makes them special and/or different from the rest? ",
        "Best answer": "Scala Specs gets my vote! :-) Specs is a behavior-driven-development testing framework written in Scala. It can be used to write tests for Java and Scala. It was inspired by RSpec - a testing framework very popular in the Ruby world.  An example test written in Specs: import org.specs._  object ElementSpecification extends Specification {   \"A UniformElement\" should {     \"have a width equal to the passed value\" in {       val ele = elem('x', 2, 3)       ele.width must be_==(2)     }      \"have a height equal to the passed value\" in {       val ele = elem('x', 2, 3)       ele.height must be_==(3)     }      \"throw an IAE if passed a negative width\" in {       elem('x', 2, 3) must throwA(new IllegalArgumentException)     }   } }  Impressive, isn't it? :-) "
    },
    {
        "ID": "7057",
        "Question": "How should I be keeping track of a php script's versions/changes when it pertains to a single script in one file? Should I have a separate changelog, and if so (1) what should it be named, (2) how should the contents of the log be formatted, and (3) how should the log be associated with the php script/file? Or, should I include the changes in a comment at the top of the php file?  Currently, I have the following comments at the top of the file:  /**  * @author    John Doe <contact@John Doe.com>  * @version   1.0  * @copyright Copyright (c) 2010, John Doe  */   Thanks in advance for your response! ",
        "Best answer": "Aren't you using a VCS such as SVN, Git or Mercurial? There's no better way to keep track of the changes than being able to see the difference of the file. Of course, you would want to include the changelog on both: the main comment block and the last commit you do. "
    },
    {
        "ID": "7126",
        "Question": "Note: this question is an edited excerpt from a blog posting I wrote a few months ago.  After placing a link to the blog in a comment on Programmers.SE someone requested that I post a question here so that they could answer it.  This posting is my most popular, as people seem to type \"I don't get object-oriented programming\" into Google a lot.  Feel free to answer here, or in a comment at Wordpress.  What is object-oriented programming?    No one has given me a satisfactory   answer.  I feel like you will not get   a good definition from someone who   goes around saying “object” and   “object-oriented” with his nose in the   air. Nor will you get a good   definition from someone who has done   nothing but object-oriented   programming. No one who understands   both procedural and object-oriented   programming has ever given me a   consistent idea of what an   object-oriented program actually does.  Can someone please give me their ideas of the advantages of object-oriented programming? ",
        "Best answer": "From your blog, it seems that you're familiar with both imperative and functional programming, and that you're familiar with the basic concepts involved in object-oriented programming, but you've just never really had it \"click\" as to what makes it useful.  I'll try to explain in terms of that knowledge, and hope that it's helpful to you. At its core, OOP is a way to use the imperative paradigm to better manage high degrees of complexity by creating \"smart\" data structures that model the problem domain.  In a (standard procedural non-object-oriented) program, you've got two basic things: variables, and code that knows what to do with them.  The code takes input from the user and various other sources, stores it in variables, operates on it, and produces output data which goes to the user or various other locations. Object-oriented programming is a way to simplify your program by taking that basic pattern and repeating it on a smaller scale.  Just like a program is a large collection of data with code that knows what to do with it, each object is a small piece of data bound to code that knows what to do with it. By breaking down the problem domain into smaller pieces and making sure as much data as possible is bound directly to code that knows what to do with it, you make it a lot easier to reason about the process as a whole and also about the sub-issues that make up the process. By grouping data into object classes, you can centralize code related to that data, making relevant code easier both to find and to debug.  And by encapsulating the data behind access specifiers and only accessing it through methods, (or properties, if your language supports them,) you greatly reduce the potential for data corruption or the violation of invariants. And by using inheritance and polymorphism, you can reuse preexisting classes, customizing them to fit your specific needs, without having to either modify the originals or rewrite everything from the ground up.  (Which is a thing you should never do, if you can avoid it.)  Just be careful you understand your base object, or you could end up with killer kangaroos. To me, these are the fundamental principles of object-oriented programming: complexity management, code centralization and improved problem-domain modeling through the creation of object classes, inheritance and polymorphism, and increased safety without sacrificing power or control through the use of encapsulation and properties.  I hope this helps you understand why so many programmers find it useful. EDIT: In response to Joel's question in the comments,  Can you explain what an \"object-oriented program\" contains   (other than these fancy defintions you've outlined) that is fundamentally   different from an imperative program? How do you \"get the ball rolling?\"  A little disclaimer here.  My model of \"an object-oriented program\" is basically the Delphi model, which is very similar to the C#/.NET model since they were created by former Delphi team members.  What I'm saying here may not apply, or not apply as much, in other OO languages. An object-oriented program is one in which all the logic is structured around objects.  Of course this has to be bootstrapped somewhere.  Your typical Delphi program contains initialization code that creates a singleton object called Application.  At the start of the program, it calls Application.Initialize, then a call to Application.CreateForm for every form you want to load into memory from the beginning, and then Application.Run, which displays the main form on screen and starts up the input/event loop that forms the core of any interactive computer programs. Application and your forms poll for incoming events from the OS and translate them into method calls on your object.  One thing that's very common is the use of event handlers, or \"delegates\" in .NET-speak.  An object has a method that says, \"do X and Y, but also check to see if this particular event handler is assigned, and call it if it is.\"  An event handler is a method pointer--a very simple closure that contains a reference to the method and a reference to the object instance--that's used to extend the behavior of objects.  For example, if I have a button object on my form, I customize its behavior by attaching an OnClick event handler, which causes some other object to execute a method when the button is clicked. So in an object-oriented program, most of the work gets done by defining objects with certain responsibilities and linking them together, either through method pointers or by one object directly calling a method defined in another object's public interface.  (And now we're back to encapsulation.)  This is an idea that I had no concept of back before I took OOP classes in college. "
    },
    {
        "ID": "7157",
        "Question": "I was wondering if there was a standard for laying out a class's regions.  I currently use Fields Constructor Properties Public Methods Private Methods  Fields being Private Properties and Properties being the public ones. I'll normally use subregions within that if needed, or will occasionally add other regions below (such as interface or baseClass members).  ",
        "Best answer": "Sub Regions? Does your class have a Single Responsibility? (implicit in that ... my answer is \"Rarely any regions, except maybe to group properties, constructors and methods\"... but even then, I don't use it that much) "
    },
    {
        "ID": "7245",
        "Question": "I had a question posed to me the other day by another programmer.  I remember (a very long time ago) wondering the very same.  Why was a browser-side include tag never considered?  Or was it? Specifically with a tag that instructed the browser to include additional HTML from other sources. e.g. <include src=\"http://server/foo/bar.html\">.  Many folks will make javascript calls and fill innerHTML to accomplish the same, when the same outside a the javascript engine could be accomplished by the browser. It would have been painful to have nested <HTML>s <BODY>s (i.e.) but we have to consider that aspect anywhere anyway. ",
        "Best answer": " Why was a browser-side include tag never considered? Or was it?  It was certainly requested by every newbie web author who hadn't worked out Server Side Includes yet, back in the early days on the www-html list. But in those days W3 were happy to completely ignore web author pressure. If cross-site inclusion were allowed it would be a security disaster. You could pull in a page from the user's bank and read content from it. (Originally, DOM scripting was limited, but you could still have read from document.links, document.images, scripting functions dropped by the target page, etc. Since then you can do what you like with imported content.) If cross-site inclusion weren't allowed... well then the feature wouldn't have any advantage over server-side includes. It'd be more, slower work for the client to do that the server could have dealt with better. Unlike <iframe>, an include would have to block page loading. SSIs would be in every way superior. "
    },
    {
        "ID": "7305",
        "Question": "What is your favorite method to declare a pointer? int* i;  or int *i;  or int * i;  or int*i;  Please explain why. see also: http://www.stroustrup.com/bs_faq2.html#whitespace ",
        "Best answer": "If you write: int* i, j, k;  you misleadingly suggest that all of i, j and k are pointers to int. So I contend it's superior to annex the * to the variable name. "
    },
    {
        "ID": "7325",
        "Question": "A typical curly brace programming lang has two types of AND and OR: logical and bitwise. && and || for logical ops and & and | for bitwise ops. Logical ops are more commonly used than bitwise ops, why logical ops are longer to type? Do you think they should be switched? ",
        "Best answer": "Probably a legacy thing. Bitwise operations may not be very common nowadays, but when coding on very low level you use them all the time. So when C was deviced in the 70's or whenever it was created, bitwise OPs were probably more common than logical OPs. And since C has it that way, I take it many other languages (such as Java, indirectly from C++) followed the same convention. Now that I've used the double notation (&& and ||) for so long, I'd only be confused if they were switched. But for completely new programmers, it would probably be a nice thing: you save a whopping 50% per logical operation! Imagine the productivity! ^^ EDIT: Provided these changed were done in a new language, of course, not in any existing languages. "
    },
    {
        "ID": "7347",
        "Question": "I'm talking about the way we write simple routines in order to improve performance without making your code harder to read... for instance, this is the typical for we learned: for(int i = 0; i < collection.length(); i++ ){    // stuff here }  But, I usually do this when a foreach is not applicable: for(int i = 0, j = collection.length(); i < j; i++ ){    // stuff here }  I think this is a better approach since it will call the length method once only... my girlfriend says it's cryptic though. Is there any other simple trick you use on your own developments? ",
        "Best answer": "insert premature-discussion-is-the-root-of-all-evil lecture That said, here are some habits I've gotten into to avoid unnecessary efficiency, and in some cases, make my code simpler and more correct as well. This isn't a discussion of general principles, but of some things to be aware of to avoid introducing unnecessary inefficiencies into code. Know your big-O This should probably be merged into the lengthy discussion above.  It's pretty much common sense that a loop inside of a loop, where the inner loop repeats a calculation, is gonna be slower.  For example: for (i = 0; i < strlen(str); i++) {     ... }  This will take a horrendous amount of time if the string is really long, because the length is being recalculated on every iteration of the loop.  Note that GCC actually optimizes this case because strlen() is marked as a pure function. When sorting a million 32-bit integers, bubble sort would be the wrong way to go.  In general, sorting can be done in O(n * log n) time (or better, in the case of radix sort), so unless you know your data is going to be small, look for an algorithm that's at least O(n * log n). Likewise, when dealing with databases, be aware of indexes.  If you SELECT * FROM people WHERE age = 20, and you don't have an index on people(age), it'll require an O(n) sequential scan rather than a much faster O(log n) index scan. Integer arithmetic hierarchy When programming in C, bear in mind that some arithmetic operations are more expensive than others.  For integers, the hierarchy goes something like this (least expensive first):  + - ~ & | ^ << >> * /  Granted, the compiler will usually optimize things like n / 2 to n >> 1 automatically if you're targeting a mainstream computer, but if you're targeting an embedded device, you might not get that luxury. Also, % 2 and & 1 have different semantics.  Division and modulus usually rounds toward zero, but it's implementation defined.  Good ol' >> and & always rounds toward negative infinity, which (in my opinion) makes a lot more sense.  For instance, on my computer: printf(\"%d\\n\", -1 % 2); // -1 (maybe) printf(\"%d\\n\", -1 & 1); // 1  Hence, use what makes sense.  Don't think you're being a good boy by using % 2 when you were originally going to write & 1. Expensive floating point operations Avoid heavy floating point operations like pow() and log() in code that doesn't really need them, especially when dealing with integers.  Take, for example, reading a number: int parseInt(const char *str) {     const char *p;     int         digits;     int         number;     int         position;      // Count the number of digits     for (p = str; isdigit(*p); p++)         {}     digits = p - str;      // Sum the digits, multiplying them by their respective power of 10.     number = 0;     position = digits - 1;     for (p = str; isdigit(*p); p++, position--)         number += (*p - '0') * pow(10, position);      return number; }  Not only is this use of pow() (and the int<->double conversions needed to use it) rather expensive, but it creates an opportunity for precision loss (incidentally, the code above doesn't have precision issues).  That's why I wince when I see this type of function used in a non-mathematical context. Also, notice how the \"clever\" algorithm below, which multiplies by 10 on each iteration, is actually more concise than the code above: int parseInt(const char *str) {     const char *p;     int         number;      number = 0;     for (p = str; isdigit(*p); p++) {         number *= 10;         number += *p - '0';     }      return number; }  "
    },
    {
        "ID": "7456",
        "Question": "Linguistic relativity is the idea that language shapes the way we think.  My question is, how much, and to what extent, does this apply to programming?  Are some native, natural languages better-suited for thinking about programming than others?  For instance, can the following be stated more concisely in a non-English language?  Select a pivot.  Move all the items less than the pivot to one side of the list, and all the items greater than the pivot to the other side. Does a Chinese-speaking programmer view programming in a radically different lens than an English-speaking programmer, or do the differences fade away when both are immersed in the subject? Are some programming languages and domains easier to think about in one language or another.  For instance, is it any easier to grok Ruby if you are Japanese because the creator of Ruby is Japanese?  Note that this question is not focused on \"how do programming languages affect the way people think about programming\", but rather \"how do natural languages affect the way people think about programming\". To get it out of the way, one language that clearly has a pragmatic advantage is English.  I think the advantage has little to do with programming languages choosing English keywords like if, for, while, and do, just as musicians who don't speak Italian aren't tripped up by words like forte.  It has more to do with communication of ideas with other programmers, as English is the lingua franca these days, at least in the programming world.  For instance, to ask a question in StackOverflow, you really need to know English and know it pretty well if you want good answers.  Although this sounds like an imperialist attitude, it really is true in practice. That aside, how do the intrinsic properties of languages affect how programmers who speak them think about data structures, algorithms, etc.?  Are any languages particularly concise when it comes to talking about logic and programming, allowing native speakers of those languages to think faster? ",
        "Best answer": "I don't know that any particular natural language lends itself to better programming (except maybe Latin?). I do know that knowing more than one language is pretty powerful. Dijkstra said in one of his last interviews (as reprinted in CACM Vol. 53 No. 8, p. 44):  There is an enormous difference   between one who is monolingual and   someone who at least knows a second   language well, because it makes you   much more conscious about language   structure in general. You will   discover that certain constructions in   one language you just can't translate.  "
    },
    {
        "ID": "7536",
        "Question": " Possible Duplicate: int* i; or int *i; or int * i;   Thinking about where we place our asterisks; how do those that prefer to keep the \"pointerness\" away from the type and with the identifier (int *i) write code when the identifier is missing? void f(int*); // 1 void f(int *); // 2  The former seems much more common, no matter what your preference when with the identifier.  Is this a special case?  What makes it an exception? However, the first still isn't universal, because I have seen the latter style.  Besides consistency along the lines of \"there's always a space with the identifier, so we have one without\", are there any other reasons to prefer it? What about casts or array and function types?  How would you re-write these: (void*)var /*or*/ (void *)var  int[3] /*or*/ int [3] // more relevant in C++ than C: Example<int[3]>  void(int) /*or*/ void (int) // more relevant in C++ than C: std::function<void(int)>  The latter two would rarely, if ever, be used in C, but are seen with C++ templates. ",
        "Best answer": "I always separate the star from the type, so I use: void f(int *);  void f(int *x) {     char *y = (char *) x;     char x[4]; }  Obviously, I don't separate the brackets from the identifier. That's how I learned to do it from K&R, and who am I to argue? (Also, it seems to be the most readable way.) "
    },
    {
        "ID": "7539",
        "Question": "I'm writing a small database-centric application in Java Swing that will be used internally in a small company. I haven't much experience with developing production-level applications. I don't use an ORM, just a few simple methods that run SQL queries with Java JDBC. On every method that access the database I use a try-catch statement for SQLException and IOException. Should I do any logging here? In case I should, how much should I log? Please give me examples of good practice in this case. ",
        "Best answer": "Two main things in production system are:  Don't blow up the logs with information that is not interesting Allow raising the log level for troubleshooting purpose.  Use some kind of a logging infrastructure. If the exception can occur during the normal operation, report it in debug level. If it is a real problem, report it in error level. Either way you will have a way to troubleshoot the system by raising the log level. Also - when you report an exception always make sure the the entire stack trace + inner exceptions are printed. "
    },
    {
        "ID": "7705",
        "Question": "When dealing with complicated algorithms in languages with support for nested functions (such as Python and D) I often write huge functions (because the algorithm is complicated) but mitigate this by using nested functions to structure the complicated code.  Are huge (100+ line) functions still considered evil even if they're well-structured internally via the use of nested functions? Edit:  For those of you not familiar with Python or D, nested functions in these languages also allow access to the outer function scope.  In D this access allows mutation of variables in the outer scope.  In Python it only allows reading.  In D you can explicitly disable access to the outer scope in a nested function by declaring it static. ",
        "Best answer": "Always remember the rule, a functions does one thing and does it well! If you can do so, avoid nested functions. It hinders readability and testing. "
    },
    {
        "ID": "8093",
        "Question": "What are some somewhat common math formulas you learned that helped you write better algorithms and become a better programmer? Example: I learned about the ecludian distance formula: sqrt((x1-x2)^2+(y1-y2)^2) which helped me understand how to find like objects by comparing 2 factors.  ",
        "Best answer": "Knowing the powers of 2 is handy, especially when dealing with low-level bitwise operations.   "
    },
    {
        "ID": "8157",
        "Question": "I work at a company where we have a lot of different skillsets in the development team.  We do all of the following (generally geared towards web):  .NET (MVC, Umbraco, ASP.NET, Surface) Java (Spring, Hibernate, Android)  PHP (Zend, Code igniter)  Actionscript 3 AIR Objective-C Html/Javascript (obviously)  We're trying to streamline our development process. We currently have a TeamCity server that builds and deploys .NET projects with msbuild/msdeploy/nant. What I want is something like maven that will give us a standard project template structure that works for most projects to allow people from different teams to move between projects easily. Currently this works on one platform because we tend to do things in a standard way for that platform (as long as certain people have been involved) however I want to use something like maven to standardise how a project is laid out and built. Has anyone tried anything like this before? Experiences? Books? ",
        "Best answer": "As for .NET, there are three projects to port Maven. See this answer on stackoverflow.com. Also this wiki article might be helpful. As for the other languages, I suggest to apply the same structure that Maven supports (all sources below src/language/main, etc) and then either write Maven plugins to build them or at least write generic \"Makefile\" templates which support this structure out of the box. "
    },
    {
        "ID": "8254",
        "Question": "I'm developing a statically- and strongly-typed, compiled language, and I'm revisiting the idea of whether to include function overloading as a language feature. I realized that I'm a little bit biased, coming mainly from a C[++|#] background. What are the most convincing arguments for and against including function overloading in a language?  EDIT: Is there nobody who has an opposing opinion? Bertrand Meyer (creator of Eiffel back in 1985/1986) calls method overloading this: (source)  a vanity mechanism that brings nothing to the semantic power of an O-O language, but hampers readability and complicates everyone's task  Now those are some sweeping generalizations, but he's a smart guy, so I think it's safe to say he could back them up if he needed to. In fact, he almost had Brad Abrams (one of the CLSv1 developers) convinced that .NET shouldn't support method overloading. (source) That's some powerful stuff. Can anyone shed some light on his thoughts, and whether his viewpoint is still justified 25 years later? ",
        "Best answer": "Function overloading is absolutely critical for C++-style template code.  If I have to use different function names for different types, I can't write generic code.  That would eliminate a large and heavily used part of the C++ library, and much of C++'s functionality. It's usually present in member function names.  A.foo() can call an entirely different function from B.foo(), but both functions are named foo.  It's present in operators, as + does different things when applied to integers and floating-point numbers, and it's often used as a string concatenation operator.  It seems odd not to allow it in regular functions as well. It enables the use of Common Lisp-style \"multimethods\", in which the exact function called depends on two data types.  If you haven't programmed in the Common Lisp Object System, try it before you call this useless.  It's vital for C++ streams. I/O without function overloading (or variadic functions, which are worse) would require a number of different functions, either to print values of different types or to convert values of different types to a common type (like String). Without function overloading, if I change the type of some variable or value I need to change every function that uses it.  It makes it much harder to refactor code. It makes it easier to use APIs when the user doesn't have to remember which type naming convention is in use, and the user can just remember standard function names. Without operator overloading, we'd have to label each function with the types it uses, if that base operation can be used on more than one type.  This is essentially Hungarian notation, the bad way of doing it. Overall, it makes a language far more usable. "
    },
    {
        "ID": "8352",
        "Question": "I really like using ClassNames and memberNames as convention but I am not sure how I would name the file containing a class. I like making my classes defined in a file with the exact same name as the class. But I also like making php files all lowercase. So I am conflicted. If I have a class called ProductGroup should that be defined in ProductGroup.php, productgroup.php, or product_group.php? I know there is no right answer, so I am looking for what is most common or your opinion of which to use.. which do you use? ",
        "Best answer": "At work we use underscores as folder delimiters and name the files exactly the same as the path. The autoloader is very simple, it just has to replace _ with / and add '.php' to the end. ProjectName_Models_ProductGroup() will always reside in ProjectName/Models/ProductGroup.php. It can make for some very long class names, but it doesn't really matter with an IDE. You could use the same convention, but just run strtolower() before including the file. "
    },
    {
        "ID": "8391",
        "Question": "In a book I'm reading there is a chapter on documentation for your code. The book is about PHP and described some easy methods but also going for some complicated and time consuming methods (xml, xsl) like DocBook. At my current small company (5 people) we even rarely write comments, but I'm wondering if in a big company how detailed documentation do they write? Do they use such tools like DocBook? Is it complex or simple? ",
        "Best answer": "Working on PHP and NetBeans, the documentation style is pretty much PHPDoc way. Thus I write a little more than what the IDE generates. e.g. IDE generates: /**    * Description for ClassA    *    *    * @author Sam-Mauris Yong    */    class ClassA{      function __construct(){         echo \"5\";     }  }  I'll probably write: /**    * Class A Helper Class  * Some example class used here  *    * @author Sam-Mauris Yong  * @license GNU Public License v3  */    class ClassA{      /**      * Constructor for example class      * echos 5      */     function __construct(){         echo \"5\";     }  }  "
    },
    {
        "ID": "8416",
        "Question": "I have a Java class that handles import and export of data. It started out as a simple private void export() { } private void import() { }  Of course, I wrote the export first, committed it, and then went on to write the import. But import is a keyword in Java - I can't use that as a function name. So I go back and rename both methods. I usually end up with  private void doExport() { } private void doImport() { }  which is both ugly and feels contrived. What do you think of these names? Got any better suggestions? Note: I'm asking now, because it's now happened thrice and that keyword is getting quite annoying. ",
        "Best answer": "I would prefer something like this: private void importData(){} private void exportData(){}  If you now would use this Class as an API you can do something like this: dataUtil.importData();  With the CodeCompletion of the IDE, the differences are more visible if this methods wouldn't start the same way. "
    },
    {
        "ID": "8445",
        "Question": "After 15 years of C++, I've still haven't learn to love using const. I understand it's use, but I've never actually been in situation where being const correct would have avoided the problem I was facing. So how did you come to love benefits of consts? ",
        "Best answer": "Well I wasn't convinced until I tried to embrace the philosophy. I first started by putting const to really read-only members of my most basic class members and member functions arguments. From there, I couldn't compile anymore. Then I persevered in going in the code using those basic classes, see if the previously const additions were really legitimate compared to the use I made of them. It helped me fix some bugs on the way as I added constness to other parts of the code. It's contagious. Most of the code got even more constness and I found easier to debug it because it makes you confident that the compiler will stop you if you start modifying something you shouldn't.  Once I got the application running again, it was faster (had to change some algorithms that I've discovered weren't right for the job), with a lot less bugs and easier to understand when reading the code. I was convinced.  Now, I think that it's even better when you're using a lot of assertions in addition to constness because it makes you feel confident when you have to write new code or modify the current code. You know the compiler will stop you if necessary. It lets you forget about having to check everything you shouldn't modify and then you have more thinking time for more business-specific thinking, or architectural thinking. "
    },
    {
        "ID": "8631",
        "Question": "When you are defining a function/variable/etc and are not sure what to name it, what do you name it? How do you come up with a name? If you use a temporary name as a place-card until you give it it's real name, what temporary name do you use?  update I have been using things like WILL_NAME_LATER, NEEDS_NAME, or TO_BE_NAMED. I was hoping there was an adopted convention, I was actually hoping that if I used this adopted convention my IDE would highlight the name until I changed it. ",
        "Best answer": "I always try to give my variables and functions great names. If I can't think of a great name, I'll settle for a good name. If I can't come up with a good name, I'll use an okay name. I have never, in 15 years of professional programming, been unable to come up with a decent name. "
    },
    {
        "ID": "8917",
        "Question": "I've been using SVN for sometime and have been making an awkward, but soon to be rewarding transition over to git. Theres quite a few side / small projects that I'm working on which 90% will never see the light of day. As well - I also have my weekly school assignments / projects, and finally client projects that I have on the go. I've been rolling the idea or question of how or what the best way would be to back up my projects. The solutions I've sought out so far: github which offers an outstanding service - I'm ok with my work being open source, however It's the school work and client work I might not want the public to be open to. github, of course has a payment plan - but let's face it, im a poor colleage student doing what I can to at least put KD on the table! Theres the USB thumbstick that I can take around with me, work off of or back up, but that requires it to be around constently. Theres Dropbox, but thats a little overkill since it already is a form of a version control system, as well - I have quite a few things on the go - putting everything within dropbox would eat a lot of space Finally, theres a private server. I have a mac mini setup as a media server and I was thinking that I could backup to that. Anyways - what are your guys thoughts, how do you handle backing up projects, not only for version control but for the everyday backups. ",
        "Best answer": "If you have a private server with ssh access all you need to do is this: ssh my.server mkdir ~/repo.git && cd ~/repo.git git init --bare # bare repository that will serve as backup location exit # back on your box cd $my_local_git_repo git remote add --mirror backup ssh://my_server:repo.git git config remote.backup.fetch \":\" # don't replace our data when                                    # accidentally fetching from backup git push backup # copy everything new to backup repo  "
    },
    {
        "ID": "9175",
        "Question": "What do you do when malloc returns 0 or new throws exception? Just halt or try to survive OOM condition/save the user's work?  ",
        "Best answer": "Most people answering this question have probably never worked on embedded systems, where malloc returning 0 is a very real possibility.  On a system I'm currently working on, there is a total of 4.25K bytes of RAM (that's 4352 bytes).  I'm allocating 64 bytes for the stack, and currently have a 1600 byte heap.  Just yesterday I was debugging a heap walk routine so I can follow the allocation and freeing of memory.  The heap walk uses a small (30 byte) statically allocated buffer to output to a serial port.  It will be turned off for the release version. Since this is a consumer product, it better not run out of memory once the product has been released.  I'm sure it will during development.   In any case, about all I can do is beep the speaker a couple of times, and force a reboot. "
    },
    {
        "ID": "9219",
        "Question": "I've heard it argued that design patterns are the best thing since sliced bread.  I've also heard it argued that design patterns tend to exacerbate \"Second System Syndrome,\" that they are massively overused, and that they make their users think they're better designers than they really are. I tend to fall closer to the former camp, but recently I've been seeing designs where nearly every single interaction is replaced with an observer relationship, and everything's a singleton. So, considering the benefits and problems, are design patterns generally good or bad, and why? ",
        "Best answer": "Design patterns are a language, not advice to write program or a contract.  Their primary use is an a posteriori explanation how a component or a system was (or is going to be) implemented.  Instead of going into too much details, you can just say a couple of words that can describe the implementation well enough for the listener to understand how it works and what was important in it.  Alex: Hey, how are the config files created? Bob: They're generated by a factory, which resides in config.h.  Now Alex knows that creation of config files involves non-trivial preparations, because otherwise their creation wouldn't be enclosed into a factory. However, if Bob was a pattern-headed phony, and just used patterns here and there, Alex couldn't tell anything about config creation, because Bob used factory just everywhere.   This would also lead to excessive complexity in the program. So, program first, then spot patterns in your code, not vice versa.  That's how they're effectively used. "
    },
    {
        "ID": "9272",
        "Question": "Sometimes an algorithm can be written in two ways:  The short, fancy way; or The longer, easy-to-understand way.  For example, here is a longer, easier way of copying a string source to dest in C: *dest = *source; while (*source != '\\0') {     source++;     dest++;     *dest = *source; } (true);  And here is a short, fancy way. // Copy string source to dest while (*dest++ = *source++);  I've always heard and read that fancy code should be avoided, and I tend to agree. But what if we take comments into account? Assume that, as in the examples above, we have an uncommented, longer and supposedly easier-to-understand code, and a well-commented, short, fancy code? Is the non-fancy code still preferred? EDIT: Many have commented on variable names, so I've modified the example code as to not make that a factor when preferring on over the other. I tried to remove the double assignment in the first example, but that only made the code less readable. Perhaps this wasn't the best of examples because many find the 'fancy' code more readable and understandable than the longer code. The idea was to have one longer code which was much easier to understand than a very short but complicated code. EDIT2: Here's a new examle I got from SO: Commented fancy version: //direct formula for xoring all numbers from 1 to N int Sum = (N & (N % 2 ? 0 : ~0) | ( ((N & 2)>>1) ^ (N & 1) ) );  Non-commented long version: int Sum = 0; for (int i = 1; i < N; ++i) {    Sum ^= i; //or Sum = Sum ^ i; }  ",
        "Best answer": "I would generally prefer to extract the fancy code out into its own method.. Rather than comment the fancy code, its method name should be all it needs to make things clear. char *copy_string(char *s, const char *t) {         while (*s++ = *t++);      return s; }  "
    },
    {
        "ID": "9313",
        "Question": "Thought I post this to the best community of programmers I know.  David Johnston, the new Governor   General, has the digital world   confused.  Just what is the meaning of that 33   character-long string of ones and   zeros that is emblazoned across the   bottom of his fresh new Coat of Arms?  According to the GG's website, \"The   wavy band inscribed with zeros and   ones represents a flow of information,   digital communication and modern   media.\"  The binry is this: 110010111001001010100100111010011  It's not ASCII, is it just random?  Original article:   http://www.cbc.ca/politics/insidepolitics/2010/10/the-new-ggs-binary-banner-whats-it-mean.html  I'll accept the correct (if it can be solved) answer or failing that, the highest voted answer. ",
        "Best answer": "I'm pretty sure this doesn't mean anything and was only done for graphical effect. 33 characters in Binary doesn't leave much room for encoding data in the first place, and it's an odd length (not divisible by 4.) Add in the fact that it's palindromic, and the odds of there being something encoded in there falls to near zero. If you cut it into 3 even pieces, you can see the pattern emerge.: 11001011100 10010101001 00111010011  It really is just for looks. Edit:  The decimal conversion is also a prime number, so it's a prime number that has a palindromic binary representation.. pretty interesting without being an encryption puzzle. "
    },
    {
        "ID": "9584",
        "Question": "I realized I have to write down a convention specification about HTML, JavaScript and PHP coding for me and my team. In web development, just like in C++, I'm definitely a fan of indentation and comments. Nonetheless, often in my work I encounter HTML+JavaScript+PHP code which suddenly brings up the headache. I'm trying to make my code readable, but what seems to be better to me (to indent & comment) seems not to fascinate my teammates, so I was wondering if there is a best or at least shared good practice when writing \"hybrid\" documents just like today's web pages, which day by day become more and more complex.  I'm aware of the fact that probably it is in the nature of today's web pages' code to be a little bit intricated, but I wonder if a good convention concerning these aspects already exists. ",
        "Best answer": "Some general rules I follow: General  Indents are 4 spaces. Indent new levels Comments are < ~80 chars from the indent level. If I'm in two levels (8 spaces) that means the cursor stop will be around 88 characters.  Use multi-line comments. I prefer the look, however this is a subjective point. Comment now rather then later when you have no idea what's going on. Allman style braces. It's cleaner and is more readable. Subjective.  JavaScript  Use a library. jQuery in particular is very good. It eliminates all cross browser headaches. Understand that ID's are for particular elements, classes are for styles. ID's shouldn't be used more then once per page and they will have particular hooks attached to them. Use classes for things like navigation. Out source into methods. It's tempting to put all the code into the bind call, however putting it in it's own function will increase the flexibility of your code. Use functions instead of evals. That means setTimeout(function(){ /* Do something */ }, 1000); instead of setTimeout('doSomething', 1000); Use local variables with var.   HTML  Semantic markup. Use appropriate tags. Don't put <br />'s in there to add space, adjust margins and CSS rules. All tags are lowercase. All tags should end with a closing tag or be self closing. Make use of classes for layout that is similar. Have a couple of predefined classes like hide, clear, error, etc. Everything (scripts included) should go in <head>. Worry about optimizing (moving stuff around) when it presents a problem. External stylesheets and JavaScript source is a must unless it is page specific.  PHP  Frameworks are good, I recommend CodeIgniter. If you don't want to use a framework, try to use the latest version of PHP possible. (That means 5.3). Use includes to your advantage.  Clear injections or use prepared statements. Perform if checks on preconceived fail-secure values. $logged_in = false; if(check_user($user)) {      $logged_in = true;      $user = load_user($_SESSION); }  Know the difference between single and double quotes. Use single quotes when possible. Don't echo HTML.  "
    },
    {
        "ID": "9730",
        "Question": "I've heard a lot of talk about using functional languages such as Haskell as of late. What are some of the big differences, pros and cons of functional programming vs. object-oriented programming? ",
        "Best answer": "I would say that it is more Functional Programming vs Imperative Programming. The biggest difference is that Imperative programming is about Control flow while Functional programming is about Data flow. Another way to say it is that functional programming only uses expressions while in imperative programming both expressions and statements are used. For example, in imperative programming variables and loops are common when handling state, while in functional programming the state is handled via parameter passing, which avoids side-effects and assignments. Imperative pseudo-code for a function for calculate the sum of a list (the sum is kept in a variable): int sumList(List<int> list) {     int sum = 0;     for(int n = 0; n < list.size(); n++) {         sum = sum + list.get(n);     }      return sum; }  Functional pseudo-code for the same function (the sum is passed as a parameter): fun sumList([], sum) = sum  |  sumList(v::lst, sum) = sumList(lst, v+sum)  I recommend the presentation Taming Effects with Functional Programming by Simon Peyton-Jones for a good introduction to functional concepts. "
    },
    {
        "ID": "9788",
        "Question": "As x goes to 0, the limits of x^0 and 0^x go to 1 and 0, respectively. Some say that the best value for 0^0 depends on context, others say that the value of 0^0 should be 1. I'm interested in knowing what your language implementers say. There doesn't seem to be a consensus. For example, in ActiveState Perl 5.12.0: C:\\>perl -e \"print 0**0\" 1 While in Mathematica 6.0: In[1]:= 0^0         During evaluation of In[1]:= Power::indet:         Indeterminate expression 0^0 encountered. >> Out[1]= Indeterminate I'm also interested in knowing your opinion on the matter: What should 0^0 be? And also whether you have ever introduced a bug into a program you were writing (or had a hard time debugging a program) because of the way your language handles indeterminate forms? ",
        "Best answer": "According to this Wikipedia article, \"Most programming language with a power function are implemented using the IEEE pow function and therefore evaluate 0^0 as 1. The later C and C++ standards describe this as the normative behavior. The Java standard mandates this behavior. The .NET Framework method System.Math.Pow also treats 0^0 as 1.\" "
    },
    {
        "ID": "9843",
        "Question": "This is a question I asked a while back on SO, but it may get discussed better here... Where I work, we've gone back and forth on this subject a number of times and are looking for a sanity check. Here's the question: Should Business Objects be data containers (more like DTOs) or should they also contain logic that can perform some functionality on that object. Example - Take a customer object, it probably contains some common properties (Name, Id, etc), should that customer object also include functions (Save, Calc, etc.)? One line of reasoning says separate the object from the functionality (single responsibility principal) and put the functionality in a Business Logic layer or object. The other line of reasoning says, no, if I have a customer object I just want to call Customer.Save and be done with it. Why do I need to know about another class to save a customer if I'm consuming the object? Our last two projects have had the objects separated from the functionality, but the debate has been raised again on a new project.  Which makes more sense and why?? ",
        "Best answer": "If you consider that a Customer is a part of the domain model, then it makes sense (especially within the context of DDD but not limited to it) to have have both properties and operations for that object.  With that said, however, I think that the example you've used is a poor one, and is a cause of the argument. If you're talking about persistence, then Customers generally don't 'save' themselves; whatever you're using for persistence will. It makes sense that any kind of persistence should belong to the persistence layer/partition. This is generally the thinking behind the repository pattern.** A method like Customer.UpgradeWarranty() or Customer.PromoteToPreferred() makes the argument clearer. This also doesn't remove the possibility for having DTOs. Consider the situation where you're going to pass customer information to a remote service for instance. It may not make sense for a customer to create a DTO of itself for transport, that's an architectural concern, but a case could be made for it in the persistence or network layer/partition/code/what-have-you. In that case, such an objectcould have methods that look like this public static CustomerDTO GetDTO(Customer c) { /* ... */ }  public static Customer GetCustomer(CustomerDTO cdto) { /* ... */ }  So, in summary, it makes perfect sense to have operations on a domain object that are congruent with logical operations in the domain. Google for 'Persistence Ignorance' for a number of good discussions on the matter (this SO question, and its accepted answer is a good place to start). ** This gets a bit muddied with certain OR/M software where you are forced to inherit from a persistent base that has a 'Save' method. "
    },
    {
        "ID": "9881",
        "Question": "I'm looking for informative class documentation format for my Entity, Business Logic and Data Access classes.   I found following two formats from here  Format 1  ///----------------------------------------------------------------- ///   Namespace:      <Class Namespace> ///   Class:          <Class Name> ///   Description:    <Description> ///   Author:         <Author>                    Date: <DateTime> ///   Notes:          <Notes> ///   Revision History: ///   Name:           Date:        Description: ///-----------------------------------------------------------------  Format 2  // =============================== // AUTHOR     : // CREATE DATE     : // PURPOSE     : // SPECIAL NOTES: // =============================== // Change History: // //==================================  I feel following are the basic elements    Author   Created Date Description Revision History  as Namespace and Class name will be there in anyway. Please let me know your thoughts, which format is recommended and whether there is a standard way of writing revision history? ",
        "Best answer": "Most of the information you've suggested there would be found in the source repository. The only thing you really need is the purpose section, which says what the class is there for. Would it be tedious to look in repository every time you want to know the other information? I'd say no.  How often do you care who the original author was?  Or when the file was first created?  Plugins (such as Ankh SVN for Visual Studio) often allow you to right click within your current file and view the repoistory log for the file, so it's not that much of a hassle to actually see this information. Additionally, if you store the version history in a comment, this comment needs to be maintained. So over time there's a chance it could be lying to you.  The source code repository automatically keeps this historical data, so doesn't need that maintenance, and will be accurate. "
    },
    {
        "ID": "9965",
        "Question": "I don't see any use for case sensitivity in a programming language, apart from obfuscating code. Why implement this in a programming language?  Update: It looks like someone you know made a statement on this. ",
        "Best answer": "Why would anyone WANT case insensitivity? In what scenario is it useful to be able to refer to a single variable as VARIABLE in one place, Variable in another, and variable in a third? Case insensitivity is exasperating. I’d much rather get a compiler error when I accidentally type VAriable instead of Variable rather than let case-typos like that slip into my code. In conclusion, many programming languages have case sensitivity not just for historical/inertial reasons but because case insensitivity is a Bad Idea. "
    },
    {
        "ID": "10002",
        "Question": "I often come across a class which has a single reference to another library and was wondering if its better to include the library or to reference the object by it's full name. Is one better then the other? Is one more of a standard then another? For example using System.Windows.Messagebox: Option A: using System.Windows;  public class MyClass {     SomeMethod()     {         MessageBox.Show(\"Something\");     } }  Option B: public class MyClass {     SomeMethod()     {         System.Windows.MessageBox.Show(\"Something\");     } }  If B, how many references do you need before you decide to add the entire library? ",
        "Best answer": "I would prefer 'Option A'. It clearly states, that this file indeed uses that library. And anybody new to the code won't be searching for signs of external references through the whole file. Don't know about such standards though, just reasoning. "
    },
    {
        "ID": "10270",
        "Question": "Many companies, especially larger ones have mandatory professional development plans for their employees. Employees and managers set out a personalized professional development plan and follow up on the progress every so often.  As a developer, do you find such PDPs useful, do you follow through with your commitments?  As a manager, do you think such PDPs bring value to the company and improve the overall quality of the employees? It seems that good developers will continue to educate themselves and strive to be better regardless of companies' procedures while bad ones won't. Are there benefits of having PDPs or is it just something managers feel they need to do? ",
        "Best answer": "I love the idea that my employer is at least pretending to be concerned about my career development.  Frankly though, this is a good thing.  The more money you invest in your employee's self-betterment and overall career progression, the more you invest in your company. Smarter, healthy, more qualified employees = better work = more money = everyone happy.   "
    },
    {
        "ID": "10569",
        "Question": "It seems that some rules of writing code are in direct contradiction with the rules of human writing.  For example in code it's advisable to define each piece of information in only one place and in writing for humans it's normal to repeat important points (though usually phrased differently). What rules of writing good code contradict the rules of good writing? ",
        "Best answer": "Indentation rules (most coding standards impose) really contradict     rules of good writing,     the way people perceive information,     and the grammar rules. Making things (that group naturally, but not syntactically) inside  parenthesis also contradicts how texts are usually typed. If (you try to type text that way)     you'll face misunderstanding even (if programmers read you) otherwise     your text will be easy to read,     and your writing will be productive !  "
    },
    {
        "ID": "10581",
        "Question": "Should items like Foreign Keys, Constraints, Default Values, and so on be handled by the database management system (in this case, MS SQL 2005) or the application? I have heard opinions from both sides and I'm honestly not sure which way to go. There is a chance we will be spanning multiple servers/databases and I don't think Foreign Keys can be used across linked servers. In addition to that, there are some circular references in the database design which prevents me from using ON UPDATE CASCADE on everything. The database is MS SQL 2005 (possibly 2008) and all interactions with it should go through the application. ",
        "Best answer": "If there's any chance that the DB will be modified outside your application, you want the constraints in the database.  If the DB is and always will be nothing more than the back end of the application, you can leave them out, although I'd document them just in case and probably just keep them in if the performance hit wasn't too bad.  (Peoplesoft software works this way - the constraints are in the software, and (I'm not making this up) it runs everything as SYS on Oracle.) You want things like that to be monitored by the application, so it can react intelligently and not at best parrot back a database error message to the user. And, yes, this is double coverage, but without it you're probably going to get preventable data corruption or a bad user interface. "
    },
    {
        "ID": "10655",
        "Question": "In my current developement, I have decided to keep the command prompt open so I can see debug messages. For example, if something wasn't happening when it should, I would put a cout statement at every function to determine where the broken link is. Sometimes, I might get hundreds of the same message (like WM_MOUSEMOVE) and I need to determine whether or not the messages are still coming, so I would using a static variable, and increment it, so I might have: ... 3> WM_MOUSEMOVE processed. 4> WM_MOUSEMOVE processed. 54> WM_CLICK processed. 5> WM_MOUSEMOVE processed. ...  in my cmd. (Don't ask me why there would be 54 WM_CLICK and 4 WM_MOUSEMOVE) What I would like to know is your opinion. Is this a good approach to debugging? What kind of syntax would you use for consistency? Does a syntax even matter? And would you make any suggestions to how this method could be improved. ",
        "Best answer": "There are a few ways. What you are using is a rudimentary form of logging. It's probably the most time-efficient way of debugging most errors. It's worth your time to write a solid logging module that can be redirected to screen or file, buffered/unbuffered, etc. It should have a timestamp and a message, if nothing else. There is also throwing exceptions - this can be more useful with languages that perform a stack trace using symbols, e.g., Java or Python.  Perl can croak()  or die() with similarly useful information. One other method is having a large array of unit tests which can pick up errors in a refined fashion. That of course implies well-written tests. The above are essentially non-interactive methods. There is also Ye Old Interactive Debugger, which functions in various levels of usefulness depending on development environment.  Lisp probably has the best debugging facilities available; C# probably has the most developed UI. Interactive debuggers can be very useful when your code \"logically\" should work, and you really need to do some serious variable-ogling and probe around. It's probably the most inefficient and hard to replicate of all the methods, but can be really useful. The interactive debugger can be extended to have various conditions and scripts run on variables hitting values, but I'm not sure if any current environments support it - the last one I heard of was developed in '93 for... Prolog? Can't recall off the top of my head. One method that was researched in the early 80s and is having a minor comeback today is replayable/reverse debugging. I am working on doing that in my thesis for a highly exotic embedded system. "
    },
    {
        "ID": "10793",
        "Question": "I've heard in several places \"Don't make large commits\" but I've never actually understood whats a \"large\" commit. Is it large if you work on a bunch of files even if there related? How many parts of a project should you be working on at once? To me, I have trouble trying to make \"small commits\" since I forget or create something that creates something else that creates something else. You then end up with stuff like this:  Made custom outgoing queue  Bot -New field msgQueue which is nothing more than a SingleThreadExecutor -sendMsg blocks until message is sent, and adds wait between when messages get sent -adminExist calls updated (see controller) -Removed calles to sendMessage  Controller -New field msgWait denotes time to wait between messages -Starting of service plugins moved to reloadPlugins -adminExists moved from Server because of Global admins. Checks at the channel, server, and global level  Admin -New methods getServer and getChannel that get the appropiate object Admin belongs to  BotEvent -toString() also show's extra and extra1  Channel -channel field renamed to name -Fixed typo in channel(int)  Server -Moved adminExists to Controller  PluginExecutor -Minor testing added, will be removed later  JS Plugins -Updated to framework changes -Replaced InstanceTracker.getController() with Controller.instance -VLC talk now in own file  Various NB project updates and changes  ---  Affected files Modify  /trunk/Quackbot-Core/dist/Quackbot-Core.jar Modify  /trunk/Quackbot-Core/dist/README.TXT Modify  /trunk/Quackbot-Core/nbproject/private/private.properties Modify  /trunk/Quackbot-Core/nbproject/private/private.xml Modify  /trunk/Quackbot-Core/src/Quackbot/Bot.java Modify  /trunk/Quackbot-Core/src/Quackbot/Controller.java Modify  /trunk/Quackbot-Core/src/Quackbot/PluginExecutor.java Modify  /trunk/Quackbot-Core/src/Quackbot/info/Admin.java Modify  /trunk/Quackbot-Core/src/Quackbot/info/BotEvent.java Modify  /trunk/Quackbot-Core/src/Quackbot/info/Channel.java Modify  /trunk/Quackbot-Core/src/Quackbot/info/Server.java Modify  /trunk/Quackbot-GUI/dist/Quackbot-GUI.jar Modify  /trunk/Quackbot-GUI/dist/README.TXT Modify  /trunk/Quackbot-GUI/dist/lib/Quackbot-Core.jar Modify  /trunk/Quackbot-GUI/nbproject/private/private.properties Modify  /trunk/Quackbot-GUI/nbproject/private/private.xml Modify  /trunk/Quackbot-GUI/src/Quackbot/GUI.java Modify  /trunk/Quackbot-GUI/src/Quackbot/log/ControlAppender.java Delete  /trunk/Quackbot-GUI/src/Quackbot/log/WriteOutput.java Modify  /trunk/Quackbot-Impl/dist/Quackbot-Impl.jar Modify  /trunk/Quackbot-Impl/dist/README.TXT Modify  /trunk/Quackbot-Impl/dist/lib/Quackbot-Core.jar Modify  /trunk/Quackbot-Impl/dist/lib/Quackbot-GUI.jar Modify  /trunk/Quackbot-Impl/dist/lib/Quackbot-Plugins.jar Modify  /trunk/Quackbot-Impl/lib/javarebel.stats Add /trunk/Quackbot-Impl/lib/jrebel.info Modify  /trunk/Quackbot-Impl/nbproject/private/private.properties Modify  /trunk/Quackbot-Impl/nbproject/private/private.xml Modify  /trunk/Quackbot-Impl/nbproject/project.properties Modify  /trunk/Quackbot-Impl/plugins/CMDs/Admin/reload.js Add /trunk/Quackbot-Impl/plugins/CMDs/Operator/hostBan Modify  /trunk/Quackbot-Impl/plugins/CMDs/Operator/mute.js Modify  /trunk/Quackbot-Impl/plugins/CMDs/lyokofreak/curPlaying.js Modify  /trunk/Quackbot-Impl/plugins/CMDs/lyokofreak/lfautomode.js Modify  /trunk/Quackbot-Impl/plugins/listeners/onJoin.js Modify  /trunk/Quackbot-Impl/plugins/listeners/onQuit.js Modify  /trunk/Quackbot-Impl/plugins/testCase.js Add /trunk/Quackbot-Impl/plugins/utils/whatsPlaying.js Modify  /trunk/Quackbot-Impl/src/Quackbot/impl/SandBox.java Add /trunk/Quackbot-Impl/vlc_http Add /trunk/Quackbot-Impl/vlc_http/current.html Modify  /trunk/Quackbot-Plugins/dist/Quackbot-Plugins.jar Modify  /trunk/Quackbot-Plugins/dist/README.TXT Modify  /trunk/Quackbot-Plugins/dist/lib/Quackbot-Core.jar Modify  /trunk/Quackbot-Plugins/nbproject/private/private.properties Modify  /trunk/Quackbot-Plugins/nbproject/private/private.xml Modify  /trunk/Quackbot-Plugins/src/Quackbot/plugins/JSPlugin.java Add /trunk/Quackbot-Plugins/vlc_http Add /trunk/global-lib/jrebel.jar  Yea.... So for questions:  What are some factors for when a commit becomes too large (non-obvious stuff)?  How can you prevent such commits? Please give specifics What about when your in semi-early stages of development when things are moving quickly? Are huge commits still okay?  ",
        "Best answer": " To me, I have trouble trying to make \"small commits\" since I forget or create something that creates something else that creates something else.  That is a problem.  It sounds like you need to learn to break down your work into smaller, more manageable chunks. The problem with large commits are:  In a multi-person project, a greater chance that your commits will cause conflicts for other developers to resolve. It is harder to accurately describe what has been done in log messages. It is harder to track the order that changes were made, and hence to understand the cause of problems. It increases the probability of losing a lot of uncommitted work.  Sometimes large commits are unavoidable; e.g. if you have to change a major API.  But that's not normally the case.  And if you do find yourself in this situation, it is probably a good idea to create a branch and do your work in there ... with lots of small commits ... and reintegrate when you are finished. (Another case is when you do an initial import, but that's NOT problematical from the perspective of the issues listed above.) "
    },
    {
        "ID": "10927",
        "Question": "I'm trying to think of the cleanest way to implement a couple of methods that open a file. Consider the following method signatures: public static DomainObject Load(Uri urlToFile) {     /* downloads file and calls Load(savedToFilename) */ }  public static DomainObject Load(string filename)  {      /* creates filestream and calls Load(stream) */ }  public static DomainObject Load(Stream stream)  {      /* does actual loading */  }  I'm trying to implement some concepts from Clean Code, specifically:  When constructors are overloaded, use static factory methods with names that describe the arguments. For example, Complex fulcrumPoint = Complex.FromRealNumber(23.0); is generally better than Complex fulcrumPoint = new Complex(23.0);  Now, I know I do not have overloaded constructors, per se (I refactored away from that), but I think the principle is the same. So that implies that my Load methods be refactored to something like: public static DomainObject FromURI(Uri urlToFile); public static DomainObject FromFile(string filename); public static DomainObject FromStream(Stream stream);  But, tbh, I think it's more intuitive to use what I've already got. From a consumer's perspective it feels like Open will take whatever source I happen to have whereas the other method requires me to think first about what my source is and then wonder if there is a specific method for that. So I ask, from your more experienced viewpoint, which is better and why? ",
        "Best answer": "I think \"Load\" is the way to go for a few reasons:  The parameter type is already in the parameter list- why specify it again in the method name? If you happen to have multiple methods that produce something a stream in a class, \"FromStream\" becomes a problem. In the age of intellisense, it's much more logical to type \"Load\" and get a list of possible parameter options, rather than look at three different methods (especially if more methods than just those in this set happen to start with \"From\"). Another decent rule of thumb is \"name methods after verbs when you can,\" which votes in favor of something akin to \"Load,\" or at least \"LoadFrom...\"  "
    },
    {
        "ID": "11802",
        "Question": "I'm planning on using Vincent Driessen's branching model which I found great for my current development. I think Vincent approach is very general to any development project but I'm finding it difficult to handle the following scenario. I'm working on an application that will be branded to several customers, so each one of my bundles is a different branch that I rebase from develop branch each time a new build is going to be released. Each brand has its assets (images and text) and they do not conflict with changes in develop branch because in that branch I never touch the assets. My question is, now that I'm planning on using it, how can I handle different versions based on the same code base but with different assets? ",
        "Best answer": "I've skimmed over the article, so I can't be sure I got everything 100% correct, but here's my idea: can you simply edit your assets in the master branch? Or, if you're keeping your \"branded branches\", modify your assets only there. You can then simply merge the code from your develop, since you're not touching any assets there. To be honest, if assets are the only problem here, I'd create a config file (or a database table if you have one) for your application which would tell it which assets to load dynamically. This would eliminate any \"brand branches\" and make it easy for you to maintain your assets easily. "
    },
    {
        "ID": "11846",
        "Question": "I’m a long time developer (I’m 49) but rather new to object oriented development. I’ve been reading about OO since Bertrand Meyer’s Eiffel, but have done really little OO programming. The point is every book on OO design starts with an example of a boat, car or whatever common object we use very often, and they start adding attributes and methods, and explaining how they model the state of the object and what can be done with it. So they usually go something like \"the better the model the better it represents the object in the application and the better it all comes out\". So far so good, but, on the other hand, I’ve found several authors that give recipes such as “a class should fit in just a single page” (I would add “on what monitor size?\" now that we try not to print code!). Take for example a PurchaseOrder class, that has a finite state machine controlling its behavior and a collection of PurchaseOrderItem, one of the arguments here at work is that we should use a PurchaseOrder simple class, with some methods (little more than a data class), and have a PurchaseOrderFSM “expert class” that handles the finite state machine for the PurchaseOrder. I would say that falls in the “Feature Envy” or “Inappropriate Intimacy” classification of Jeff Atwood's Code Smells post on Coding Horror. I’d just call it common sense. If I can issue, approve or cancel my real purchase order, then the PurchaseOrder class should have issuePO, approvePO and cancelPO methods. Doesn’t that goes with the “maximize cohesion” and “minimize coupling” age old principles that I understand as cornerstones of OO? Besides, doesn’t that helps toward the maintainability of the class? ",
        "Best answer": "A class should use the Single Responsibility Principle. Most very large classes I have seen do to many things which is why they are too large. Look at each method and code decide should it be in this class or separate, duplicate code is a hint. You might have an issuePO method but does it contain 10 lines of data access code for example? That code probably shouldn't be there. "
    },
    {
        "ID": "11951",
        "Question": "We have an enormous number of nested SQL stored procedures, and a number of different ways of debugging them (varying from developer to developer). So far, our methods include:  An optional @debug parameter, that causes the procedure to printmessages as it runs (passing the variable down to called procedures). Checking @@servername against a table of test server names, and printing as above Writing everything the procedure does to a log table (in production and test)  Which of these is preferable (and why), or is there a better method we've overlooked? ",
        "Best answer": "You should also consider SQL Server Profiler.  In SQL Server Management Studio, select Tools -> SQL Server Profiler.  When the profiler window opens, select File -> New Trace...  (I don't know specifics about other RDBMSs, but they've got to have tools with similar functionality.) As the long-term solution, you should of course move the business logic out of stored procedures. "
    },
    {
        "ID": "12005",
        "Question": "Seriously, what's the big deal about having a few cycles in one's import graph?  I see it as a lesser evil than having super fine grained imports that make keeping track of where to look for what code an absolute nightmare. ",
        "Best answer": "Depending on your environment, cyclic dependencies across modules can make static linking impossible.  Module A cannot be linked until Module B is linked; but Module B depends on Module A and cannot be linked until Module A is linked.  This is why some environments - such as .NET and Delphi - don't allow this sort of thing at all. Other environments/compilers/linkers may be more forgiving, but that does not make it better design.  While it seems to be generally accepted that cyclic dependencies within data structures are sometimes necessary (entity models, doubly-linked lists, certain kinds of trees... you get the picture), it is almost always a serious design flaw to have a cyclic module dependency. Why?  Try to picture the initialization phase of an application, while modules are still being loaded.  Most modules count on the fact that all of their dependencies have been fully-loaded before running any initialization code.  Cyclic dependencies invalidate this assumption, because it's physically impossible (at least in this universe) for both modules to be loaded before each other.  Similarly, in the teardown phase, finalization code that makes perfectly reasonable assumptions may crash because a dependent module has already been unloaded by the runtime. The worst part is that on most operating systems, when you have cyclic module dependencies, the load order is deterministic but impossible to predict.  So an assumption about initialization order that turns out to be correct today may suddenly break tomorrow due a totally innocent change in a totally different part of the application.  Tracking down these bugs can be an excruciatingly painful process.  Cyclic imports within a single package/module/assembly are really another story entirely.  An \"import\" can mean so many different things depending on the context.  In many cases they are \"Considered Harmful\" simply because early compilers couldn't handle them, so you had to do your own cycle detection with a bunch of #ifdef directives (or similar) and obviously, after a certain number of these, you start to lose your mind.  But in modern-day object-oriented programming it's often considered good practice to have one file per class, which means that a cyclic import is merely a sign of a cyclic class dependency, which as I mentioned above, isn't necessarily such a bad thing unless it's unnecessary. If it's unnecessary, then it's a Bad Thing simply on account of the fact that any unnecessary complexity is a Bad Thing, and cyclic dependencies add complexity. "
    },
    {
        "ID": "12171",
        "Question": "Is there a size where you can copy under fair use for code you don't have a license for the purpose? For example, what if I copy a snippet that is (normally) 3 lines of code? Is that fair use? If it is fair use, what length is required before I need a license? ",
        "Best answer": "I am not a lawyer. However, you are absolutely free to use the following 3 lines of code in anything that you write: for (i = 0; i < 5; i++) {     printf(\"I am not a lawyer!\\n\"); }  .... That's purely functional code (not functional in the sense you might think, but functional by what it does). It doesn't actually accomplish anything; it simply exercises the constructs of the language. It supports stuff that does actual work, you type it often enough that you have a macro to produce it. But what you're talking about isn't 'fair use', it's is this even copyrightable or licensable in the first place? The only correct answer here is ask a lawyer. Ten lines of code from what? A highly specialized sorting algorithm? Some kind of firmware? One of the millions of configuration file parsers that have been floating around since the dawn of usenet? Code generated by another program that generates database classes based on your DB schema? But, prove to me that you wrote that for loop, or switch statement, and didn't just copy mine. At the point where assertions stop sounding absurd, you're probably at the point where you should talk to a lawyer, or at least your engineering manager / PM / etc.  I participate in several free/open source projects, some of them require a copyright assignment for anything not 'trivial'. All of them that have this requirement define 'trivial' to be ten lines of code added or modified. But that's just an arbitrary litmus test to establish some kind of standard; one line of mind-bending byte comparison is much more likely to be subject to copyright than a 10 line switch.  My snippet gallery consists of hundreds of functions, all of them have the original author's information in doxygen style comments, as well as license info (if any, most are just public domain). Unless clearly trivial (as in my humorous example), I would not re-use code unless I know that I have permission to do so. I also, always, follow the rules of whatever license applies. And to help my future self (or future maintainers), I like leaving a link to where I found stuff in a comment, even if that's the name of a tar ball I turn in on a USB stick if I leave the company.  "
    },
    {
        "ID": "12186",
        "Question": "I've seen a lot of different ways to [or not to] comment out the code, specially patterns on desciptions of function details and file purposes. I'd like to know what is most used pattern to do that [I'm specially interested on documentation generators and their patterns] ",
        "Best answer": "Developers in Visual Studio tend to use the /// <summary /> because apart from being able to generate an Xml usable as input for document generators, you also get tooltips during development when using the commented method/class. "
    },
    {
        "ID": "12292",
        "Question": "Let's say you have a static method that looks something like this: public static bool Foo() {      var bar = new Bar();     //do some stuff here }  This method as it stands can be a real headache to unit test. What is the best practice to refactor this so that it can be testable, without turning it into an instance method or changing the method signature? ",
        "Best answer": "It really depends on what Bar is.  If it's something simple then your Foo method is already testable, you just need to specify your expectations and invoke it statically, e.g.: Assert.IsTrue( FooContainer.Foo() );  But if Bar encapsulates, say, your database access layer, then you can't test Foo without a real database, which is why (thanks @ysolik), static methods are death to testability.  Or, in the words of Michael Feathers, \"don't hide a TUF in a TUC\" (TUF stands for a test-unfriendly feature, TUC stands for a test-unfriendly construct).  If Bar is indeed test-unfriendly, then sorry, it doesn't work well without making Foo an instance method.  You would need to redesign your code first: public class FooContainer {     public bool Foo() {         var bar = new Bar();         //...     } }  When Foo is no longer static, you can invoke it on an instance of FooContainer: var container = new FooContainer(); Assert.IsTrue( container.Foo() );  The next step is to extract an interface from Bar (let's call it IBar) and inject it into FooContainer: public class FooContainer {     private readonly IBar m_bar;     public FooContainer( IBar bar ) { m_bar = bar; }     public bool Foo() {         // don't create another Bar, use m_bar     } }  Now you can mock/stub IBar with your favourite isolation framework and test your FooContainer code in isolation from its dependencies. "
    },
    {
        "ID": "12444",
        "Question": "In maths, a variable means you can put any number there, and an equation will still be true: root(square(x)) = abs(x)  In programming languages, this is not so: a var can change. In Python: y = (x**2)**.5 x *= 2 assert y == abs(x)  will raise an exception, since x in the last line is not the same. Are there programming languages that use immutable variables? ",
        "Best answer": "Purely functional programming languages, such as Haskell, enforce immutable variables. I like to call them identifiers though, instead of variables. "
    },
    {
        "ID": "12466",
        "Question": "C is ubiquitous, and C++ nearly as much, but I'm curious which other languages follow a similar model of header files.  Specifically, in which other languages is it idiomatic to edit pairs or groups of \"header\" and \"implementation\" files?  (A group as in multiple headers with one corresponding implementation file or a single header with multiple implementation files, as also seen in C.)  For example, the pair \"blah.h\" and \"blah.c\". C's header files are tied into the C preprocessor, but that's not the detail I'm focusing on here.  For example, PHP has various include mechanisms, but you don't have a pair/group of \"blah-header.php\" plus \"blah-notheader.php\". Some languages generate a file from source in a one-to-one mapping, such as Java, but that's not what I'm talking about either.  I'm interested in cases where the programmer directly edits both/all files in the pair/group. Perhaps to put it another way: which languages have a declaration file (\"header\") and definition file (\"implementation\") such that a person would generally edit both files in tandem? ",
        "Best answer": "Ada  Any Ada package on the other hand consists of two parts, the specification (header) and body (code). The specification however is a completely stand alone entity which can be compiled on its own and so must include specifications from other packages to do so. An Ada package body at compile time must refer to its package specification to ensure legal declarations, but in many Ada environments it would look up a compiled version of the specification.    --file example.ads, the package specification. package example is : : end example;  --file example.adb, the package body. package body example is : : end example;   Source: http://www.adahome.com/ammo/cpp2ada.html#2 "
    },
    {
        "ID": "12672",
        "Question": "Imagine the following scenario: You've detected that your (or someone else's) program has a bug - a function produces the wrong result when given a particular input. You examine the code and can't find anything wrong: it just seem to bog out when given this input. You can now do one of two things: you either examine the code further until you've found the actual cause; or you slap on a bandage by adding an if statement checking if the input is this particular input - if it is, return the expected value. To me, applying the bandage would be completely unacceptable. If the code is behaving unexpectingly on this input, what other input that you've missed will it react strangely to? It just doesn't seem like a fix at all - you're just shoveling the problem under the rug. As I wouldn't even consider doing this, I'm surprised at how often the professors and books keep reminding us about how applying \"bandage\" fixes is not a good idea. So this makes me wonder: just how common are these kinds of \"fixes\"? ",
        "Best answer": "Time/deadline pressures are one reason. If you are up against a tight deadline and you've got your boss breathing down your neck (possibly literally!) then doing this and thinking \"I'll come back and fix this later\" is very tempting and might be the only thing you can do. Of course the number of times you actually go back and fix it properly are very few and far between because you have a new problem that needs fixing yesterday. "
    },
    {
        "ID": "12777",
        "Question": "I've heard it said that the inclusion of null references in programming languages is the \"billion dollar mistake\".  But why?  Sure, they can cause NullReferenceExceptions, but so what?  Any element of the language can be a source of errors if used improperly. And what's the alternative?  I suppose instead of saying this: Customer c = Customer.GetByLastName(\"Goodman\"); // returns null if not found if (c != null) {     Console.WriteLine(c.FirstName + \" \" + c.LastName + \" is awesome!\"); } else { Console.WriteLine(\"There was no customer named Goodman.  How lame!\"); }  You could say this: if (Customer.ExistsWithLastName(\"Goodman\")) {     Customer c = Customer.GetByLastName(\"Goodman\") // throws error if not found     Console.WriteLine(c.FirstName + \" \" + c.LastName + \" is awesome!\");  } else { Console.WriteLine(\"There was no customer named Goodman.  How lame!\"); }  But how is that better?  Either way, if you forget to check that the customer exists, you get an exception. I suppose that a CustomerNotFoundException is a bit easier to debug than a NullReferenceException by virtue of being more descriptive.  Is that all there is to it? ",
        "Best answer": "The problem is that because in theory any object can be a null and toss an exception when you attempt to use it, your object-oriented code is basically a collection of unexploded bombs. You're right that graceful error handling can be functionally identical to null-checking if statements.  But what happens when something you convinced yourself couldn't possibly be a null is, in fact, a null?  Kerboom.  Whatever happens next, I'm willing to bet that 1) it won't be graceful and 2) you won't like it. And do not dismiss the value of \"easy to debug.\"  Mature production code is a mad, sprawling creature; anything that gives you more insight into what went wrong and where may save you hours of digging. "
    },
    {
        "ID": "12807",
        "Question": "There is a colleague of mine who constantly writes: if (someBool == true)  It drives me up the wall!  Should I make a big deal of it or just drop it? ",
        "Best answer": "It's only redundant code, not life or death.  However.... If it's happening a lot, it could be a problem with how someBool is being named. A good name can go a long way towards eliminating the need for the ==true if(IsSomeCondition)  or if(hasCondition)  or if(somethingExists)  for example. "
    },
    {
        "ID": "12808",
        "Question": "Say you've started an open source project and are posting it on a public repository.  (like I have, using Codeplex.) One of the key files just makes the connection to the database, contains the login/password, and is just included from any other source file that needs a database connection. What's the best way to share the project without giving out your password? So far I've specifically removed it before committing any changes, but I'm thinking there has to be a better way. ",
        "Best answer": "One trick learned in the ASP classic days, was to have the connection string in an outside file. ''// Init the ADO objects  & the stored proc parameters cmd.ActiveConnection = \"file name=c:\\udl\\mydb.udl\" cmd.CommandText = sqlstmt cmd.CommandType = adCmdStoredProc ....  It works in ADO, don't know your environment "
    },
    {
        "ID": "13061",
        "Question": "I was just thinking of something that would be really cool to have in my if-elif-else controls.  if condition:     stuff() elif condition:     otherstuff() then:     stuff_that_applies_to_both() else:     stuff_that_doesnt_aply_to_either()  So basically a then will be run when any of the conditions are run EXCEPT the else condition. Do you think this is useful? It's similar to the try-except-else of python. I think some of you are nitpicking a very preliminary implementation. The then block would be just like the else block in a try-except block in python. The real reason I suggest this is for situations like this.  m = {} if condition == '1':     m['condition'] = condition elif condition2 == '3':     m['condition2'] = condition2 elif condition3 == 'False':     m['condition3'] = True then:     run_test_that_relies_on_one_of_the_conditions_being_true()  return m  The then block is scoped to the first if just like the else is. So nesting works fine. And if you need to run a method before the if statements, that really has nothing to do with this use case. ",
        "Best answer": "I think it looks horrible. If you want code to run after a variety of conditions then either (a) recheck those conditions or (b) set a variable to indicated success status. "
    },
    {
        "ID": "13091",
        "Question": "Which of these is better for maintainability? if (byteArrayVariable != null)     if (byteArrayVariable .Length != 0)          //Do something with byteArrayVariable   OR if ((byteArrayVariable != null) && (byteArrayVariable.Length != 0))   //Do something with byteArrayVariable   I prefer reading and writing the second, but I recall reading in code complete that doing things like that is bad for maintainability.   This is because you are relying on the language to not evaluate the second part of the if if the first part is false and not all languages do that.  (The second part will throw an exception if evaluated with a null byteArrayVariable.) I don't know if that is really something to worry about or not, and I would like general feedback on the question. Thanks. ",
        "Best answer": "I think the second form is fine, and also more clearly represents what you're trying to do. You say that...  I recall reading in code complete that doing things like that is bad for maintainability. This is because you are relying on the language to not evaluate the second part of the if if the first part is false and not all languages do that.  It doesn't matter if all languages do that. You're writing in one particular language, so it only matters if that language does that. Otherwise, you're essentially saying that you shouldn't use the features of a particular language because other languages might not support those features, and that's just silly. "
    },
    {
        "ID": "13143",
        "Question": "2 years ago I starded learning AS3 in order to get hired at a web design company. A few months later, I ditched it, because I discovered that I'm better at design; so now I'm a web designer. Recently, I decided that knowing JavaScript would be nice and helpful, so i started with Essential JavaScript Training from Lynda.com. Untill today, I was under the impression that my knowledge of programming was somewhat basic. What happened today...? I learned (through trial and error) that variables are only valid in the functions that they're defined in. This turned my world upside down. I was like: \"that makes sense now...\" thinkin of the all the headaches that the lack of this specific piece of knowledge gave me. How could I have missed such a fundamental thing while learning AS3 (and now JS)? I didn't. And I remember reading a at least three books on AS3, but none of them taught me about programming. So what I want to ask you, is if you could recommend me a good JavaScript book from which i can learn programming, too, besides syntax. Thanks! And sorry for my bad english :) ",
        "Best answer": "As the author of Lynda.com's JavaScript Essential Training, I feel like I kind of have to jump in here… IIRC, I covered variables and global versus local scope in Example 4 of Lesson 4 (\"Creating prompts for users\") when I first talked about var. If I wasn't clear enough, I apologize! If you're looking for a solid beginner-level JavaScript book, may I suggest JavaScript & Ajax for the Web: Visual QuickStart Guide, 7th edition? Yes, I'm the co-author (with Tom Negrino), but I've received a lot of compliments on it from people who had never previously written code—they said that other books just confused them, and ours was the first that didn't assume they were already programmers. Here's what it says on page 36:  Using var does two things:  It tells JavaScript to create a variable (that is, to set aside some space in memory for this new object). It defines the scope of the variable, that is, where JavaScript needs to know about this particular object (see the What Is Scope? sidebar). If a variable is created inside a function, other functions don’t have access to it, as it’s local to that function. If it’s created outside any function, it’s global, and everything has access to it. In this script, we’re creating the ans global variable.   You said your previous books were on AS, so hopefully JS&A:VQS wasn't one of the books you had trouble with… And if you have any further questions about particular bits of JavaScript code, StackOverflow is probably the place for them.  Edited to add… Just my 2¢: I suggest that you—for now—ignore the Douglas Crockford recommendations. Yes, he does know his stuff (although I disagree with some of what he says, and I suspect he disagrees with 90% of how/what I teach) -- but I cannot honestly recommend his work for someone who doesn't have solid programming experience. His stuff is for intermediate/advanced-level scripters, not for someone at your current stage. "
    },
    {
        "ID": "13443",
        "Question": "A few weeks ago, my class was assigned to translate to Portuguese the book Real World Haskell. As I did the translation of the text and comments, I started to wonder if I should translate the code as well, as the instructor suggested. For example: data BookInfo = Book Int String [String]               deriving Show would become data InfoLivro = Livro Int String [String]                deriving Show Since I haven't read any software-related books in Portuguese, I don't know if that's a common practice, neither if it should be done this way. In the end, the code is a language mix (perhaps the example in Haskell is not a good one, since you can create synonyms quickly like type CadeiaDeCaracteres = String, but you get the point). So it doesn't really matter how hard you try, you'll have to rely on the reader previous experience with some sort of basic English words.  Knowing this, I really don't see the point in translating code, since we learn in the early days of our coding life it should be written in the universal language. Nevertheless, if the surrounding text (comments, for example, and text itself in a book) needs to be translated, what is possible and feasible in this matter? Can you provide me with some guidance of what to do? ",
        "Best answer": "In my opinion, no. Most programmers are forced whether they want it or not, to learn english, and nowadays it is the lingua franca of the software world.  In my experience, however, books written by authors in one of the stronger languages, have a tendency to do that - so far I've seen the practice in books in german, french and russian (well, russian is a little different of a case, since they use different alphabet as well). It is a rule of thumb that it depends on the country's dependency on english. The text is of course translated, the bigger comments also (one that describe the workings of a program in greater detail), then somewhat more rare, smaller comments and variable names. I've also seen the case where variable names were translated, but smaller comments were left in english. I believe the author however, in that particular case, was counting on his audience to have a working english knowledge. Sorry if this didn't solve your dilemma, but there still isn't a consensus on this one :-/ "
    },
    {
        "ID": "13691",
        "Question": "I am very interested in Python for programming on the JVM, and I've worked in Java and Ruby (not JRuby) a lot, and to a certain extent in Groovy. What are the limits to the Java-Jython and Java-JRuby integration right now? What about Groovy: are there any things that a Java class can do that a Groovy class cannot? And what about IDE integration (mostly Eclipse, but IntelliJ and Netbeans are also interesting)? I'm not interested in whether Python, Ruby or Groovy is better/more-concise/whatever. I'm just interested in how well they are working in the JVM and tools (especially IDEs) right now. My main interest is not inside a web server, if that matters. Simple examples of getting a HelloWorld which extends a custom Java class and implements a custom Java interface would be very useful to me.  ",
        "Best answer": "I have no experience of JRuby nor Groovy. But Jython:  Excellent integration with NetBeans. NetBeans can run Python programs with Jython almost straight out of the box, just install the \"Jython Distribution\" plugin and you're done. Apparently Eclipse works as well. See chapter Using Jython in an IDE in the Jython Book. Java-Jython integration is excellent. Calling Java from Jython is super easy. Calling Jython from Java is not quite as straightforward (Java was not designed with Jython in mind), but still fairly easy. I've mostly had luck with creating a class in Jython (extending a Java class/interface), and then creating instances of that class in Java using an object factory. See Jython and Java Integration for how-to.  Extending a Java class in Jython works like this: from javax.swing import JFrame, JButton  class MyFrame(JFrame):      def __init__(self):         self.defaultCloseOperation = JFrame.EXIT_ON_CLOSE         self.size = (300, 300)         self.add(JButton('Click Me!', actionPerformed=self.print_something))         self.visible = True      def print_something(self, event):         print 'Clicked!'  Implementing interfaces works similarly, just import the interface, \"extend\" it using a class definition such as class MyClass(MyInterface) and implement what's needed.  My only criticism against Jython is that its raw performance is not very good (and that's mostly because it uses massive reflection to interact with Java). But then, raw performance is usually pretty irrelevant for a scripting language. "
    },
    {
        "ID": "13711",
        "Question": "We're dealing with an interesting problem on StackOverflow. We've got a whole bunch of little \"needs to be done soon-ish\" tasks.  An example is updating \"Related Questions\" lists.  What we've done in the past is to piggy-back those tasks onto some users' page loads. This was never ideal, but it wasn't really noticeable.  Now that SO has passed the 1,000,000 question mark, those unlucky users are starting to feel it. The natural solution is to actually push these tasks into the background.  There are two broad ways of doing this I'm considering. 1. In IIS as a custom Thread-Pool/Work-Queue Basically, we spin up a few (non-ThreadPool, so as to not interfere with IIS) threads and have them services some collections we're shoving Funcs into. The big pro here is simplicity.  We don't have to worry about marshaling anything, nor do we have to make sure some external service is up and responding. We also get access to all of our common code. The con is, well, that we shouldn't use background threads.  The objections I know of are all centered around starving IIS (if you use ThreadPool) and the threads dieing randomly (due to AppPool recycling). We've got existing infrastructure to make the random thread death a non-issue (its possible to detect a task has been abandoned, basically), and limiting the number of threads (and using non-ThreadPool threads) isn't difficult either.  Am I missing any other objections to in IIS process thread-pooling/work-queues?  Moved to StackOverflow, as it wasn't really addressed here. 2. As a Service Either some third-party solution, or a custom one. Basically, we'd marshal a task across the process boundary to some service and just forget about it.  Presumably we're linking some code in, or restricted to raw SQL + a connection string. The pro is that its the \"right way\" to do this. The cons are that we're either very restricted in what we can do, or we're going to have to work out some system for keeping this service in sync with our code base.  We'll also need to hook all of our monitoring and error logging up somehow, which we get for free with the \"In IIS\" option. Are there any other benefits or problems with the service approach? In a nutshell, are there unforseen and insurmountable problems that make approach #1 unworkable and if so are there any good third-party services we should look into for approach #2? ",
        "Best answer": "There is actually a third way in Windows to run background services, and it is very common in the UNIX world.  The third way is a CRON job that runs a piece of your infrastructure.  In Windows this is known as the task scheduler and is very common for running code on a scheduled basis.  To use this you would create a command-line app that is executed on a pre defined schedule.  The advantage of this is that you don't have to worry if the process stays up and running like a service, because if it fails for some reason, it will just start up next time. As for marshaling specific tasks, you really just need to store these tasks in a persistent binary storage.  Until the command line app picks them out of the storage and executes them.  I have done this in the past using the Cassandra database as a Session State Provider for stuffing background tasks for specific users in the Cassandra database, and then having the commandline pick them out and execute them for the user. This may not have been the typical marshaling solution, but it worked out very well for me and it turned out to be a very elegant solution, because the scheduled tasks survived shutdowns, network problems, and any machine could execute the task since it was centrally stored. Shameless promotion, but this is my project and the solution I just briefly detailed is why I created the project: http://github.com/managedfusion/fluentcassandra/ "
    },
    {
        "ID": "13746",
        "Question": "I keep coming across this term hooks in various programming articles. However I don't understand what they are, and how can they be used. So I just wanted to know what is the concept of hooks; if someone could link me to some examples, particularly in the context of web development, it would be great. ",
        "Best answer": "My answer pertains to WordPress which is written in PHP, but this is a general development mechanic so it shouldn't really matter, despite the fact that you put 'python' in your question title. One good example of usage of hooks, coincidentally in web development, are WordPress' hooks. They are named appropriately in that they allow a way to 'hook into' certain points of the execution of a program. So for example, the wp_head is an 'action' that is emitted when a WordPress theme is being rendered and it's at the part where it renders the part that's within the <head> tags. Say that you want to write a plugin that requires an additional stylesheet, script, or something that would normally go within those tags. You can 'hook into' this action by defining a function to be called when this action is emitted. Something like: add_action('wp_head', 'your_function');  your_function() could be something as simple as: function your_function() {     echo '<link rel=\"stylesheet\" type=\"text/css\" href=\"lol.css\" />'; }  Now, when WordPress emits this action by doing something like do_action('wp_head');, it will see that your_function() was 'hooked into' that action, so it will call that function (and pass it any arguments if it takes any, as defined in the documentation for any particular hook). Long story short: It allows you to add additional functionality at specific points of the execution of a program by 'hooking into' those points, in most cases by assigning a function callback. "
    },
    {
        "ID": "13757",
        "Question": "How do you correctly or erroneously pronounce programming terms?  Any that you find need strict correction or history into the early CS culture? Programming char = \"tchar\" not care? ! = bang not exclamation? # = pound not hash? Exception #! = shebang * = splat not star? regex = \"rej ex\" not \"regg ex\"? sql = \"s q l\" not \"sequel\" (already answered, just i.e.) Unixen | = pipe not vertical bar? bin = bin as in pin , not as in binary? lib = lib as in library , not as in liberate? etc = \"ett see\" , not \"e t c\" (as in /etc and not \"&c\") Annoyance / = slash not backslash LaTeX = \"laytek\" not \"lay teks\" ",
        "Best answer": "To summarize my own (North American) experience:  char may be pronounced both ways: like \"char\" in \"charcoal\", or close to \"care\"; never like \"car\" ! is an \"exclamation point\" # is a \"pound sign\" (probably an Americanism) * is an \"asterisk\" (never in 15 years heard anyone call it \"splat\") RegEx with a hard \"g\" because it's regular, not rejular. SQL: heard both \"ess-queue-ell\" and \"sequel\"; but (Microsoft's) SQL Server is much more often pronounced \"sequel server\". bin is like a recycle bin; not \"bine\" LaTeX's ancestor is TeX.  The \"tech\" pronunciation goes all the way back to TeX's creator Donald Knuth.  Actually the X was supposed to sound more like the German \"ch\" in Bach.  \"La-tech\" is the only way LaTeX is pronounced in the US research community; if you pronounce it like a sort of rubber, you give away that you don't belong to it.  "
    },
    {
        "ID": "13786",
        "Question": "I was asked to make some small technical presentation about specific application scalability. The application is developed using Java, Spring MVC, Hibernate. I have access to the application source code. How can I measure software scalability (using sources) and what metrics do I need to look after when measuring software scalability?  ",
        "Best answer": "I would start with reading Wikipedia article on the subject. In short, scalability is how system performance grows with adding more resources or, alternatively, how the resource utilization grows with increasing load. For example, how many concurrent users can your site handle until response time grows beyond 0.3 sec? The same question after you double the available RAM/disk/CPU/etc. You probably can use your knowledge of the application internals to decide which parameters are worth checking.  Setup a test bench with a server machine and one or more client machines. Use some tool to limit the amount of resources available to the server (e.g. ulimit) or run some interfering application on the server. Measure how the server deals with client requests. Repeat the above gradually increasing/decreasing interfering load/available resources. At the end you get n-dimensional space with  dots in it. It may be simpler to change only one parameter at a time while fixing all the others at some typical value (or a couple of values). In this case you can represent the result as a bunch of 2D graphs with server performance (e.g. number of users/requests) on one axis and resource utilization/availability on the other. There are more complex scenarios where your application uses several servers for several part of the application and you can vary their amount and ratio, but I guess it's not your case. At most, you probably may want to vary the number of threads/processes, if this matters. If you measure the whole application you usually don't need source code access. However, you may be interesting in measuring some specific part of the code (e.g. only DB or UI). Then you can use the source code to expose only this module for measurements and run your tests. This is called a microbenchmark. If you're looking for examples, there is a plenty of them in academic articles. Search the google scholar for performance evaluation + your preferred terms. "
    },
    {
        "ID": "14089",
        "Question": "When you write wrappers for APIs how do you handle usage errors? Do you assume that the user uses it right and write the wrapper such that it makes the call to the server and let the server return the error? Or do you check for the missing parameters and return an error? If yes, how do you convey the error? a string or an error code? ",
        "Best answer": "Think wrapper vs adapter vs bridge from a design pattern point of view. You might have a new perspective and find your answer from there. E.g. Adapters and Wrappers from Andy Kramek and lots more if you google. "
    },
    {
        "ID": "14162",
        "Question": "I'm trying to decide if I need to reassess my defect-tracking process for my home-grown projects.  For the last several years, I really just track defects using TODO tags in the code, and keeping track of them in a specific view (I use Eclipse, which has a decent tagging system). Unfortunately, I'm starting to wonder if this system is unsustainable.  The defects I find are typically associated with a snippet of code I'm working on; bugs which are not immediately understood tend to be forgotten, or ignored.  I wrote an application for my wife which has had a severe defect for almost 9 months, and I keep forgetting to fix it. What mechanism do you use to track defects in your personal projects?  Do you have a specific system, or a process for prioritizing and managing them? ",
        "Best answer": "Fogbugz (free individual license) if its a longish project or a simple to do list (using Google tasks) "
    },
    {
        "ID": "14176",
        "Question": "Does anyone know (or, I guess, I have gut feeling about) how the download size of a software product affects potential users, bandwidth not withstanding? For example: Does a bigger download make them    believe that is it more full-featured    than it is (like huge .NET Runtimes    if deployed with your package)? Reason is, I'm developing a VSTO add-in where there is my add-in (small MB), the VSTO run-time, .NET runtime, and Primary Interops. This could make it more than 70 MB in total size, just for an add-in that does a couple of things well. But that's all they are - just a couple of things. With VSTO deployments, I know I could deploy a smaller package size by assuming they've got the .NET runtime (and when they don't, initialize the download/install of that, but it seems like a clunky way to make just an ass out of me). What I really want is for people to just download the app (the trial version) to see if they like it. Is there some kind of magic happy threshold - like users of non-big name apps are more likely to download something that is under 20 MB than 50 MB? ",
        "Best answer": "Who are you targeting? Most people couldn't care less about download sizes. If you're targeting tech users, then I'd say most of them would prefer a smaller download, which signals that your software isn't bloated. But even then, it's really not a huge deal. I wouldn't include runtimes in a download if they are several times larger than the application/plugin itself, which sounds to be the case. I'd have the installer search for prerequisites, and if one isn't found, either (1) prompt the user to download and install (ask, and then launch a web browser), or (2) automatically download and install, after asking for permission to go online. "
    },
    {
        "ID": "14293",
        "Question": "Many people praise Sinatra's ability to create simple projects in a single file.  This is great and all but what if I want to use Sinatra for slightly larger project? I'm fairly new to Ruby as a whole but have already found a couple ways to create a Sinatra application with separate models files, partitioning different groups or URLs into individual files, etc... But is there any best practice for this? ",
        "Best answer": "The step to take is to partition the application into multiple parts at the file level. Instead of having all of the routes in one file, split them up into logically separated files with different functionality groups in different files, which are all then require'd back into the main Sinatra application/Rackup file. Although this makes your file structure prettier, it does not implement any true compartmentalization or organization beyond superficial divisions. The solution to this that seems to have garnered the most popularity and acceptance is the Padrino framework, which runs on top of and expands upon the Sinatra core to add controllers (for compartmentalization) and a bunch of Django-like features (drop-in authentication, administration, etc.). "
    },
    {
        "ID": "14297",
        "Question": "I attended a software craftsmanship event a couple of weeks ago and one of the comments made was \"I'm sure we all recognize bad code when we see it\" and everyone nodded sagely without further discussion. This sort of thing always worries me as there's that truism that everyone thinks they're an above average driver. Although I think I can recognize bad code I'd love to learn more about what other people consider to be code smells as it's rarely discussed in detail on people's blogs and only in a handful of books. In particular I think it'd be interesting to hear about anything that's a code smell in one language but not another. I'll start off with an easy one:  Code in source control that has a high proportion of commented out   code - why is it there? was it meant   to be deleted? is it a half finished   piece of work? maybe it shouldn't have   been commented out and was only done   when someone was testing something   out? Personally I find this sort of   thing really annoying even if it's just the odd line here and there, but when you see large blocks interspersed with the rest of the code it's totally unacceptable. It's   also usually an indication that the rest of   the code is likely to be of dubious   quality as well.  ",
        "Best answer": " /* Fuck this error */  Typically found inside a nonsense try..catch block, it tends to grab my attention. Just about as well as /* Not sure what this does, but removing it breaks the build */. A couple more things:  Multiple nested complex if statements Try-catch blocks that are used to determine a logic flow on a regular basis Functions with generic names process, data, change, rework, modify Six or seven different bracing styles in 100 lines  One I just found: /* Stupid database */ $conn = null; while(!$conn) {     $conn = mysql_connect(\"localhost\", \"root\", \"[pass removed]\"); } /* Finally! */ echo(\"Connected successfully.\");  Right, because having to brute force your MySQL connections is the right way do things. Turns out the database was having issues with the number of connections so they kept timing out. Instead of debugging this, they simply attempted again and again until it worked. "
    },
    {
        "ID": "14435",
        "Question": "I have a subversion server setup that I need to look after several projects, grouped by language, then client (company) and then by project e.g. repos/  flex3      \\com1           \\project1           \\project2      \\com2           \\project1           \\project2           \\project3  flex4      \\com1          \\projectx      \\com2          \\projecty  java     \\projectz  repos is my repository root and then I have the 3 repositories inside (create with svnadmin create) flex3, flex4 and java, then flex3 should have two folders com1 and com2 for different clients, each will contain different \"project\" repos. I have a feeling I have done this wrong, should I simply create the top level structure as normal folders and then make the com1 and com2 etc into repos with \"svnadmin create\" so that different projects can be added directly below them. Is this correct? Thanks ",
        "Best answer": "I think you should ask yourself following questions before deciding repository layout for your company.   What data do you expect to live in your repository (or repositories), and   how will that data be organized? Where will your repository live, and how will it be accessed? What types of access control and repository event reporting do you   need? Which of the available types of data store do you want to use?   Here you will find full article and how to answer above queries... We have been using Visual SVN Server for quiet time to manage our project repositories.  Have a look at Visual SVN Server recommended repository layout Said that, we are not using Visual SVN recommended layout; because we have projects which may overlap technologies e.g. an ASP.NET project may have flash module or ASP admin (for some legacy applications). And there is access restriction each projects. This is what we are using, and it seems to be working fine so far. Some tasks are very easy, especially repo backup routines, access management and trunk, branch and tag structure. + Repositories (root)     + Project 1 (repository)     + .......     + Project 2 (repository)     + .......     + Project 3 (repository)     + .......  "
    },
    {
        "ID": "14582",
        "Question": "Good afternoon I would like to know how do you guys organize your project folders? I had once a boss that suggest me to organize by Customers. Projects | |----Customer 1      |---- A Cool Solution 1            |---- source                  |---- version1.0                  |---- version1.1            |---- docs                  |---- analysis                  |---- meetings                  |---- manuals |----Customer 2 |----Customer 3  A friend of mine told me to organize tem by Technology Projects | |----.NET      |---- C#           |---- Customer 1                      |---- A Cool Solution 1                       |---- source                             |---- version1.0                             |---- version1.1                       |---- docs                             |---- analysis                             |---- meetings                             |---- manuals |----Ruby |----PHP  And you? Do you have a clever way to organize your project folders? ",
        "Best answer": "I'm pretty flat: /Projects Some varation getting there depending on box, but behind that there are just lots of individual folders for projects. Real deal lives in source control anyhow, so this is just the temporary local home.  "
    },
    {
        "ID": "14720",
        "Question": "Imagine yourself hired by a new startup backed with few millions coming from venture capitalists. Your mission: organize the development of the next killer app. 25 developers is too much to take care of each individually, so what decision(s) you would make to motivate them? I will appreciate any answers from stock options to free cookies ;) Of course the trick here (unless you are really a manager of a such startup), is put yourself in the shoes of one of those programmers. EDIT: it's an imaginary context. The purpose of this story is to stimulate your wishes. I want to capture what motivates developers. ",
        "Best answer": "Here's my checklist, in no particular order:  Awesome computers to develop on. At least double the power of the target user,  with plenty of RAM and large/multiple monitors... ~$3 to 5k budget. Nice headphones for whoever needs them, when they prefer to work to music. Excellent development tools to work with. This depends somewhat on your target environment, but Visual Studio / Eclipse / whatever is the best for the job. This includes things like continuous integration/build servers. Fast internet access - perhaps with a caching proxy server to pre-cache things like SO, TheRegister, Reddit, etc Very few meetings - only what is absolutely necessary and a hard limit on their length (we use a timer); think 'stand-up meeting' like Scrum. Healthy atmosphere in which to work. Daylight, fresh air options, stable aircon, plants, pictures, good lighting. 10 to 20% downtime to learn something new or flex your skills a little. A water cooler for each group of desks that is regularly maintained. Market-competitive salaries with performance-related bonuses, where performance and the remuneration are clearly defined. Performance bonuses would likely be company profit share. Encourage a collaborative work ethic; have tech debriefs to share learning, rotate people around teams to build their experience. Free drinks (non-alcoholic). A fruit basket for healthy snacks that don't ruin lunch. Establish a level of professional respect from the other parts of the business for the software development department and vice versa. This is a long-term, fuzzy target, but there are ways and means of establishing it. Clear communication to and from management of expectations and delivery on those expectations. Clear priorities for work items, reviewed regularly. Use of best practices in terms of SDLC methodologies - Agile/Scrum, etc. Clear and documented procedures on what has to be done, why and how for important stuff like release management. Whatever can be automated would be, so this is just the manual bits - there's always some. Supportive environment for when things don't go so well. No kicking people when they cause bugs, but helping them learn from their mistakes. 24x7 access to the building and remote access for when team members get inspiration outside of normal hours. Whiteboards for prototyping/thinking out loud. Celebrations of success - whether a team lunch or a trip to the Grand Prix at the weekend, it's important to recognise great effort and great results.  I would not have:  Nerf guns/frisbees/pool table/toys. The work environment is where we work. There's lots of fun to be had while doing the job without playing soldiers around colleagues that are trying to focus. Free food - people should take a break to go out and get something to eat. Internet censorship - I'd leave it up to the individuals to exercise their judgement.  "
    },
    {
        "ID": "14789",
        "Question": "In a now deleted question titled \"What naming guidelines do you follow?\", the author says:  Also I prefer to code using hungarian notation from Charles Simonyi.  I've run in to several programmers who still prefer to use Hungarian, mostly of the Petzold/Systems Hungarian flavor.  Think dwLength = strlen(lpszName). I've read Making Wrong Code Look Wrong, and I understand the rationale for Apps Hungarian, where domain-type information is included in the variable names.  But I don't understand the value in attatching the compiler type to the name. Why do programmers still persist on using this style of notation?  Is it just inertia?  Are there any benefits that outweigh the decreased readability?  Do people just learn to ignore the decorators when reading the code, and if so, how do they continue to add value? EDIT: A lot of answers are explaining the history, or why it is no longer relevant, both of which are covered in the article I cited. I'd really like to hear from anyone out there who still uses it.  Why do you use it?  Is it in your standard?  Would you use it if it wasn't required?  Would you use it on a new project?  What do you see as the advantages? ",
        "Best answer": "At the moment I still use Hungarian for exactly three reasons, judiciously avoiding it for everything else:  To be consistent with an existing code base when doing maintenance. For controls, eg. \"txtFirstName\". We often need to distinguish between (say) \"firstName\" the value and \"firstName\" the control. Hungarian provides a convenient way to do this. Of course, I could type \"firstNameTextBox\", but \"txtFirstName\" is just as easy to understand and is less characters. Moreover, using Hungarian means that controls of the same type are easy to find, and are often grouped by name in the IDE. When two variables hold the same value but differ by type. For example, \"strValue\" for the value actually typed by the user and \"intValue\" for the same value once it has been parsed as in integer.  I certainly wouldn't want to set up my ideas as best practice, but I follow these rules because experience tells me that it occasional use of Hungarian benefits code maintainability but costs little. That said, I constantly review my own practice, so may well do something different as my ideas develop.  Update: I've just read an insightful article (archive mirror) by Eric Lippert, explaining how Hungarian can help make wrong code look wrong. Well worth reading. "
    },
    {
        "ID": "14831",
        "Question": "How do you go about teaching Exception Handling to Programmers. All other things are taught easily - Data Structures, ASP.NET, WinForms, WPF, WCF - you name it, everything can be taught easily.  With Exception Handling, teaching them try-catch-finally is just the syntactic nature of Exception Handling.  What should be taught however is - What part of your code do you put in the try block? What do you do in the catch block? Let me illustrate it with an example.  You are working on a Windows Forms Project (a small utility) and you have designed it as below with 3 different projects.   UILayer BusinessLayer DataLayer  If an Exception (let us say of loading an XDocument throws an exception) is raised at DataLayer (the UILayer calls BusinessLayer which in turns calls the DataLayer), do you just do the following //In DataLayer try {     XDocument xd_XmlDocument = XDocument.Load(\"systems.xml\"); }  catch(Exception ex) {     throw ex; }  which gets thrown again in the BusinessLayer and which is caught in UILayer where I write it to the log file?  Is this how you go about Exception Handling? ",
        "Best answer": "To explain exception handling, explain the concept behind it: The code where an error occurs frequently does not know how to properly handle that error.  The code that knows how to handle it properly could be the function that called that one, or it could be further up the call stack. When you write a routine that calls a routine that might throw an exception, if you know how to handle that error correctly, put the call in a try block and put the error-handling code in the catch block.  If not, leave it alone and let something above you in the call stack handle the error. Saying \"catch ex, throw ex\" is not a good way to do exception handling, since it doesn't actually handle anything.  Plus, depending on how the exception model in your language works, that can actually be harmful if it clears stack trace information that you could have used to debug the issue.  Just let the exception propagate up the call stack until it hits a routine that knows how to handle it. "
    },
    {
        "ID": "15002",
        "Question": "This is in regards to Meta Programming System or MPS by JetBrains. Thus far, from my efforts to learn how to use MPS, I have only learned its basic purpose and that it is very complex. Is MPS worth learning? Is there anyone who already effectively uses MPS to create their own languages and editors for those languages and uses these created editors as their primary way of programming? If so, what types of programs have they made with this? What are the advantages and disadvantages of working with MPS? ",
        "Best answer": "While not on Java, I've been wanting to make my own meta-programming for a while on .NET (Irony(link 1) is a cool thing to look at), I think of using the M modelling language(link 2) once I learn it too.  I'd post this as a comment, but thanks to this rant I can't, so I'll try and throw a 2¢ while I'm at it).  If you think about it, a language is a tool to tell the computer what to do. Some languages are more specific than others, and let you express what you want in a much more concise way than others (for a particular subject). Others try to be broad and provide a consistent baseline from where to build upon. But these restricted, specific, and simplistic \"Domain Specific Languages(link 3)\" are great for the occasional cases where what you want is specific. In those cases, they save you a lot of typing and possible mistakes. For instance, think about how much time you'd waste if you had to use an Object-Oriented \"SQL API\" for Java (and how verbose that would be) instead of using SQL queries that are so short and convey the message so clearly. I'd love if more domain-specific languages were in use. I don't like XAML much (altough it is better than how UIs are coded in Winforms), but I see it as a step in the good direction. I'd like to, in a middle-term future, design DSLs for certain common tasks I do frequently, such as a simplified HTML annotation language that outputs hacked-for-IE code without me having to do the same things over and over (or maybe I don't do this, but that's not the point). tl;dr: I never used MPS, but I think if you're a Java guy by all means check it out, Java gets brains rusted after a while IMHO. How to learn it? Find something you'd like a language for (something repetitive and boring), and make a language for it! If it's useless, at least you'll have a new tool on the belt. LINKS (here due to rep)  http://irony.codeplex.com/ http://en.wikipedia.org/wiki/Oslo_(Microsoft_project)#Characteristics_of_the_.22M.22_Modeling_Language http://en.wikipedia.org/wiki/Domain-specific_language  "
    },
    {
        "ID": "15112",
        "Question": "I'm currently working on the following types of web sites and apps:  ecommerce like Amazon Reservation system (think of a hotel receptionist checking rooms availability) Invoice management like Freshbook  On Amazon, I didn't notice any breadcrumbs, just facets from the left panel.  However, newegg is using both breadcrumbs and facets. In a management system like hotel reservations or invoice management, you usually have unique reservation or customer number that you search through your system.  Each reservation can then expand to more sections, for instance: Reservations     > Reservation #123456         > Guests         > Room         > Airport pickup         > Payment  In each unique reservation page, I'm using breadcrumbs to show the location of the current page relative to the site.  Is that a good method to present that kind of information?  Should I use tabs or other techniques? ",
        "Best answer": "I find breadcrumbs a very useful feature.  I particularly like it on ecommerce sites where I might be in and out of a lot of different category products.  Its a wonderful tool that should be used more often and doesn't require a lot of screen real estate to implement. "
    },
    {
        "ID": "15114",
        "Question": "I have a base class Shape, and drived classes Line Segment, Arc, B-spline,... I want to find the intersection point between these shapes. I would like: Shape* a = new LineSegment(); Shape* b = new Arc();  bool did_intersect = a->Intersect(b);  I don't like this design in Intersect: bool LineSegment(Shape* s) {   Arc* arc = dynamic_cast<Arc*>(s);   if (NULL != arc)     return LineSegmentArcIntersection(this, arc);    BSpline* bspline = dynamic_cast<BSpline*>(s);   if (NULL != bspline)     return LineSegmentBSplineIntersection(this, bspline);   ... }  So, What design pattern is best suitable with this context? ",
        "Best answer": "I think you are looking for double dispatch or multiple dispatch. Btw., this question is better suited for StackOverflow. "
    },
    {
        "ID": "15209",
        "Question": " <body>     <!-- wrapper -->     <div id=\"wrapper\">     <!-- title -->    <div id=\"title\"><img src=\"title.png\" alt=\"\" /></div>     <!-- form wrapper -->    <div id=\"form_wrapper\">      <!-- form -->     <form action=\"thankyou.php\" method=\"POST\">      <!-- ... ... -->     </form>     <!-- /form -->    </div>    <!-- /form wrapper -->   </div>   <!-- /wrapper -->  </body>  I can almost understand the <!-- /wrapper --> at the end, because it's so far from the start of the tag/pair...  but seriously, what's the point of the opening comment lines?  I wouldn't ask the question if I didn't see this all the time.   I feel as if I'm missing something.  Maybe there's some unwritten best-practice involved, though I fail to comprehend what it could possibly be.  More than likely it's just obsessive-compulsive behavior. How do you guys normally comment your markup, if at all? ",
        "Best answer": "Some times CSS class names are generic and aren't specifically named. For example, what if you had <!--Code before-->    <!--Column one--> <div class=\"center-bold\">         <!--Tons of lines-->     </div> <!--End column-->  Wouldn't it be nice to know what your starting? I surely wouldn't want to scroll all the way to the end to find out that the whole div was a column.  "
    },
    {
        "ID": "15350",
        "Question": "Registering on an insurance company's website right now, and my password is 16 characters long, using a nice variety of letters, numbers, special characters, etc. However, here's their list of restrictions:  Note your password:  must be between 6 and 12 characters must not contain spaces, special/international characters must not contain your user name, first name or last name is case-sensitive should contain at least 1 number and 1 letter   I can understand minimum 6 characters, not allowing parts of your name, being case-sensitive, and needing at least 1 number and letter. The part I don't get is restricting your choice of characters you can use, and having an upper bound. Why do websites do this? The only thing I can think of it they don't know the basics of hashing a password, which would secure it better than anything, and get rid of any security concerns. If I choose to type DELETE FROM users WHERE 1=1 as my password, I should be allowed to. PHP's MD5 hash of it becomes fe5d54132b51b7d65ab89b739b600b4b which I don't think will harm anything. ",
        "Best answer": "It comes down to their programmers (or their management) being lazy and/or uneducated.  It doesn't take that much more work to make your system accept any characters, but it means you need to spend some time thinking about SQL injection attacks, cross site scripting, making sure that all parts of the system are able to deal with it, etc.  It can be cheaper and quicker just to forbid any characters that could be a problem. "
    },
    {
        "ID": "15405",
        "Question": "Do other people fix bugs when they see them, or do they wait until there's crashes/data loss/people die before fixing it? Example 1  Customer customer = null;  ...  customer.Save();  The code is clearly wrong, and there's no way around it - it's calling a method on a null reference. It happens to not crash because Save happens to not access any instance data; so it's just like calling a static function. But any small change anywhere can suddenly cause broken code that doesn't crash: to start crashing. But, it's also not inconceivable that correcting the code: Customer customer = null; ... customer = new Customer(); try    ...    customer.Save();    ... finally    customer.Free(); end;  might introduce a crash; one not discovered through unit tests with complete coverage, and manual user testing. Example 2 float speed = 0.5 * ((G * mass1 * mass2) / R) * Pow(time, 2);  People knowing physics will recognize that it's supposed to be R2 in the denominator. The code is wrong, it's absolutely wrong. And overestimating the speed will cause the retro-rockets to fire too soon, killing all the occupants of the spacecraft. But it's also possible perhaps having it over-estimate the speed is masking another issue: the air-bags can't deploy while the shuttle is moving too fast. If we suddenly fix the code: float speed = 0.5 * ((G * mass1 * mass2) / Pow(R, 2)) * Pow(time, 2);  Now the speed is accurate, and suddenly airbags are deploying when they shouldn't.  Example 3 Here's an example that i had recently, checking if a string contains invalid characters: if (StrPos(Address, \"PO BOX\") >= 0) {    //Do something }  What if it turns out there's a bug in the Do something branch? Fixing the obviously incorrect code: if (StrPos(\"PO BOX\", Address) >= 0) {    //Do something }  Fixes the code, but introduces a bug.  The way I see it there are two possibilities:  fix the code, and get blamed for breaking it wait for the code to crash, and get blamed for having a bug  What do you politically do?  Example 4 - Today's real world bug I am constructing an object, but calling the wrong constructor: Customer customer = new Customer();  Turns out that the \"parameterless\" constructor is actually an parameterized constructor from  further back in the inheritance chain: public Customer(SomeObjectThatNobodyShouldBeUsingDirectly thingy = null) public Customer(InjectedDependancy depends)  Calling it is a mistake, since it bypasses all the subsequent constructors.  I could change the object's lineage to not expose such a dangerous constructor, but now I have to change the code to: Customer customer = new Customer(depends);  But I can't guarantee that this change won't break anything. Like my Example 1 above, perhaps someone, somewhere, somehow, under some esoteric conditions, depends on the constructed Customer to be invalid and full of junk. Perhaps the Customer object, now that it is properly constructed will allow some code to run that previously never did, and now I can get a crash. I can't bet your wife's life on it. And I can test it from here to Tuesday, I can't swear on your daughter's life that I didn't introduce a regression. Do I:  Fix the code and get blamed for breaking it? or Leave the bug, and get blamed when the customer finds it?  ",
        "Best answer": "This depends wildly on the situation, the bug, the customer, and the company. There is always a trade-off to consider between correcting the implementation and potentially introducing new bugs. If I were to give a general guideline to determining what to do, I think it'd go something like this:  Log the defect in tracking system of choice. Discuss with management/coworkers if needed. If it's a defect with potentially dire consequences (e.g. your example #2), run, scream, jump up and down till someone with authority notices and determine an appropriate course of action that will mitigate the risks associated with the bug fix. This may push your release date back, save lives, wash your windows, etc. If it's a non-breaking defect, or a workaround exists, evaluate whether the risk of fixing it outweighs the benefit of the fix. In some situations it'll be better to wait for the customer to bring it up, since then you know you aren't spending time fixing/retesting things when it's not 100% required.    Mind you, this only applies when you're close to a release. If you're in full development mode, I'd just log the defect so it can be tracked, fix it, and call it done. If it's something that takes more than, say, half an hour to fix and verify, I'd go to the manager/team lead and see whether or not the defect should be fit into the current release cycle or scheduled for a later time. "
    },
    {
        "ID": "15556",
        "Question": "I'm kind of horrified that people actually suggest using UTF-8 inside a std::string and are OK with UTF-16 std::wstring. Do you actually do this? Do you think that it is OK? ",
        "Best answer": "Well, let's say that many programmers still don't know that UTF-16 is a multibyte encoding (they still think that 16-bit wide char is enough to represent all the Unicode characters, but actually they are stuck with the old UCS-2). However, there's no real drawback in using a wstring for storing UCS-16 text, but you should know that its length doesn't necessarily represent the number of text symbols that will be printed. "
    },
    {
        "ID": "15670",
        "Question": "Now that we know what is in store for c#5, there is apparently still an opening for us to influence the choice of the two new keywords for 'Asynchrony' that were announced by Anders Heijsberg yesterday at PDC10. async void ArchiveDocuments(List<Url> urls) {     Task archive = null;     for(int i = 0; i < urls.Count; ++i) {         var document = await FetchAsync(urls[i]);         if (archive != null)             await archive;         archive = ArchiveAsync(document);     } }  Eric Lippert has an explanation of the choice of the current two keywords, and the way in which they have been misunderstood in usability studies. The comments have several other propositions. Please - one suggestion per answer, duplicates will be nuked. ",
        "Best answer": "Given that I'm not clear about the meaning/necessity of async, I can't really argue with it, but my best suggestion for replacing await is: yield while (look! no new keywords) Note having thought about this a bit more, I wonder whether re-using while in this way is a good idea - the natural tendency would be to expect a boolean afterwards. (Thinks: finding good keywords is like finding good domain names :) "
    },
    {
        "ID": "15776",
        "Question": "I personally use CodeRush in Visual Studio 2010 to do refactoring, write code faster with templates and generally navigate my code 10 times faster than stock VS.  Recently, I've been working on another Android app and got to thinking...What are the top productivity plugins for Eclipse? Preferably free. I'm looking for plugins that help write in Java, not PHP or Rails or any of the other languages Eclipse supports. ",
        "Best answer": "Mylyn is a very widely appreciated plugin for Eclipse, and is available on the main Eclipse site now. It can watch the pieces of code that you work on together (for example, when changing \"tax calculation\" code, you tend to use the same five files) and then emphasize them the next time you work on the same task. It's a great way to undo the \"information overload\" you get when working on a large project. FindBugs for Eclipse will help you save time by analyzing your source code for potential Java bugs. It has a false positive rate, and you wouldn't want to run it each build, but it's a great process to go through. Eclipse's own refactoring and navigation features will save you time as well. My favorite feature of the JDT is the \"Quick Fix.\" When you have an error in your source code (you can use Control-Period to navigate to it), simply do a Control-1 for the Quick Fix operation. It will give you a list of ways to fix the error. For example, if you write a = foo(s), but a is not declared, one of the Quick Fix options is to \"declare a\". Eclipse will look at the return type from foo and use that for a, automatically adding any imports. With this style, you will find you write code with errors intentionally, because the Quick Fix route is faster! My other favorite Eclipse shortcut is \"Expand Selection To->Enclosing Element\" (Alt+Shift+Up). This takes where your cursor is and then selects the element of the parse tree you are on. When you do it again, you move further up the parse tree. This is great, because you can select an entire expression easily, not having to worry about selecting the code before or after it. That makes it much easier for you to have a valid expression in order to perform the \"Extract Local\" refactoring. JUnit is indispensible if you are writing unit tests, and it's well integrated with the environment and process. If you do any work with GWT, then Google's GWT Eclipse plug-in is nice. You can even use it for working with any Tomcat application, not just a GWT one. All of these tools are available free. "
    },
    {
        "ID": "15820",
        "Question": "Often when I hear about the switch statement, its put off as a way to replace long if...else chains. But it seems that when I use the switch statement I'm writing more code that I would be just writing if...else. You also have other issues like keeping all variables for all calls in the same scope. Here's some code that represents the flow I normally write (thanks to diam) String comment;   // The generated insult. int which = (int)(Math.random() * 3);  //  Result is 0, 1, or 2.  if (which == 0) {     comment = \"You look so much better than usual.\"; } else if (which == 1) {     comment = \"Your work is up to its usual standards.\"; } else if (which == 2) {     comment = \"You're quite competent for so little experience.\"; } else {     comment = \"Oops -- something is wrong with this code.\"; }  Then they want me to replace that with this: String comment;   // The generated insult. int which = (int)(Math.random() * 3);  //  Result is 0, 1, or 2.  switch (which) {     case 0:                comment = \"You look so much better than usual.\";     break;     case 1:                comment = \"Your work is up to its usual standards.\";     break;     case 2:                comment = \"You're quite competent for so little experience.\";     break;     default:               comment = \"Oops -- something is wrong with this code.\"; }  Seems like a lot more code in a much more awkward syntax. But is there really an advantage to using the switch statement? ",
        "Best answer": "For this particular situation, it seems to me that both if and case are poor choices. I'd use a simple array: String comments[] = {     \"You look so much better than usual.\",     \"Your work is up to its usual standards.\",     \"You're quite competent for so little experience.\" };  String comment = comments[(int)(Math.random() * 3)];  As a side note, you should generally compute the multiplier based on the size of the array rather than hard-coding the 3. As to when you would use a case/switch, the difference from a cascade of if statements (or at least one major difference) is that switch can semi-automatically optimize based on the number and density of values, whereas a cascade of if statements leaves the compiler with little choice but to generate code as you've written it, testing one value after another until it finds a match. With only three real cases, that's hardly a concern, but with a sufficient number it can/could be significant. "
    },
    {
        "ID": "15925",
        "Question": "Usually when talking about coding standards we refer to the code of the program itself, but what about the unit tests? Are there certain coding standards guidelines that are unique to unit tests? What are they?  ",
        "Best answer": "Roy Osherove recommends the following pattern for naming your tests: NameOfMethodUnderTest_StateUnderTest_ExpectedBehavior()   See http://weblogs.asp.net/rosherove/archive/2005/04/03/TestNamingStandards.aspx "
    },
    {
        "ID": "16010",
        "Question": "I recently tried to implement a ranking algorithm, AllegSkill, to Python 3. Here's what the maths looks like:   No, really.  This is then what I wrote: t = (µw-µl)/c  # those are used in e = ε/c        # multiple places. σw_new = (σw**2 * (1 - (σw**2)/(c**2)*Wwin(t, e)) + γ**2)**.5  I actually thought it is unfortunate of Python 3 to not accept √ or ² as variable names. >>> √ = lambda x: x**.5   File \"<stdin>\", line 1     √ = lambda x: x**.5       ^ SyntaxError: invalid character in identifier  Am I out of my mind? Should I have resorted for a ASCII only version? Why? Wouldn't an ASCII only version of the above be harder to validate for equivalence with the formulas? Mind you, I understand some Unicode glyphs look very much like each other and some like     ▄ (or is that ▗▖ ) or ╦  just can't make any sense in written code. However, this is hardly the case for Maths or arrow glyphs.  Per request, the ASCII only version would be something along the lines of: winner_sigma_new = ( winner_sigma ** 2 *                     ( 1 -                      ( winner_sigma ** 2 -                        general_uncertainty ** 2                      ) * Wwin(t,e)                     ) + dynamics ** 2                    )**.5  ...per each step of the algorithm. ",
        "Best answer": "I feel that just replacing σ with s or sigma doesn’t make sense and is counter-productive. What’s the potential gain of such a replacement?  Does it improve readability? Nope, not in the slightest. If that were so, the original formula would have undoubtedly used Latin letters also.  Does it improve writability? At first glance, yes. But not really: because this formula is never going to change (well, “never”). There will normally be no need to change the code, nor to extend it using these variables. So writability is really not an issue.   But programming languages have one advantage over conventional mathematical notation: you can use meaningful, expressive identifiers. In mathematics, this isn’t normally the case, so we resort to one-letter variables, occasionally making them Greek. But Greek isn’t the problem. Non-descriptive, one-letter identifiers are. So either keep the original notation … after all, if the programming language does support Unicode in identifiers, there’s no technical barrier. Or use meaningful identifiers. Don’t just replace Greek glyphs with Latin glyphs. Or Arabic ones, or Hindi ones. "
    },
    {
        "ID": "16016",
        "Question": "What is the difference between update and upgrade in the context of application software? ",
        "Best answer": "Depends entirely on the installation technology, company developing the software and the whim of the person using the terms.  Generally though, updates stay within a product version (for example, hotfixes), while if you want to move to a later version, you would upgrade. So you might install an update (hotfix) for Office 2007, or you might upgrade to Office 2010. This page gives the definition according to Windows Installer: http://msdn.microsoft.com/en-us/library/aa370579(v=VS.85).aspx "
    },
    {
        "ID": "16089",
        "Question": "I have coded like this many times, and I've never encountered an issue, but the compiler always warns when it expects a return and there is none. For instance, look at this: -(NSString *)outputStringForInteger:(NSInteger)int {     if (int == 0)     {         return @\"Number is Zero\";     }     else     {         return @\"Number is not Zero\";     }     //no \"failsafe\" or other explicit return }  If the function will never get to the last line, ever, is it important to still have a failsafe option, or do you guys just deal with compiler warnings? ",
        "Best answer": "Get a better compiler.  The ones I use complain that you have code which will never execute if you put the \"failsafe\" return in there.  That's a much better warning that the false one you're apparently seeing. "
    },
    {
        "ID": "16141",
        "Question": "There seems to be a conflict over whether its better to use whitespace or tokens like brackets to indicate scope. I've seen many praise python's solution to the inconsistent indentation problem, but many disagree:  Any language that has whitespace as tokens needs to die.  posted later on the same answer:  I was sortof anti-whitespace-as-tokens, until I actually tried it. It probably helped that my personal white-space layout pretty much matches what everyone in python-land uses. Perhaps it's that I am a bit minimalist, but if you're going to indent anyways, why bother with the {}s?  I can see some clear arguments for each side: using whitespace:  helps reduce inconsistent indentation in code clears the screen by replace visible tokens with whitespace to serve the same purpose  using tokens:  much easier to cut and paste code to different levels (you don't have to fix the indentation) more consistent. Some text editors display whitespace differently. more popular currently.  Are there any points I missed? Which do you prefer? Any words of wisdom after having worked with one or the other for a long time?  PS. I hate it when languages don't use the same token for each control structure. VB is really annoying with its End If and End While statements, most other languages just use {}'s for everything. But maybe that's a topic for a different question... ",
        "Best answer": "I think a lot of us programmers (myself included) have a tendency to \"logicalize\" every decision.  That's fine, but not every question has a logical answer.  For instance, I doubt that chefs post questions on chefoverflow (if such a thing exists) asking for the pros and cons of apple pie vs cherry pie.  It's a question of which you like better. With that in mind, I think the simplest answer is to say \"Some people like braces, some people like whitespace\" and leave it at that. "
    },
    {
        "ID": "16463",
        "Question": "I generally use switch statements to simplify a block of multiple if statements - for example - returning a feedback string to a user based on a multiple choice input.  I also tend to construct classes so that there is one \"management\" method, to avoid sequential steps or chained method invocation within other methods of the class. I've found this helps to keep methods flexible and focussed - i.e. class MyClass{      // this method does nothing more than invoke the relevant method     // depending on the status following the previous. It's entire purpose     // is to control application flow     public function manageFlow($input){         $status = $this->stepOne($input);         if($status == false){             //exit routine         }          $status = $this->stepTwo($input);         if($status == false){             //exit routine        }     }      // this method has several sequential steps implemented direcly within it,      // for example to a user logging in     // it makes it impossible to re-use any of the intermediary steps     public function tangledFlow($input){          if($input == 'something){          //100 lines of code          }          //then handing on to the next bit          if($this->User->Authenticated){          //another 100 lines...          }     } }  Then it occurred to me that I could use a switch statement to control this kind of sequential execution - so my question is: has anyone used a switch statement for this kind of flow control? ",
        "Best answer": "What you're describing is a state machine, and yes, many people do use switch statements to implement those.  They're usually cleaner, but it can be more difficult to follow the logic flow. "
    },
    {
        "ID": "16528",
        "Question": "Which is better/more generally accepted? This: if(condition) {   statement; }  Or: if(condition)   statement;  I tend to prefer the first one, because I think it makes it easier to tell what actually belongs in the if block, it saves others from adding the braces later (or creating a bug by forgetting to), and it makes all your if statements uniform instead of some with braces and some without.  The second one, however, is still syntactically correct and definitely more compact.  I'm curious to see which is more generally preferred by others though. ",
        "Best answer": "The first is better because the second is error-prone.  For example, let's say you are temporarily commenting out code to debug something: if(condition)  //      statement; otherStatement;  Or adding code in a hurry: if(condition)      statement;     otherStatement;  This is obviously bad.  On the other hand, the first one does feel too verbose at times.  Therefore, I prefer to just put everything on one line if it's sufficiently short and simple: if(condition) statement;  This cuts down on syntactic noise while making the construct look like it does what it actually does, making it less error-prone.  Provided that this syntax is only used for very simple, short conditions and statements, I find it perfectly readable. "
    },
    {
        "ID": "16735",
        "Question": "I have no clue where to put the following class and I've noticed I just keep putting them in a helpers folder which isn't much helpfull towards reusability in future projects. Example:  I want to have the ability to use the DisplayNameAttribute together with resource files. In order for this to work I made a LocalizedDisplayNameAttribute which inherits the ´DisplayNameAttribute´ and adds the following properties DisplayNameResourceName and DisplayNameResourceType. In which namespace/location would you place such a class which is likely to be reused in future projects? ",
        "Best answer": "I think the best way to do this is putting all helper classes and methods in a separate project, and then reference this project in each solution you create. Much easier than copying folders from place x to place y. This project with all kinds of extensions, helpers etc, can be called something like \"Company.Core\", or similar. Example (your attributes): using Company.Core.Attributes;  // ....  [LocalizedDisplayNameAttribute.DisplayNameResourceName(\"ResourceName\"), ...] public string Example { get; set; }  "
    },
    {
        "ID": "16760",
        "Question": "I must do a quick assessment of dozens of fresh students very quickly. I have 30 minutes meeting with each of them (in two or three days). I want to use most of the time to discuss non technical aspects. So I plan to use 10 minutes for technical questions. The same questions for all of them. They are all hired already (they are students), what I need to know is the average level in order to prepare a training. Ideally, the difficulty must be progressive in order to set a level for each. Level I will average, and I'll do an average on each question too. If you had only 10 minutes and 10 questions to ask to a candidate, what would be your top 10 ? ",
        "Best answer": "Three questions, elaborating on the end of Eric Lippert's answer here: Question 1:  On a scale of 1 - 10, where do you   rate yourself in (name the skill   here)? They answer [n], a number   between 1 and 10.  Question 2:  What could you learn from someone at   level [n+1] ?  Question 3:  What could someone at level [n-1]   learn from you?  The most important factor in your decision is to determine where a student (realistically) places themselves, and those three questions will help you to determine that quickly. It also helps identify people that might be compromised by the Dunning-Kruger effect (on either end), but that is another topic. If anyone can find the reference to this method on SO and edit this post to include a link, I would really appreciate it. Anyway, that should fall well under ten minutes. "
    },
    {
        "ID": "16807",
        "Question": "I thought about it and could not come up with an example. Why would somebody want to catch an exception and do nothing about it? Can you give an example? Maybe it is just something that should never be done. ",
        "Best answer": "I do it all the time with things like conversion errors in D: import std.conv, std.stdio, std.exception;  void main(string[] args) {       enforce(args.length > 1, \"Usage:  foo.exe filename\");      double[] nums;      // Process a text file with one number per line into an array of doubles,     // ignoring any malformed lines.     foreach(line; File(args[1]).byLine()) {         try {             nums ~= to!double(line);         } catch(ConvError) {             // Ignore malformed lines.         }     }      // Do stuff with nums. }  That said, I think that all catch blocks should have something in them, even if that something is just a comment explaining why you are ignoring the exception. Edit:  I also want to emphasize that, if you're going to do something like this, you should be careful to only catch the specific exception you want to ignore.  Doing a plain old catch {} is almost always a bad thing. "
    },
    {
        "ID": "16836",
        "Question": "I think the world now programs in English-based programming languages not only because of historical/economic circumstances, but because the English morphology in particular has some properties that suit algorithmic thinking best. But anyway it would be interesting to hear your opinions on this, especially if you are multilingual yourself. I've seen some mentioning of German-based languages (see Plankalkul for example, in fact the first ever programming language we know very little about, thanks to WW2), also a Russian-based flavor of Algol which existed back in the 80's at least on paper, not sure if it ever existed in binary or not. Both looked a bit sluggish because there were more shortened words and weird abbreviations than full words like in the EN-based languages. So if you know of any other national language-based PL's, even completely archaic and irrelevant today, purely theoretical or whatever, would be interesting to take a look at them. And back to the main question: so what, if any, makes the Shakespeare's language so good for programming? (There is actually a list of Non-English-based programming languages on Wikipedia (of course, where else?), but it would be interesting to hear opinions of native speakers of those languages on how a given \"national\" programming languages really feels like.) ",
        "Best answer": "Disclaimer: My native language is German. I don't think there is any reason English as a language to take keywords from would be better than any other natural language. I do think it's the one all-important language in IT, but not because of linguistic properties, but because most tech people speak it to some degree, it's the native tounge of quite a few important people in the field, most tech-related terms are already English, etc. But since we talk about programming languages, not about documentation/API/names/etc, I have to object: Programming languages are not based on English - or on any other natural language, for that matter. Programming languages are formal languages. They do use, to varying degree, a handful of words from (usually) English. Some even try to mimic its grammar -- but utterly fail to read like English regardless. To add insult to injury, they only associate one single (in rare cases a handful of) meaning(s) with each word they borrow. Often, this meaning is very jargon-y, specialized, or based on a questionable analogy. Therefore, knowing the myriad natural-language meanings of a word borrowed by programming language doesn't really help understanding the programming concept behind the keyword. Examples off the top of my head: array, type, goto, class, void. (Fun fact that sprung to mind as I re-read the question: All of these, except goto, have German translations which are at most one character longer: Feld, Typ, Klasse, Leere. They all sound weird to me, but that's probably a matter of habit.) "
    },
    {
        "ID": "16908",
        "Question": "This is one of the things that I hate most when I see it in someone else's code. I know what it means and why some people do it this way (\"what if I accidentally put '=' instead?\"). For me it's very much like when a child goes down the stairs counting the steps out loud. Anyway, here are my arguments against it:  It disrupts the natural flow of reading the program code. We, humans, say \"if value is zero\" and not \"if zero is value\". Modern compilers warn you when you have an assignment in your condition, or actually if your condition consists of just that assignment, which, yes, looks suspicious anyway You shouldn't forget to put double '=' when you are comparing values if you are a programmer. You may as well forget to put \"!\" when testing non-equality.  ",
        "Best answer": "Ah, yes, \"Yoda conditionals\"  (\"If zero the value is, execute this code you must!\").  I always point anyone who claims they're \"better\" at tools like lint(1).  This particular problem has been solved since the late 70s.  Most modern languages won't even compile an expression like if(x = 10), as they refuse to coerce the result of the assignment to a boolean. As others have said, it certainly isn't a problem, but it does provoke a bit of cognitive dissonance. "
    },
    {
        "ID": "17173",
        "Question": "I have a common scenario where I have an object (a) that logically affects another object (b), like a makes a note on b, or a marks b as disabled (usually a is a user object of the system and b is some kind of business object like a customer or an appointment). In the past, the method was on the affected object like: customer.Disable(user); // user is marking the customer as disabled  ... but it doesn't read well (it appears backwards). The opposite: user.Disable(customer);  ... reads better, but there's something about it that I can't put my finger on that just doesn't seem right. The only other option is to have a static intermediary: ThirdPartyClass.DisableCustomer(customer, user);  ... but the domain objects end up becoming more like DTOs and I prefer the domain model approach because it makes more sense. So the question is: which makes the most sense? Is there an option I haven't considered? Who actually owns an operation like this? Edit With the second option, the actionable objects in the system (users usually) end up becoming huge because the users of the system are the ones that pretty much do and affect everything. ",
        "Best answer": "How about customer.SetDisabledBy(user);  or if using C# 4.0 or a different language with similar capabilities: customer.SetDisabled(by: user);  or if you're using C# 3.5 or newer, you can write the following: user.DisableCustomer(customer);  while having the DisableCustomer method be an extension method sitting in a class called CustomerActions which sits together with the Customer class. That way, when you're using the Customer namespace, User will have that extension method. When you're not using it, it's gone. User is no longer a god object but the intermediary class is nowhere to be found in the code. You might also have an OrderActions class which will provide user.CancelOrder(order), etc. Good question, made me think! "
    },
    {
        "ID": "17226",
        "Question": "... and coded the functionality \"manually\"? As a rather metaphorical example, you'd hardly need a library for solving quadratic equations, although such libraries do exist and someone takes them seriously. As a more questionable case, depending on the circumstances I may ditch jQuery (for example when I don't need to support some stone age browsers): it does simplify some things but it adds another layer of complexity and unreliability to DOM. And overusing jQuery leads to absurd problems, such as one seen recently on SO: how do I assign an empty href to an a tag with jQuery? Turned out it was a HTML question, not even JavaScript. Another absurd case and yet non-obvious for many is using some templating engine/language built on top of another templating system: PHP. Third level of templating anyone? And another one: sometimes just spitting out XML with (figurally) printf is far easier than doing it with some monstrous XML engine. Any other cases from your experience? ",
        "Best answer": "Much of MS enterprise library and most 3rd party controls for .net have left me with this feeling after a bit of use. Your mileage may vary "
    },
    {
        "ID": "17305",
        "Question": "There has been a few remarks about white space already in discussion about curly braces placements. I myself tend to sprinkle my code with blank lines in an attempt to segregate things that go together in \"logical\" groups and hopefully make it easier for the next person to come by to read the code I just produced. In fact, I would say I structure my code like I write: I make paragraphs, no longer than a few lines (definitely shorter than 10), and try to make each paragraph self-contained. For example:  in a class, I will group methods that go together, while separating them by a blank line from the next group. if I need to write a comment I'll usually put a blank line before the comment in a method, I make one paragraph per step of the process  All in all, I rarely have more than 4/5 lines clustered together, meaning a very sparse code. I don't consider all this white space a waste because I actually use it to structure the code (as I use the indentation in fact), and therefore I feel it worth the screen estate it takes. For example: for (int i = 0; i < 10; ++i) {     if (i % 3 == 0) continue;      array[i] += 2; }  I consider than the two statements have clear distinct purposes and thus deserve to be separated to make it obvious. So, how do you actually use (or not) blank lines in code ? ",
        "Best answer": "Always Whitespace is crucial to clean readable code. A blank line (or two) help visually separate out logical blocks of code.  For example, from Steve McConnell's Code Complete, Second Edition chapter on Layout and Style:  Subjects scored 20 to 30 percent higher on a test of comprehension when programs had a two-to-four-spaces indentation scheme than they did when programs had no indentation at all. The same study found that it was important to neither under-emphasize nor over emphasize a program’s logical structure. The lowest comprehension scores were achieved on programs that were not indented at all. The second lowest were achieved on programs that used six-space indentation. The study concluded that two-to-four-space indentation was optimal. Interestingly, many subjects in the experiment felt that the six-space indentation was easier to use than the smaller indentations, even though their scores were lower. That’s probably because six space indentation looks pleasing. But regardless of how pretty it looks, six-space indentation turns out to be less readable. This is an example of a collision be tween aesthetic appeal and readability.  "
    },
    {
        "ID": "17310",
        "Question": "sometimes a programmer comes up with a brilliant idea to protect his/her webservice created with Windows Communication Foundation. I would like to hear from you guys, which techniques do you use to protect your WCF service and avoid unauthorized users to consume it? For example, you would:  avoid Impersonate, use it only if necessary  publish metadata information to prevent tampering avoid memory consuption enforcing a maximum size quota  create a security context token to control number of sessions  ",
        "Best answer": "Yesterday, I found an article, a video and code about using API keys with WCF. I've got to lock down a publicly exposed web service as part of what we need to do in order to comply with PCI-DSS, and this looks like the right way to move forward. In the past, this app and webservice were used only by a VB4/5/6 (now .NET) desktop application, but the boss wants it opened up as a for-pay service to others. One financial client used a scheme with a security information element in the SOAP header. This element had 4 attributes, one was the name of the application, the timestamp and guid elements were used to prevent replay attacks and the 4th attribute was a hash based on the name of the app, the timestamp and guid, along with a \"secret\" (think of a password) stored in the registry (for windows servers, or a special locked down file for unix-based servers, with different \"passwords\" for different application names). The \"secret\" (or password) was intended to prevent situations where a trojan in the datacenter would be able to make inappropriate calls, or respond to them. This was obviously not WCF as it had to support unix, windows and other operating systems in the data centers, but the technique was fascinating and could be used elsewhere. Because they used url-rewriting, the security information element would not show up in WSDLs, you had to know about it from documentation that only authorised folks received; if you added ?WSDL to the end of a webservice endpoint, you got a lie. "
    },
    {
        "ID": "17355",
        "Question": "I'm experimenting with a new platform and I'm trying to write a program that deals with strings that are no longer than 60 characters and I'd like to populate the data store with some famous or well-known small chunks of code and equations, since programming and math goes along with the theme of my software. The code can be in any language and the equations from any discipline of mathematics, just so long as they're less than a total of 60 characters in length. I suspect people are gonna break out some brainfuck for this one. For example,  #include<stdio.h> int main(){printf (\"Hi World\\n\");return 0;}  60 characters exactly! Thanks so much for your wisdom! ",
        "Best answer": "The classic C string copy routine is known by fewer and fewer people theses days: while (*d++ = *s++);  "
    },
    {
        "ID": "17428",
        "Question": "I'm trying to learn more about Erlang than the toy projects I've been playing with. To this end, I'm reading through Programming Erlang and some of the archives from Armstrong on Software.  I would also like to read over some example (preferably production) code that showcases the sorts of things you can build with Erlang that would be disproportionately difficult in other languages. Aside from (I assume) Yaws, are there any publicly available examples of beautiful Erlang code that I could read through to gain a better understanding of the language and/or see the idiomatic uses for various language constructs?  I'm specifically not looking for code that \"gets the job done\" but uses questionable practices, or examples along the lines of \"here's how you write factorial in Erlang\". In the same vein, can anyone recommend any good literature for learning this language (other than the mentioned \"Programming Erlang\")? For preference, something you yourself used to learn it, but if there's some community standard books for it, throw those in too. ",
        "Best answer": "Another good reference is Erlang and OTP in Action. About the code samples: it is kind of hard to find best practices for Erlang, but I would suggest you try these websites:  Trapexit Erlang Programming Language Erlang Factory Planet Erlang Erlang Solutions  Check the links from this article (open source software written in erlang) and you might find interesting code. "
    },
    {
        "ID": "17438",
        "Question": "I'm developing a website which includes a section for reviews. I want to include Google's microformat for review information so that details of the review show up in Google's snippet thingy, like this:  However, according this page, Google supports three different formats for the review data, \"microformat\", \"microdata\" and RDFa. They all seem to do exactly the same thing, though, and I have no idea which one to choose... RDFa looks nice - in that the data is fairly separate from the actual content (which makes my life a bit easier). Except it's based on XML namespaces, which isn't going to play well with HTML5 (the site isn't HTML5 yet, but I imagine it will be ported eventually).  The \"hReview microformat\" seems to use special CSS classes to denote the various sections of the review, which seems like a bad mix of concerns to me... So I'm kind of leaning towards the \"microdata\" format, which looks like it's closer to the HTML5 way of doing things (i.e. no special namespaces). An example of that would be (from the page I linked above): <div>   <div itemscope itemtype=\"http://data-vocabulary.org/Review\">     <span itemprop=\"itemreviewed\">L’Amourita Pizza</span>     Reviewed by <span itemprop=\"reviewer\">Ulysses Grant</span> on     <time itemprop=\"dtreviewed\" datetime=\"2009-01-06\">Jan 6</time>.     <span itemprop=\"summary\">Delicious, tasty pizza in Eastlake!</span>     <span itemprop=\"description\">L'Amourita serves up traditional       wood-fired Neapolitan-style pizza, brought to your table promptly       and without fuss. An ideal neighborhood pizza joint.</span>     Rating: <span itemprop=\"rating\">4.5</span>   </div> </div>  But as I said, all the formats are basically the same, just slightly different... which one should I choose? ",
        "Best answer": "microdata is part of the HTML5 spec.  That for me means a lot more future that the others.  I'd only consider RDFa if you already use some RDF infrastructure. In that case, RDFa is just another serialization of semantic data. "
    },
    {
        "ID": "17645",
        "Question": "I was trying to parse a java properties file to avoid some Properties loading pitfalls (non ordering, loss of comments). (Property are of the form 'key = value' where the value can span on multiple lines using the \\ special char) I have tried to get the right regexp to parse the properties but after I gave up after fighting for more than one hour. (a version for groovy found here: ~ /^([^#=].*?)=(.+)$/) I manage to write the same thing using a single loop and very trivial code in 5 minutes... I'm an average programmer when dealing with regexp: I have to re-read the doc each time I want to use them and advanced feature are still obscure for me. Often when dealing with regexp I have the feeling that some very skilled developers can produce/decipher very elaborated regexp in seconds, but others have trouble to handle them. Question: should I take time to deeply learn regexp and produce cryptic and powerful parser, or should I keep using some ugly easy to debug/understand parsing algo ? ",
        "Best answer": "For this specific task (parsing java properties file), first look for an existing solution (sounds like someone would have solved this same problem already), and if you can't find one, it's not necessarily bad to create a non-regex parser to do it with - you use the tools you know. If you do go the regex route, do not be compelled to use a single regex, when two (or more) will often give a much simpler and faster result.  should I take time to deeply learn regexp  YES! There are a lot of times when knowing regular expressions can greatly speed up your programming - I probably use more regex in the tasks of creating & maintaining code than in actuall code itself. But perhaps the main reasons for learning regex deeply is so that you can quickly say \"this is a job for regex\" or \"regex is the wrong tool here\" - otherwise you can waste a lot of time trying to get regex to do a task it just isn't suited for. However, it's important to also state that Regex does not need to be crypic - you can write complex regex and format it nicely so that it is just as understandable as any other code. "
    },
    {
        "ID": "17766",
        "Question": "I saw this asked in the SO Tavern, so I'm posting the question here. I thought it an interesting question. (Of course it doesn't belong on SO, but I think it's OK here.)  Do you add periods (or, as the OP wrote, \"full stops\") in your code comments? To keep it relevant, why? ",
        "Best answer": "Full stop is for ending sentences, but if a comment consists of just one sentence surrounded by code, then full stop is not necessary in my opinion. Sometimes I even don't capitalize the first letter. A detailed multiline comment, on the other hand, does need full punctuation. // This function returns an average of two integers. Note that it may // return an irrelevant result if the sum of a and b exceeds the int // boundaries.  int avg(int a, int b)   // make it static maybe? {     // A better algorithm is needed that never overflows     return (a + b) / 2;  }  "
    },
    {
        "ID": "17824",
        "Question": "What specific advantages and disadvantages of each way to working on a programming language grammar? Why/When should I roll my own? Why/When should I use a generator? ",
        "Best answer": "There are three options really, all three of them preferable in different situations. Option 1: parser generators, or 'you need to parse some language and you just want to get it working, dammit' Say, you're asked to build a parser for some ancient data format NOW. Or you need your parser to be fast. Or you need your parser to be easily maintainable. In these cases, you're probably best off using a parser generator. You don't have to fiddle around with the details, you don't have to get lots of complicated code to work properly, you just write out the grammar the input will adhere to, write some handling code and presto: instant parser. The advantages are clear:  It's (usually) quite easy to write a specification, in particular if the input format isn't too weird (option 2 would be better if it is). You end up with a very easily maintainable piece of work that is easily understood: a grammar definition usually flows a lot more natural than code. The parsers generated by good parser generators are usually a lot faster than hand-written code. Hand-written code can be faster, but only if you know your stuff - this is why most widely used compilers use a hand-written recursive-descent parser.  There's one thing you have to be careful of with parser-generators: the can sometimes reject your grammars. For an overview of the different types of parsers and how they can bite you, you may want to start here. Here you can find an overview of a lot of implementations and the types of grammars they accept. Option 2: hand-written parsers, or 'you want to build your own parser, and you care about being user-friendly' Parser generators are nice, but they aren't very user (the end-user, not you) friendly. You typically can't give good error messages, nor can you provide error recovery. Perhaps your language is very weird and parsers reject your grammar or you need more control than the generator gives you. In these cases, using a hand-written recursive-descent parser is probably the best. While getting it right may be complicated, you have complete control over your parser so you can do all kinds of nice stuff you can't do with parser generators, like error messages and even error recovery (try removing all the semicolons from a C# file: the C# compiler will complain, but will detect most other errors anyway regardless of the presence of semicolons). Hand-written parsers also usually perform better than generated ones, assuming the quality of the parser is high enough. On the other hand, if you don't manage to write a good parser - usually due to (a combination of) lack of experience, knowledge or design - then performance is usually slower. For lexers the opposite is true though: generally generated lexers use table lookups, making them faster than (most) hand-written ones. Education-wise, writing your own parser will teach you more than using a generator. You have to write more and more complicated code after all, plus you have to understand exactly how you parse a language. On the other hand, if you want to learn how to create your own language (so, get experience at language design), either option 1 or option 3 is preferable: if you're developing a language, it will probably change a lot, and option 1 and 3 give you an easier time with that. Option 3: hand written parser generators, or 'you're trying to learn a lot from this project and you wouldn't mind ending up with a nifty piece of code you can re-use a lot' This is the path I'm currently walking down: you write your own parser generator. While highly nontrivial, doing this will probably teach you the most. To give you an idea what doing a project like this involves I'll tell you about my own progress. The lexer generator I created my own lexer generator first. I usually design software starting with how the code will be used, so I thought about how I wanted to be able to use my code and wrote this piece of code (it's in C#): Lexer<CalculatorToken> calculatorLexer = new Lexer<CalculatorToken>(     new List<StringTokenPair>()     { // This is just like a lex specification:       //                    regex   token         new StringTokenPair(\"\\\\+\",  CalculatorToken.Plus),         new StringTokenPair(\"\\\\*\",  CalculatorToken.Times),         new StringTokenPair(\"(\",    CalculatorToken.LeftParenthesis),         new StringTokenPair(\")\",    CalculatorToken.RightParenthesis),         new StringTokenPair(\"\\\\d+\", CalculatorToken.Number),     });  foreach (CalculatorToken token in              calculatorLexer.GetLexer(new StringReader(\"15+4*10\"))) { // This will iterate over all tokens in the string.     Console.WriteLine(token.Value); }  // Prints: // 15 // + // 4 // * // 10  The input string-token pairs are converted into a corresponding recursive structure describing the regular expressions they represent using the ideas of an arithmetic stack. This is then converted into a NFA (nondeterministic finite automaton), which is in turn converted into a DFA (deterministic finite automaton). You can then match strings against the DFA. This way, you get a good idea how exactly lexers work. In addition, if you do it the right way the results from your lexer generator can be roughly as fast as professional implementations. You also don't lose any expressiveness compared to option 2, and not much expressiveness compared to option 1. I implemented my lexer generator in just over 1600 lines of code. This code makes the above work, but it still generates the lexer on the fly every time you start the program: I'm going to add code to write it to disk at some point. If you want to know how to write your own lexer, this is a good place to start. The parser generator You then write your parser generator. I refer to here again for an overview on the different kinds of parsers - as a rule of thumb, the more they can parse, the slower they are. Speed not being an issue for me, I chose to implement an Earley parser. Advanced implementations of an Earley parser have been shown to be about twice as slow as other parser types. In return for that speed hit, you get the ability to parse any kind of grammar, even ambiguous ones. This means you never need to worry about whether your parser has any left-recursion in it, or what a shift-reduce conflict is. You can also define grammars more easily using ambiguous grammars if it doesn't matter which parse tree is the result, such as that it doesn't matter whether you parse 1+2+3 as (1+2)+3 or as 1+(2+3). This is what a piece of code using my parser generator can look like: Lexer<CalculatorToken> calculatorLexer = new Lexer<CalculatorToken>(     new List<StringTokenPair>()     {         new StringTokenPair(\"\\\\+\",  CalculatorToken.Plus),         new StringTokenPair(\"\\\\*\",  CalculatorToken.Times),         new StringTokenPair(\"(\",    CalculatorToken.LeftParenthesis),         new StringTokenPair(\")\",    CalculatorToken.RightParenthesis),         new StringTokenPair(\"\\\\d+\", CalculatorToken.Number),     });  Grammar<IntWrapper, CalculatorToken> calculator     = new Grammar<IntWrapper, CalculatorToken>(calculatorLexer);  // Declaring the nonterminals. INonTerminal<IntWrapper> expr = calculator.AddNonTerminal<IntWrapper>(); INonTerminal<IntWrapper> term = calculator.AddNonTerminal<IntWrapper>(); INonTerminal<IntWrapper> factor = calculator.AddNonTerminal<IntWrapper>();  // expr will be our head nonterminal. calculator.SetAsMainNonTerminal(expr);  // expr: term | expr Plus term; calculator.AddProduction(expr, term.GetDefault()); calculator.AddProduction(expr,                          expr.GetDefault(),                          CalculatorToken.Plus.GetDefault(),                          term.AddCode(                          (x, r) => { x.Result.Value += r.Value; return x; }                          ));  // term: factor | term Times factor; calculator.AddProduction(term, factor.GetDefault()); calculator.AddProduction(term,                          term.GetDefault(),                          CalculatorToken.Times.GetDefault(),                          factor.AddCode                          (                          (x, r) => { x.Result.Value *= r.Value; return x; }                          ));  // factor: LeftParenthesis expr RightParenthesis //         | Number; calculator.AddProduction(factor,                          CalculatorToken.LeftParenthesis.GetDefault(),                          expr.GetDefault(),                          CalculatorToken.RightParenthesis.GetDefault()); calculator.AddProduction(factor,                          CalculatorToken.Number.AddCode                          (                          (x, s) => { x.Result = new IntWrapper(int.Parse(s));                                      return x; }                          ));  IntWrapper result = calculator.Parse(\"15+4*10\"); // result == 55  (Note that IntWrapper is simply an Int32, except that C# requires it to be a class, hence I had to introduce a wrapper class) I hope you see that the code above is very powerful: any grammar you can come up with can be parsed. You can add arbitrary bits of code in the grammar capable of performing lots of tasks. If you manage to get this all working, you can re-use the resulting code to do a lot of tasks very easily: just imagine building a command-line interpreter using this piece of code. "
    },
    {
        "ID": "17898",
        "Question": "In your own studies (on your own, or for a class) did you have an \"ah ha\" moment when you finally, really understood pointers? Do you have an explanation you use for beginner programmers that seems particularly effective? For example, when beginners first encounter pointers in C, they might just add &s and *s until it compiles (as I myself once did). Maybe it was a picture, or a really well motivated example, that made pointers \"click\" for you or your student. What was it, and what did you try before that didn't seem to work? Were any topics prerequisites (e.g. structs, or arrays)? In other words, what was necessary to understand the meaning of &s and *, when you could use them with confidence? Learning the syntax and terminology or the use cases isn't enough, at some point the idea needs to be internalized.  Update: I really like the answers so far; please keep them coming. There are a lot of great perspectives here, but I think many are good explanations/slogans for ourselves after we've internalized the concept. I'm looking for the detailed contexts and circumstances when it dawned on you. For example:  I only somewhat understood pointers   syntactically in C. I heard two of my   friends explaining pointers to another   friend, who asked why a struct was   passed with a pointer. The first   friend talked about how it needed to   be referenced and modified, but it was   just a short comment from the other   friend where it hit me: \"It's also   more efficient.\" Passing 4 bytes   instead of 16 bytes was the final   conceptual shift I needed.  ",
        "Best answer": "Someone much wiser than I once said:  The nun Wu Jincang asked the Sixth   Patriach Huineng, \"I have studied the   Mahaparinirvana sutra for many years,   yet there are many areas i do not   quite understand. Please enlighten   me.\" The patriach responded, \"I am   illiterate. Please read out the   characters to me and perhaps I will be   able to explain the meaning.\" Said the nun, \"You cannot even   recognize the characters. How are you   able then to understand the meaning?\" \"Truth has nothing to do with words.   Truth can be likened to the bright   moon in the sky. Words, in this case,   can be likened to a finger. The finger   can point to the moon’s location.   However, the finger is not the moon.   To look at the moon, it is necessary   to gaze beyond the finger, right?\"  "
    },
    {
        "ID": "17995",
        "Question": "The specific example I have in mind involves the currently-alpha game Minecraft, but this is a general question that I think warrants some conversation. Minecraft is written in Java, and stack traces usually look like this (real example): java.lang.NullPointerException     at d.a(SourceFile:247)     at gi.b(SourceFile:92)     at bd.a(SourceFile:33)     at bn.a(SourceFile:69)     at bn.e(SourceFile:115)     at bn.d(SourceFile:103)     at net.minecraft.client.Minecraft.i(SourceFile:1007)     at net.minecraft.client.Minecraft.run(SourceFile:596)     at java.lang.Thread.run(Unknown Source)  Obviously these are not the real package and method names that the developer uses when he writes.  Since he is in an alpha stage, it seems that the developer should like to be able to make sense of his stack traces, especially if someone is able to provide one for a bug report.  As this stands, it's mostly meaningless. What advantage could one possibly hope to gain by obfuscating his code like this that overcomes the drawbacks of more difficult bug identification? ",
        "Best answer": "We obfuscate our Java code too.... The advantage is that it makes it harder to reverse-engineer (if you are worried about someone stealing your code base and using it as a base to create a similar competing product, for example, etc). You can get the original stack trace back: there are obfuscation tools out there which create special reference files which you can use to run the obfuscated stack traces through, and it comes out with the original source stack trace. These are generated by the obfuscation process itself, so you can't get the original stack trace back unless you have your hands on the reference file that you used to obfuscate the code in the first place. This has no disadvantages really. :) "
    },
    {
        "ID": "18131",
        "Question": "I know the general trend against comments explaining how something works, and how it's a good idea to use them only to explain why you're doing what you're doing, but what about using comments as a means of dividing up the code? Assume you have a script that does a preamble, searches through a bunch of records, prints the records, then closes everything: // Preamble ... preamble code, say about 10-15 lines ...  // Find records ... sql query ... ... put records into array ... ... some other stuff ...  // Print records ... printing records, 20-30 lines a record ...  // Close everything ...  More of a way to visually divide the code, make it easier to find a certain section. Like if in a month you need to fix the printing code, rather than reading through a couple hundred lines to try and find the right spot, just look at the comments to see where it is. What actually happens in each section being fairly straightforward and easy to tell what's going on, would this approach to comments be considered good or bad? Edit: I'm working mostly with PHP scripts, where you either can't put code into functions, or it's impractical to do so. However, the same sort of thing would apply to large class files, with several methods that do related things, like getters/setters, database updates, etc. ",
        "Best answer": "They're not out and out bad but I would ask if your routine is so long that it has sections that are significant in their own right and need a comment wouldn't you be better breaking it down into smaller routines? You'd then have a top level routine which was totally readable without comments: Thing.Initialise Thing.PopulateFromDatabase Thing.PrintResults Thing.ShutDown   Plus it's all reusable now. I'd also add that generally things like \"close everything down\" should be obvious from the code and the structure and therefore unnecessary.  If the code is This.Close(), That.CleanUp(), TheOther.Disconnect() then you really don't need a comment explaining.  Where I think these sorts of comments are good is in roughing out your design and structure before you start.  I find it's good to write the thing out in pseudo code in comments and then remove them as I actually code it.  You can then add and amend the design quickly as you are coding without the risk of forgetting what it was you'd decided. "
    },
    {
        "ID": "18202",
        "Question": "The project, I have involved, has an architecture-oriented project's file/folder structure: Root |____ Node1     |____ Event Handlers     |         |___ <all event handlers of project>     |____ Events     |         |___ <all events of project>     |____ Request Handlers       |         |___ <all request handlers of project>     |____ Requests     |         |___ <all requests of project>     |____ ...  It is a clear from the architectural point of view of system (has been proposed by development team). It is a feature-oriented structure has been proposed by designer team: Root |____ Feature #1     |____ Event Handlers     |         |___ <all event handlers of Feature #1>     |____ Events     |         |___ <all events of Feature #1>     |____ Request Handlers       |         |___ <all request handlers of Feature #1>     |____ Requests     |         |___ <all requests of Feature #1>     |____ ...  This variant is closer to designers and it describes clearly a feature to be implemented. Our teams have started a holy war: what is the best approach. Could somebody help us and explain cons and pros of the first and second ones. Maybe there is a third one that is more useful and beneficial for both of us. Thank you. ",
        "Best answer": "I would vote for the second one. In the first structure, event handlers for FeatureA are completely unrelated to event handlers for FeatureB. It seems that developers will be working on one feature at a time, and if you're working on a FeatureX request, it's far more likely that you'll need to tweak a FeatureX request handler than, say, a FeatureZ request. By the way, I love how you asked this question from a neutral point of view. "
    },
    {
        "ID": "18288",
        "Question": "Both asserts and unit tests serve as documentation for a codebase, and a means of discovering bugs.  The main differences are that asserts function as sanity checks and see real inputs, whereas unit tests run on specific simulated inputs and are tests against a single well-defined \"right answer\".  What are the relative merits of using asserts vs. unit tests as the main means of verifying correctness?  Which do you believe should be emphasized more heavily? ",
        "Best answer": "Asserts are useful for telling you about the internal state of the program. For example, that your data structures have a valid state, e.g., that a Time data structure won't hold the value of 25:61:61. The conditions checked by asserts are:  Preconditions, which assure that the caller keeps its contract, Postconditions, which assure that the callee keeps its contract, and Invariants, which assure that the data structure always holds some property after the function returns. An invariant is a condition that is a precondition and a postcondition.  Unit tests are useful for telling you about the external behavior of the module. Your Stack may have a consistent state after the push() method is called, but if the size of the stack doesn't increase by three after it is called three times, then that is an error. (For example, the trivial case where the incorrect push() implementation only checks the asserts and exits.) Strictly speaking, the major difference between asserts and unit tests is that unit tests have test data (values to get the program to run), while asserts do not. That is, you can execute your unit tests automatically, while you cannot say the same for assertions. For the sake of this discussion I've assumed that you are talking about executing the program in the context of higher-order function tests (which execute the whole program, and do not drive modules like unit tests). If you are not talking about automated function tests as the means to \"see real inputs\", then clearly the value lies in automation, and thus the unit tests would win. If you are talking about this in the context of (automated) function tests, then see below. There can be some overlap in what is being tested. For example, a Stack's postcondition may actually assert that the stack size increases by one. But there are limits to what can be performed in that assert: Should it also check that the top element is what was just added? For both, the goal is to increase quality. For unit testing, the goal is to find bugs. For assertions, the goal is to make debugging easier by observing invalid program states as soon as they occur. Note that neither technique verifies correctness. In fact, if you conduct unit testing with the goal to verify the program is correct, you will likely come up with uninteresting test that you know will work. It's a psychological effect: you'll do whatever it is to meet your goal. If your goal is to find bugs, your activities will reflect that. Both are important, and have their own purposes. [As a final note about assertions: To get the most value, you need to use them at all critical points in your program, and not a few key functions. Otherwise, the original source of the problem might have been masked and hard to detect without hours of debugging.] "
    },
    {
        "ID": "18454",
        "Question": "I've often written this sort of function in both formats, and I was wondering if one format is preferred over another, and why. public void SomeFunction(bool someCondition) {     if (someCondition)     {         // Do Something     } }  or public void SomeFunction(bool someCondition) {     if (!someCondition)         return;      // Do Something }  I usually code with the first one since that is the way my brain works while coding, although I think I prefer the 2nd one since it takes care of any error handling right away and I find it easier to read ",
        "Best answer": "I prefer the second style.  Get invalid cases out of the way first, either simply exiting or raising exceptions as appropriate, put a blank line in there, then add the \"real\" body of the method.  I find it easier to read. "
    },
    {
        "ID": "18579",
        "Question": "Is there any reason to keep using Linq to SQL, or is it better to move to ORM techniques like EF, NHibernate etc. We are using Linq to SQL in a new large enterprise application that will exist for a long time. The motivation for this new enterprise application is that the application was ordinary written in Visual Basic and since Microsoft stopped the support we where forced to rewrite the application. It’s seems that we are already there but this time with our DAL (Data Access Layer). I have already read this article, but it only compare to EF's weakness. ",
        "Best answer": "It's not dead, but Microsoft is now focused on the Entity Framework. I've used LINQ to SQL on small projects, and it's quite nice as a lightweight data-layer and i'd consider using it again on similar sized projects. The LINQ implementation itself is really good and until recently much better than the NHibernate LINQ project. On the larger project I used L2S on, I found it hard to come up with a unit-of-work pattern that I was happy with, due to limitations with the L2S 'DataContext' class. Trying to implement something like 'Session per request' with L2S seems either very difficult or impossible. I also wouldn't really consider L2S as a true ORM, as it really doesn't give you many mapping options. Your class design really needs to follow your database schema (table-per-class) otherwise it will fight with you every step of the way. Another thing I don't like about L2S is the need to use specific types (EntitySet and EntityRef) to handle collections, references and lazy-loading. This means it's not possible to keep your domain model ORM agnostic without adding another layer of abstraction. My other issue with L2S is the sole reliance on LINQ to generate queries. The LINQ provider is very well written and generally creates decent SQL for the majority of queries but I have my concerns that there are more complex queries that can't be expressed well with LINQ. Using L2S you basically have to revert to calling stored procedures in these cases, whereas (for example) NHibernate has several API's (LINQ provider, QueryOver, HQL etc) that can be used when you want more control over the generated SQL. In L2S's defence over NHibernate, there is a lot less overhead in getting it up and running on a project. "
    },
    {
        "ID": "18704",
        "Question": "I periodically teach an introduction to programming course using Java. I want to give my students some exciting assignments that they can relate to or find interesting. At the very least, I want assignments that make sense and have an internal cohesion (for example, some very bad programming exercises seem contrived just so that you have to use the most recent programming construct covered). To give you an idea of scope, here's what's being covered:  The assignments must be in Java, using some external library can be done, but it would need to be a simple API and not a full framework Variables, Primitives and Strings Console input and output if, for, while Arithmetic and logical operators Simple graphics with line and shape drawing Static methods One-dimensional arrays  The students will not go into advanced topics (e.g., no recursion, no emphasis on inheritance). Thus, I'm not looking for complex projects: \"Have them write a C compiler. I did it when I was 5 and it was the only way I learned!\" If you have ideas that are more advanced than the scope, please post them on the \"Challenging\" question linked below, and not this one. Instead, what I'm looking for are interesting ideas that can be accomplished in a short program. For example:  Students can write a console version of the \"Star Wars Name\" Generator. This is effectively reading Strings and using substring, but I think it's fun. A similar variation would be a \"Mad Libs\" program. I used this one five years ago, and perhaps it's already \"stale.\" Using some trig supplied to them, students can draw regular polygons, and create interesting spiral shapes. It's also not out of the question to use some simple animation class with most of the code supplied to them. And if you know a Twitter or Facebook service that can be accessed with a simple API, I would be very interested to know.  Please note that this question is different from the \"Challenging Java questions for beginners\" Question. I'm not looking for challenging per se, just interesting. I think if students work on something where they can easily answer \"why would anyone ever want to program that?\" then they will learn better. Even simple problems like computing Miles per Gallon can be good. Although, if there's a way to update it to be more relevant, all the better. If you have an exercise from somewhere else (a book or a website), please cite the source. To help you think about the typical freshman today, check out the Beloit Mindset list, for many examples that will surely make you feel old. ",
        "Best answer": "Given the constraints, I'd suggest implementing a version of Hangman. It would allow for the students to demonstrate all of the techniques you are introducing them to, without being overly complex.   It can also be used as a developing project as the course progresses.  e.g.  once you have covered strings and variables starts out as a text version  e.g. You have 10 guesses left.      * * * E * * T What is your next guess?  then introduce loops to remove the cut and paste element from the code as the 10 guesses count down...  building up to having line graphics and the stick person being hung / saved at the end of the 5 week course. Like most other people who have experience of recruiting and interviewing programmers, it really makes me cringe that this level of tuition is needed at university, but alas, it probably will continue to be needed until schools treat programming as a serious subject on a par with mathematics or sciences "
    },
    {
        "ID": "18952",
        "Question": "Are there any arguments out there against using the keyword substitution (i.e. replacing $Revision$ with $Revision: 5$) feature in many version control systems?  Are there any overall bad practices that using the feature encourages?  Are the any pervasive and hard-to-solve problems that it causes when you do use it? Here an argument against using it:  Keyword Substition: Why You Don't Need It  It's succinct, and I think the argument about the problems it causes for binary files is cogent, but I don't find it compelling. ",
        "Best answer": "This is an artifact from the old days, where files were versioned on an individual basis (think RCS, SCCS, and CVS) where modern version control systems think in atomic commits and not individual files.  This means that in the old days it made sense to keep track on a file level basis and the best way to do this was in a way that could make its way to binary code.  Hence expandable keywords which could go in strings that could go in the object file. These days, you have a single commit identifier which only need to be registered once for any binary and which can be explicitly scripted to go in a file instead of the versioning system expanding keywords. This is better, simply because it means that the sources only change when YOU edit them. "
    },
    {
        "ID": "19199",
        "Question": "I'll use C# as an example, but it should apply globally. Say I have a string value that should be one of a few constants, but I also want the client to set which string value to use so: private int foo; private string bar;  public int Foo {     get { return foo; }     set     {         foo = value;         bar = getStringValueFromDatabase(value);     } }  public string Bar { get { return bar; } }  I use this technique quite a lot and want to know if it's considered as any formal concept. ",
        "Best answer": "It's perfectly valid OO technique, though I think it can be made a bit more efficient if the lazy-loading (which is what this effectively is) is deferred until the Bar value is actually needed.  private int foo; private string bar;  public int Foo  {     get { return foo; }     set     {         foo = value;         bar = null;     } }  public string Bar {      get      {          if(bar == null)              bar = getStringValueFromDatabase(Foo);         return bar;      }  }  Edit: I think that's an improvement on the original code though as others have observed, even better would be to abstract the data access into a separate layer. "
    },
    {
        "ID": "19225",
        "Question": "Java's checked exceptions have gotten some bad press over the years. A telling sign is that it's literally the only language in the world that has them (not even other JVM languages like Groovy and Scala). Prominent Java libraries like Spring and Hibernate also don't use them.  I personally have found one use for them (in business logic between layers), but otherwise I'm pretty anti-checked exceptions. Are there any other uses that I don't realize? ",
        "Best answer": "First of all, like any other programming paradigm you need to do it right for it to work well.   For me the advantage of checked exceptions is that the authors of the Java runtime library ALREADY have decided for me what common problems I might reasonably be expected to be able to handle at the calling point (as opposed to a top-level catch-print-die block) and consider as early as possible how to handle these problems. I like checked exceptions because they make my code more robust by forcing me to think about error recovery as early as possible. To be more precise, to me this makes my code more robust as it forces me to consider strange corner cases very early in the process as opposed to saying \"Oops, my code does not handle if the file doesn't exist yet\" based on an error in production, which you then have to rework your code to handle.  Adding error handling to existing code can be a non-trivial task - and hence expensive - when reaching maintenance as opposed to just doing it right from the start. It might be that the missing file is a fatal thing and should cause the program to crash in flames, but then you make that decision with } catch (FileNotFoundException e) {   throw new RuntimeException(\"Important file not present\", e); }  This also shows a very important side effect.  If you wrap an exception, you can add an explanation which goes in the stack-trace!  This is so extremely powerful because you can add information about e.g. the name of the file that was missing, or the parameters passed to this method or other diagnostic information, and that information is present right in the stack trace which frequently is the single thing you get when a program has crashed. People may say \"we can just run this in the debugger to reproduce\", but I have found that very frequently production errors cannot be reproduced later, and we cannot run debuggers in production except for very nasty cases where essentially your job is at stake. The more information in your stack trace, the better.  Checked exceptions help me get that information in there, and early.  EDIT:  This goes for library designers as well.  One library I use on a daily basis contains many, many checked exceptions which could have been designed much better making it less tedious to use. "
    },
    {
        "ID": "19317",
        "Question": "I keep running into the same problems.  The problem is irrelevant, but the fact that I keep running into is completely frustrating. The problem only happens once every, 3-6 months or so as I stub out a new iteration of the project.  I keep a journal every time, but I spend at least a day or two each iteration trying to get the issue resolved. How do you guys keep from making the same mistakes over and over? I've tried a journal but it apparently doesn't work for me.  [Edit] A few more details about the issue:  Each time I make a new project to hold the files, I import a particular library.  The library is a C++ library which imports glew.h and glx.h GLX redefines BOOL and that's not kosher since BOOL is a keyword for ObjC. I had a fix the last time I went through this.  I #ifndef the header in the library to exclude GLEW and GLX and everything worked hunky-dory. This time, however, I do the same thing, use the same #ifndef block but now it throws a bunch of errors.  I go back to the old project, and it works.  New project no-worky. It seems like it does this every time, and my solution to it is new each time for some reason.  I know #defines and #includes are one of the trickiest areas of C++ (and cross-language with Objective-C), but I had this working and now it's not. ",
        "Best answer": "I'd suggest determining what triggers the issue, and restructuring your development process to avoid that scenario. What 'restructuring' entails is highly dependent on the problem. It ranges from abstracting some behavior into a seperate class to changing the composition of your team. A journal detailing the context of the incident and resolution approaches can certainly help you converge on the root cause and/or a general solution. Once you've determined that there are a few obvious options:  If the cause is avoidable: Try to avoid triggering the root cause next time. If the solution proves to be simple: Implement the general solution whenever the problem occurs. Restructure your development process so that it naturally avoids the issue.  The options available depend on the information about the issue you have, and the amount of control you have over the development process. "
    },
    {
        "ID": "19344",
        "Question": "Lets suppose that I have a class which represent an image and has a number of methods. class Image {     circle(x,y,radius,color);     square(x,y,w,h,color);     floodfill(x,y,color)     clear(); }  Furthermore, I want to have undo functionality. A simple way of implementing this is to keep a list of all the actions that have been performed. When I undo, I just re-run all of the actions. One solution would be to implement an aspect, something like this: aspect ImageUndo {     on Image::circle, Image::square, Image::floodfill     precall(object, args)     {          object.actions_list.add(args)     } }  Essentially, this aspect has now modified the behavior of Image. That gives me concern. In particular, another programmer unfamiliar with the existence of ImageUndo aspect may run into the following problems:  He adds a method, and it does not work with the undo functionality. Attempting to debug the undo mechanism, it is not clear where the actions_list get added to.  On the other hand we could have class Image {     @undoable_action     circle(x,y,radius,color);      @undoable_action     square(x,y,w,h,color);      @undoable_action     floodfill(x,y,color)      @undoable_action     clear(); }  Which does not bother me as much because it gives an idea of where to look for the undo code and makes is so that the new coder will probably notice it an automatically add it to a new method. To summarize: aspects (at least those like the one I showed) seems to bring \"implicit magic\" into what code does. It seems to me that the implicitness is dangerous and we should really make it explicit. Are there good reasons for the implicitness? Do people who actually use AOP write code that does this sort of modification?  Note: this is a reworking of Are certain problems solved more elegantly with AOP? which was closed because my previous version came across, unintentionally, as ranting. ",
        "Best answer": "Classes that implement cross-cutting concerns have nothing to say about the core functionality of classes being AOP'd.  That's the core idea here. Your example is one of an undo action.  Let's take it a step further: we will make a deep copy of your class and store it somewhere.  If we want to perform an undo, all we have to do is reverse the deep copy.  This will \"roll back\" the class to its original state.  You don't even need to annotate the class members to make it work (although you could annotate the class itself if you wanted the deep copy to operate automatically). Here's my question: Does this deep copy process have anything at all to do with the primary functionality of the class being deep copied?  Does the deep copy even care what the class does? Serializing and deserializing objects are another example of this.  The serialization process has no knowlege of the behavior of the class, and the objects being serialized have no knowledge of the serialization process.  It's a powerful decoupling tool. "
    },
    {
        "ID": "19392",
        "Question": "Okay, I'll cop to it: I'm a better coder than I am at databases, and I'm wondering where thoughts on \"best practices\" lie on the subject of doing \"simple\" calculations in the SQL query vs. in the code, such as this MySQL example (I didn't write it, I just have to maintain it!) -- This returns the username, and the users age as of the last event.  SELECT u.username as user,         IF ((DAY(max(e.date)) - DAY(u.DOB)) &lt; 0 ,           TRUNCATE(((((YEAR(max(e.date))*12)+MONTH(max(e.date)))        -((YEAR(u.DOB)*12)+MONTH(u.DOB)))-1)/12, 0),          TRUNCATE((((YEAR(max(e.date))*12)+MONTH(max(e.date))) -                    ((YEAR(u.DOB)*12)+MONTH(u.DOB)))/12, 0)) AS age    FROM users as u JOIN events as e ON u.id = e.uid ...  Compared to doing the \"heavy\" lifting in code: Query:  SELECT u.username, u.DOB as dob, e.event_date as edate FROM users as u JOIN events as e ON u.id = e.uid  code:  function ageAsOfDate($birth, $aod) {    //expects dates in mysql Y-m-d format...      list($by,$bm,$bd) = explode('-',$birth);      list($ay,$am,$ad) = explode('-',$aod);       //Insert Calculations here       ...      return $Dy; //Difference in years }  echo \"Hey! \". $row['user'] .\" was \". ageAsOfDate($row['dob'], $row['edate']) . \" when we last saw him.\";   I'm pretty sure in a simple case like this it wouldn't make much difference (other than the creeping feeling of horror when I have to make changes to queries like the first one), but I think it makes it clearer what I'm looking for.  Thanks! ",
        "Best answer": "You want to do all set-based operations in the database for performance reasons. So aggregation functions, sorting functions, joins etc.  This age calculation, I'd do in code. The only reason I might ever do something like this in a database query is if it required lots of columns that I wouldn't otherwise select that could actually amount to enough data to meaningfully slow down my query. Selecting a few integer values will not make a meaningful performance difference. And even if it makes a moderate performance difference I will be biased towards keeping this logic in the application code. "
    },
    {
        "ID": "19397",
        "Question": "One day while trawling through the Java language documentation, as you do, I found this little beauty lurking within Double: 0.25 == 0x1.0p-2  Now, obviously (!) this means take the number hexadecimal 1 and right shift it decimal 2 times. The rule seems to be to use base 16 on the integer side and base 2 on the real side.  Has anyone out there actually used the right hand syntax in a necessary context, not just as a way getting beers out of your fellow developers? ",
        "Best answer": "Just a guess:  Some numbers that are rational in base10 are irrational in base2, and conversely some numbers that are rational in base2 are irrational in base10 (Please correct me if I'm wrong...I'm looking this up to confirm). EDIT: thanks to \"Note to self - think of a name\" for correcting me. I supposed that if you had a need to specify an exact binary value as a floating point (such as some epsilon value in graphical programming), then it might be more convenient to use this syntax.  For example, 1/1024 is 0.0009765625 in base 10, but using this syntax it can be written as 0x1.0p-10 "
    },
    {
        "ID": "19425",
        "Question": "What are the pros and cons of having static object creation methods over constructors? class Foo {   private Foo(object arg) { }    public static Foo Create(object arg) {     if (!ValidateParam(arg)) { return null; }     return new Foo(arg);   } }  Few that I can think of: Pros:  Return null instead of throwing an exception (name it TryCreate). This can make code more terse and clean on the client side. Clients rarely expect a constructor to fail. Create different kinds of objects with clear semantics, e.g. CreatFromName(String name) and CreateFromCsvLine(String csvLine) Can return a cached object if necessary, or a derived implementation.  Cons:  Less discoverable, more difficult to skim code.  Some patterns, like serialization or reflection are more difficult (e.g. Activator<Foo>.CreateInstance())  ",
        "Best answer": "The biggest drawback with static 'creators' is probably limiting inheritance. If you or the user of your library derives a class from your Foo, then Foo::Create() becomes pretty much useless. All logic defined there will have to be rewritten again in the inherited Create(). I'd suggest a compromise: define a constructor with trivial object initialization logic that never fails/throws, then define creator(s) with caching, alternate construction etc.  That leaves the possibility of deriving and you benefit from having creators for a given class. "
    },
    {
        "ID": "19437",
        "Question": "I've been looking at the Ms-PL license that ASP.NET MVC and DotNetOpenAuth are published under and 3A says this: 3 Conditions and Limitations  (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.  Does this mean that I cannot name my project ASP.NET MVC DotNetOpenAuth Sample Project and publish it if I use these two technologies or does it just mean that I cannot use the author's name to promote this project? ",
        "Best answer": "Trademarks are a business thing, so a personal name isn't a trademark unless that person uses it as such in a business or similar enterprise.  Such things as Microsoft Windows and ASP.NET are trademarks.  I could trademark \"David Thornley\" software if I were to write and distribute it (remember Peter Norton and the Norton Utilities?), but since I'm not actually in that business my name isn't a trademark. Also, pay attention to the wording.  The license doesn't grant any rights to a trademark, but it doesn't restrict any ability you already have.  You can't call your project Microsoft software, but you can advertise that it runs on Microsoft Windows.  The guiding rule (at least in the US) is if you're trying to create any confusion about who produces the software, or if a reasonable person could be confused.  You'd probably be safe calling it \"Project Gligoran, using ASP.NET and running on Microsoft Windows\", but if you're worried consult a trademark lawyer. Also, in the US, trademarks work on a \"protect it or lose it\" basis.  If you use a trademark improperly, and the owner of the trademark finds out about it, the owner is legally required to take some sort of action against you or risk losing the trademark. "
    },
    {
        "ID": "19673",
        "Question": "I'm a fairly new convert to Emacs and I really love it as an editor, primarily because I keep finding new and super-useful commands. Are there any other programmer 'must known' commands missing from my list? M-x replace-string     - Find and replace a given string. M-x goto-line          - Goto a specific line M-x column-number-mode - Show the current column number in text bar  ",
        "Best answer": "Well, First You need to know some of the basics of text editing: C-w : Cut  M-w : Copy C-y : Paste C-x s : save C-x c : save all and close  Then, it's handy to learn how to move around the file: M-b : back one word M-f : foward one word C-a : beginning of line C-e : end of line C-n : next line C-p : previous line M-< : beginning of buffer M-> : end of buffer     Then, It's good to start learning how to navigate with multiple files/buffers and windows C-x C-f : find file C-x b : switch buffer C-x k : kill buffer C-x 2 : split-window-vertically C-x 3 : split-window-horizontally C-x o : switch window C-x 0 : kill this window C-x 1 : kill all other windows  After that, here are a few other misc. commands that can come in handy: C-s : search C-r : search backward M-/ : autocomplete word (based on previous words in the file) M-x : align-regexp M-( : start keyboard macro M-) : end keyboard macro C-x e: execute keyboard macro.  For a complete reference: link "
    },
    {
        "ID": "19845",
        "Question": "Over the years I have developed several style based techniques which I use to keep my from make Error if(const == lvalue) rather then if(lvalue == const) since the first can't fall victim to the classic accidental assignment goof. I recently  worked on a project with very unusual style standards and I found that I had much greater difficulty reading code.  Has anyone seen any statistics on a particular coding style and its defect levels or have any experience with changing style alone to improve defect rates. ",
        "Best answer": "If you haven't read it yet, you should definitely take a look at Code Complete, 2nd Edition by Steve McConnell. Almost the entire book is devoted to this type of discussion along with actual studies to back up his ideas. "
    },
    {
        "ID": "19856",
        "Question": "The Joel Test includes the question:  Can you make a build in one step?  Which is important, but I'm wondering, how streamlined have some of the deployment processes been? All software from shrink-wrap to web applies: what's the best deployment environment you've worked with, and what steps were involved? ",
        "Best answer": "It's the environment I have set up in my company, and am working with right now. Description of the environment We are a team of 4 developpers, working on a Java desktop project. The source code is under Mercurial, with the main repo hosted on our development server. We mostly use TortoiseHg to work with Mercurial. The projects that we open sourced are on BitBucket. The project is built with Maven. The IDE we use is Netbeans, which works impressively well with Maven (it works ok with Mercurial, too). Our dev server runs Archiva, which is a proxy Maven repository. We use maven to build the project, but we use it also to execute it (mvn exec), to deploy the generated artifacts to Archiva (mvn release), and to generate an assembly from the artifacts hosted by Archiva (mvn assembly). We have a Redmine bugtracker too, and it is aware of the Mercurial repos. We use a RSS client to be informed of the project activity (from Redmine and Mercurial). We also have a Jabber server to send messages and files to each other. We set up an Hudson server (continuous integration) and a Sonar server (code metrics). But in practice we don't really use it. We have the choice of using Windows or Linux Steps to make a release Example to release a version 1.1.3 # tags the VCS, updates all the version numbers in the maven config file mvn --batch-mode release:prepare -DreleaseVersion=1.1.3 -DdevelopmentVersion=1.1.4-SNAPSHOT # performs a clean build, runs all tests, deploys to the server mvn release:perform # creates a unique jar (the final product) from the previously deployed artifacts (no recomilation involved) <update the version number in a config file to 1.1.3> mvn assembly:assembly  "
    },
    {
        "ID": "19911",
        "Question": "How are companies working on large projects evaluating an impact of a single modification on an existing code base?  Since my question is probably not very clear, here's an example: Let's take a sample business application which deals with tasks. In the database, each task has a state, 0 being \"Pending\", ... 5 - \"Finished\". A new requirement adds a new state, between 2nd and 3rd one. It means that:  A constraint on the values 1 - 5 in the database must be changed, Business layer and code contracts must be changed to add a new state, Data access layer must be changed to take in account that, for example the state StateReady is now 6 instead of 5, etc. The application must implement a new state visually, add new controls for it, new localized strings for tool-tips, etc.  When an application is written recently by one developer, it's more or less easy to predict every change to do. On the other hand, when an application was written for years by many people, no single person can anticipate every change immediately, without any investigation. So since this situation (such changes in requirements) is very frequent, I imagine there are already some clever techniques and ways to predict the impact. Is there any? Do you know any books which deal about this subject?  Note: my question is not related to How do you deal with changing requirements? question. In fact, I'm not interested in evaluating the cost of a change, but rather the way to predict the parts of an application which will be concerned by the change. What will be those changes and how difficult they are really doesn't matter in my question. ",
        "Best answer": "I don't think you can ever tell just how much a change will affect code. That being said though, if one know the framework of the application well, he can generally predict about how long it will take and what needs to be done. It comes from experience, not metrics. I'm sure you've thought of cases that a user thought a change would be simple ('He's just adding one menu option! how hard can that be?!) but in reality was quite complex. I have two possible solutions. The first I think is critical: Documentation. Being able to read about the general layout of an application will help someone greatly in determining where changes will need to be made. Lower level docs about specific areas will help in actually making the changes. The second would be to have a senior developer look at each request as he probably can tell quickly what it will entail. He then can give an estimate of how long it will take and what needs to happen before it is assigned to a person or team for development. This may not always be practical, so documentation is still extremely critical. "
    },
    {
        "ID": "20080",
        "Question": "Over on stackoverflow, I see this issue crop up all the time:    E_NOTICE ?== E_DEBUG, avoiding isset() and @ with more sophisticated error_handler  How to set PHP not to check undefind index for $_GET when E_NOTICE is on?  How to stop PHP from logging PHP Notice errors  How do I turn off such PHP 5.3 Notices ?   Even Pekka (who offers a lot of solid PHP advice) has bumped against the dreaded E_NOTICE monster and hoped for a better solution than using isset(): isset() and empty() make code ugly  Personally, I use isset() and empty() in many places to manage the flow of my applications.  For example: public function do_something($optional_parameter = NULL) {     if (!empty($optional_parameter)) {         // do optional stuff with the contents of $optional_parameter     }     // do mandatory stuff }    Even a simple snippet like this: if (!isset($_REQUEST['form_var'])) {     // something's missing, do something about it. }  seems very logical to me.  It doesn't look like bloat, it looks like stable code.  But a lot of developers fire up their applications with E_NOTICE's enabled, discover a lot of frustrating \"uninitialized array index\" notices, and then grimace at the prospect of checking for defined variables and \"littering\" their code with isset(). I assume other languages handle things differently.  Speaking from experience, JavaScript isn't as polite as PHP.  An undefined variable will typically halt the execution of the script.  Also, (speaking from inexperience) I'm sure languages like C/C++ would simply refuse to compile. So, are PHP devs just lazy?  (not talking about you, Pekka, I know you were refactoring an old application.)  Or do other languages handle undefined variables more gracefully than requiring the programmer to first check if they are defined? (I know there are other E_NOTICE messages besides undefined variables, but those seem to be the ones that cause the most chagrin) Addendum From the answers so far, I'm not the only one who thinks isset() is not code bloat.  So, I'm wondering now, are there issues with programmers in other languages that echo this one?  Or is this solely a PHP culture issue? ",
        "Best answer": "I code to E_STRICT and nothing else.  Using empty and isset checks does not make your code ugly, it makes your code more verbose. In my mind what is the absolute worst thing that can happen from using them? I type a few more characters. Verses the consequences of not using them, at the very least warnings. "
    },
    {
        "ID": "20206",
        "Question": "So I was currently in the middle of coding, unfortunately for me, I was in \"The Zone\" then I thought to myself, are my method/variable names to long?  POP out of the Zone I go!   So I came here to ask, are my method/variable names too long? You be the Judge! Bonus points to anyone who can figure out what I'm writing, although I'm sure a guru will figure it out fast! Anyway, here are some of my method and variable names. Methods :   searchBlockedListForBlockedSquares(),  isCurrentSquareNextToAtLeastOneBlockedSquare(), searchBlockedListForBlockedSquares()  Variables:    isNextToBlockedSquares   I guess there was only one variable that seemed too long. ",
        "Best answer": "Your names seem okay to me in terms of length. However, the way they are named suggests that maybe some new classes are in order? For example, instead of searchBlockedListForBlockedSquares() you could have blockedList.getBlockedSquares(). Similarly, isCurrentSquareNextToAtLeastOneBlockedSquare() becomes currentSquare.isAdjacentToABlockedSquare(). "
    },
    {
        "ID": "20466",
        "Question": "Should I break SQL queries in different lines? For example in the project I am working on, we have a query that is taking 1600 columns! 1600 + tab chars. I wrote queries like this:    \"SELECT bla , bla2 , bla FROM bla \" .       \"WHERE bla=333 AND bla=2\" .        \"ORDER BY nfdfsd ...\";  But they demanded me to put them in one line and said that my style is bad formatting. Why it is bad practice? ",
        "Best answer": "For source control reasons, we have linebreaks after every where clause, or comma. So your above turns into   SELECT bla       , bla2       , bla  FROM   bla  WHERE  bla=333    AND  bla=2 ORDER  BY nfdfsd         , asdlfk;  (tabbing and alignment has no standard here, but commas are usually leading) Still, makes no performance difference. "
    },
    {
        "ID": "20536",
        "Question": "I was just reading https://stackoverflow.com/questions/155609/what-is-the-difference-between-a-method-and-a-function and all of a sudden, the thing came to my mind was the static methods.  As static methods are no way associated with an object how can it be called as static methods (almost all developers do)? Is my understanding about the methods/functions is correct?  ",
        "Best answer": "(Using Java terminology): Static methods can be associated with static members (members of the class object). If the methods don't access static members (nor IO resources or anything else that could change state), of if those members are final primitives or immutable objects (essentially constants), then such static methods could be called functions, but in general, because they potentially could access the class object's members, they're usually called static methods. In order to count as a function, a method must be independent of any state; it must not cause any side effects nor be affected by any side effects. When called with specific parameters, it must always return the same result. Otherwise it's not a pure function. That is, the following area is a function: class MyClass {     static final double pi = 3.14;     static double area(double r) {         return pi * r * r;     } }  while the following getCallCount is not a function: class MyClass {     static int callCount = 0;     static int getCallCount {         return ++callCount;     } }  In general, mutable (non-final) static members should be used with caution - someone would say that they should not be used at all - because they make a global state to the program, which likely turns out to be a bad design choice in the long run. There are exceptions, but be careful... You don't even need static members to make static non-functions: System.nanoTime() is definitely not a pure function (because it returns different value on successive calls), even though it only accesses the computer's clock, not any static members.  Confusingly enough, you could also make non-static pure functions: class MyClass {     final double pi = 3.14;     double area(double r) {         return pi * r * r;     } }  Now, although not static any more, area is still a pure function: it doesn't touch anything that could change. The fact that you would have to create an instance of MyClass to access area doesn't reduce its \"functionness\". Indeed, one could argue that this kind of pure functions should always be made static. "
    },
    {
        "ID": "20573",
        "Question": "Any time a Perl, Python, C++ or Tcl program halts with an unhandled exception, those language runtimes take care to register a non-zero exit code for the process. Even Eclipse-based programs return 1 if they fail during startup. Programs run by the standard java.exe, however, happily return zero no matter how abruptly they end, unless the program calls System.exit() with an exit value. Even AssertionFailedError or UnsatisfiedLinkError are reported back to the calling program as successful exits. Of course not all systems have program return codes, but Unix and Windows were important enough to warrant java.lang.Process.exitValue() for child processes; don't they also warrant honouring conventions for parent processes? Is this a flaw in the language design or just in the implementation? Is there an argument that it's a good idea? ",
        "Best answer": "If the Java Language Specification does not explicitly define what exit value to expect, then it is undefined and you should not rely on it. You need to catch Throwable in your main method, and call System.exit(1) yourself. "
    },
    {
        "ID": "20586",
        "Question": "I've been programming for years now, working my way through various iterations of Blub (BASIC, Assembler, C, C++, Visual Basic, Java, Ruby in no particular order of \"Blub-ness\") and I'd like to learn Lisp. However, I have a lot of intertia what with limited time (family, full time job etc) and a comfortable happiness with my current Blub (Java).  So my question is this, given that I'm someone who would really like to learn Lisp, what would be the initial steps to get a good result that demonstrates the superiority of Lisp in web development? Maybe I'm missing the point, but that's how I would initially see the application of my Lisp knowledge.  I'm thinking \"use dialect A, use IDE B, follow instructions on page C, question your sanity after monads using counsellor D\". I'd just like to know what people here consider to be an optimal set of values for A, B, C and perhaps D. Also some discussion on the relative merit of learning such a powerful language as opposed to, say, becoming a Rails expert. Just to add some more detail, I'll be developing on MacOS (or a Linux VM) - no Windows based approaches will be necessary, thanks. Notes for those just browsing by I'm going to keep this question open for a while so that I can offer feedback on the suggestions after I've been able to explore them. If you happen to be browsing by and feel you have something to add, please do. I would really welcome your feedback.  Interesting links Assuming you're coming at Lisp from a Java background, this set of links will get you started quickly.  Using Intellij's La Clojure plugin to integrate Lisp (videocast) Lisp for the Web Online version of Practical Common Lisp (c/o Frank Shearar) Land of Lisp a (+ (+ very quirky) game based) way in but makes it all so straightforward Install Clojure and Sublime 2 on MacOS an excellent getting started guide Look at the Clojure in Action book. Worked for me.  ",
        "Best answer": "This is probably counter to most peoples' recommendations, but steer clear of Emacs to start with, unless you already know it. Especially if you're used to modern IDEs/editors. I'm speaking from experience; I tried to start with Emacs, but having to learn the language AND the editor at the same time really frustrated me (especially since Emacs is so different from other tools). I ended up chucking it, getting started with PLT Scheme (now Racket) which comes with a comparatively simple cross-platform IDE, a centralized package repository and fabulous docs (including an intermediate tutorial specifically aimed at web development). After I got a clean grip on Lisp, I ended up going back to Emacs, picking up EL/CL by way of Practical Common Lisp and Xah's Elisp Guide. Basically, as I see it, you need to know a Lisp before you can use Emacs effectively, and you need to know Emacs in order to be very effective with CL/Elisp. This means that you can either pick up Scheme, or learn Common Lisp through some other editor first (LispWorks personal, probably). If you already know Emacs, then yeah Elisp is the natural step (though how you would enjoy Emacs use without knowing Elisp first is beyond me). YMMV of course, this is just what I found helped. Since your current blub is Java, you could probably get a lot of mileage out of Clojure, Armed Bear or Kawa. I haven't tried any of them myself, not being a Java guy, but Clojure specifically comes highly recommended from other Lispers I know. It seems like the ability to keep your current VM and IDE might help with the learning process. "
    },
    {
        "ID": "20596",
        "Question": "I am currently facing a situation where I will need to obfuscate data for legal reasons (these are countrywide rules and not specific to me) I will still need to work with teams outside this area who will still need to access applications/databases for testing/deployment and so on, however the data must be fully obfuscated. What are your experiences of this scenario? e.g. Who owns what stage of the process, what access do the various parties have, how strong is the encryption, how do updates occur ",
        "Best answer": "One large financial client we do business with has a standardized automated process for obfuscating data. We don't, so I have a few scripts where I do this by hand. The point is to leave reasonably realistic data (lengths of names, postal codes) while rendering the personally identifiable data irretrievably scrambled. Their system is far more complicated than this, but basically when production data gets copied to development and QA environments, it will be scrambled automatically. This way there is no potential for \"forgetting\" to do some of the scrambling.   Passwords: Set them all to something test accounts use: like Password1 or 1234567.  Tax ID numbers, Social Insurance Numbers, Social Security Numbers: Take the first 3 digits and generate random numbers for the remainder. In the US, the first 3 digits are generally assigned based on where you lived when the SSN was issued, so not all combinations of first 3 digits are valid. For EINs, take the first 2 digits, as not all combinations of first 2 digits are valid. Adjust which digits get left alone if your country uses different rules.  Names: Hash and base64 the first and last names separately. Take the first letter of unhashed name append the hash afterwards and truncate the result to original name's length  Example:  Name = \"John Doe\"  (I am using SHA384) So John Doe gets turned into Jnbn Dnh. It helps to keep the names the same length as that may help to point out usability issues.    If you have rules such as \"names cannot have digits\" then you need to remove out the base 64 values that aren't valid, also lowercasing the subsequent letters (done in sample code below).  Addresses:  Street names and city names get hashed as names above do. Numbers stay the same. State and zip stays the same.  So 1313 Mockingbird Lane becomes 1313 Mvtqiwtuqrd Lzzx Phone numbers: Leave area code the same, generate random digits for the remaining digits.    Credit Card Numbers: You should not be storing these at all.    Here is some sample & crude C# code for hashing and truncating (simple to display the concept)       using System.Security.Cryptography;       using System.Text.RegularExpressions;         public string ScrambleInput(string sInput)     {         string sReturn = sInput.Substring(0,1);         string sTemp = string.Empty;         System.Security.Cryptography.SHA384Managed Hasher = new SHA384Managed();         System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();         byte[] buff = new byte[sInput.Length];         buff = enc.GetBytes(sInput);         Hasher.ComputeHash(buff);         sTemp = Convert.ToBase64String(Hasher.Hash, 0, Hasher.Hash.Length, System.Base64FormattingOptions.None);         sTemp = sTemp.ToLower().Replace(\"+\", \"\").Replace(\"/\", \"\");         sReturn += Regex.Replace(sTemp, @\"\\d\", \"\");         sReturn = sReturn.Substring(0, sInput.Length );         return sReturn;     }  "
    },
    {
        "ID": "20896",
        "Question": "Been calling them \"implementers\", but it seems weird to me. /// <summary> /// Implementers should implement this.  Derp /// </summary> protected abstract void InternalExecute();  A point of clarification, I'm interested in what to call the people who create child classes, not the child classes themselves. \"Hey, you there\" not \"that thing there.\" ",
        "Best answer": "MSDN class documentation often uses \"you\" to refer to developers.  When you inherit from WebRequest, you must override the following members... You do not typically inherit from ButtonBase. To create your own button class, inherit from the Button, CheckBox, or RadioButton class....  You can also simply state what the requirements are for descendent classes. It is implied that developers are your audience.  Classes that inherit IDbConnection must implement all inherited members, and typically define additional members to add provider-specific functionality.  In your example, instead of \"Implementers should implement this\", write \"Descendent classes must override InternalExecute to...\" or \"In descendent classes, you must override InternalExecute to...\". "
    },
    {
        "ID": "20909",
        "Question": "Simple question, but I often hear these three terms defined with such ferocity, but which have been known to me to mean different things over the years. What are the \"correct\" definitions of \"Procedures\", \"Methods\", \"Function\", \"Subroutines\", etc? ",
        "Best answer": "I'm going with a different answer here: practically speaking, there's really no difference, with the slight exception that \"method\" usually refers to a subroutine associated with an object in OO languages. The terms \"procedure, function, subroutine, subprogram, and method\" all really mean the same thing: a callable sub-program within a larger program.  But it's difficult to come up with a definition that captures all variant usages of these terms, because they are not used consistently across programming languages or paradigms. You might say a function returns a value.  Well, the following C function doesn't return a value: void f() { return; }  ...but I doubt you'd find anyone who would call it a procedure.   Sure, in Pascal, procedures don't return values and functions return values, but that's merely a reflection of how Pascal was designed.  In Fortran, a function returns a value, and a subroutine returns multiple values.  Yet none of this really allows us to come up with a \"universal\" definition for these terms. In fact, the term \"procedural programming\" refers to a whole class of languages, including C, Fortran and Pascal, only one of which actually uses the term \"procedure\" to mean anything. So none of this is really consistent.  The only exception is probably \"method\", which seems to be used almost entirely with OO languages, referring to a function that is associated with an object.  Although, even this is not always consistent.  C++, for example, usually uses the term \"member function\" rather than method, (even though the term \"method\" has crept into the C++ vernacular among programmers.) The point is, none of this is really consistent.  It simply reflects the terminology employed by whatever languages are en vogue at the time. "
    },
    {
        "ID": "20927",
        "Question": "Just as the title says, what is your favorite whiteboard interview problem, and why has it proven effective for you? Junior, senior, Java, C, Javascript, PHP, SQL, pseudo-code, etc. ",
        "Best answer": "I've found this one extremely illuminating when interviewing candidates and filtering out those with no business being there. It is similar in complexity to Fizz Buzz, but focuses on database skills. Assuming the following basic  table structure Documents (DocID, DocDate) Keywords (KeyWordID, KeyWord) DocumentKeywords (DocID,KeywordID)  Write a query to return the following: Part 1: Documents with a DocDate after 4/1/1995   Part 2: Documents that contain the keyword \"Blue\"   Part 3: Documents that contain the either the keyword \"Blue\" or \"Yellow\" Part 4: Documents that contain the both the keywords \"Blue\" and \"Yellow\"  I let them write it in any SQL variant they want, and am not too picky on minor syntax problems. I mainly want to know that they understand basic relational DB concepts. Most candidates can get through part 3 with no issues at all. You'd be amazed how many think that the answer to part 4 is just to change the operator from OR to AND in the where clause. "
    },
    {
        "ID": "20988",
        "Question": "In Python's tutorial one can read that Python's original implementation is in C;  On the other hand, the Python implementation, written in C, (...)  I'm very curious why was Python written in C and not C++?  I'd like to know the reasoning behind this decision and the answer should be supported by historical references (and not opinion based). ",
        "Best answer": "From everything I've seen, it's a combination of practical and historical reasons. The (mostly) historical reason is that CPython 1.0 was released in 1989. At that time, C was just recently standardized. C++ was almost unknown and decidedly non-portable, because almost nobody had a C++ compiler. Although C++ is much more widespread and easily available today, it would still take a fair amount of work to rewrite CPython into the subset of C that's compatible with C++. By itself, that work would provide little or no real benefit. It's a bit like Joel's blog post about starting over and doing a complete rewrite being the worst mistake a software company can make. I'd counter that by pointing to Microsoft's conversion from the Windows 3.0 core to the Windows NT core, and Apple's conversion from MacOS 9 to Mac OS/X. Neither one killed the company -- but both were definitely large, expensive, long-term projects. Both also point to something that's crucial to success: maintaining both code bases for long enough that (most) users can switch to the new code base at their leisure, based on (at least perceived) benefits. For a development team the size of Python's, however, that kind of change is much more difficult. Even the change from Python 2 to 3 has taken quite a bit of work, and required a similar overlap. At least in that case, however, there are direct benefits to the changes, which rewriting into C++ (by itself) wouldn't (at least immediately) provide. Linus Torvalds's rant against C++ was brought up, so I'll mention that as well. Nothing I've seen from Guido indicates that he has that sort of strong, negative feelings toward C++. About the worst I've seen him say is that teaching C++ is often a disaster -- but he immediately went on to say that this is largely because the teachers didn't/don't know C++.  I also think that while it's possible to convert a lot of C code to C++ with relative ease, that getting much real advantage from C++ requires not only quite a bit more rewriting than that, but also requires substantial re-education of most developers involved. Most well-written C++ is substantially different from well-written C to do the same things. It's not just a matter of changing malloc to new and printf to cout, by any stretch of the imagination. "
    },
    {
        "ID": "21032",
        "Question": "Not specific code writing practices. Please also include reasoning.  My start:  use GCC or Clang  gcc because it is unchallenged in the amount of static checking it can do (both against standards and general errors) clang cause it has such pretty and meaningful error messages  when compiling C code using GCC use -Wall -Wextra -Wwrite-strings -Werror  in 99,99% the warning is a valid error  when compiling C++ code using GCC use -Wall -Wextra -Weffc++ -Werror  you could skip -Weffc++ (cause it can be confusing)  always code against a standard C (C89, C99), C++ (C++98, C++0x)  while compilers change, standards don't, coding against a standard gives at least some level of assurance that the code will also compile in the next version of the compiler or even a different compiler/platform  make sure that the compiler checks your code against standard (-std=c99 -pedantic for C99, -std=ansi -pedantic for C++98 in GCC)  cause automatic checking always good  use valgrind or a similar tool to check for runtime errors (memory, threads, ...)  free bug catching  never duplicate functionality of the standard libraries (if there is a bug in your compiler, make a temporary patch, wrapper, ...)  there is no chance that your code will be better then the code maintained by hundreds of people and tested by tenths of thousands  make sure that you actually fix all bugs that are reported by automatic tools (GCC, valgrind)  the errors might not cause your program to crash now, but they will  never follow recommendations that include \"never use feature X\"  such recommendations are usually outdated, exaggerated or oversimplified   ",
        "Best answer": "Learn C++ from a book Unfortunately, most freely available C++ resources are complete garbage. Use the \"Resource Acquisition Is Initialization\" idiom (RAII) This takes care of 90% of your memory management problems. The other 10% can be taken care of with smart pointers (which themselves depend on RAII). Even though the language is not garbage-collected, I've never had to use a delete statement or some kind of DestroyXXX() or ReleaseXXX() or CloseXXX() function in application code - they're always somewhere deep in library/wrapper code. It's the reason why std::vector allows for dynamic arrays without new or delete and fstream allows for manipulation of files without needing fopen() or fclose() in application code - it's all been taken care of. Compile with aggressive optimization when you test (e.g. GCC's -O3 switch).  This will often uncover bugs arising from subtle things like violation of strict aliasing rules.  By doing so, you become aware of such issues, and your program will work properly in the presence of such optimizations. Test on a PowerPC (or other big-endian machine) from time to time Better yet, test on a 64-bit PowerPC if you can get your hands on one.  Things you can learn by doing so:  When reading a binary file, you have to pack/unpack 16-bit, 32-bit, 64-bit, etc. words a byte at a time, or use some sort of endian-aware byte-swapping mechanism. char is not always signed.  On PowerPC Linux, GCC defaults to unsigned char.  This isn't an endianness issue, but it's a subtlety I picked up on while testing on both x86 and PowerPC. Big endian won't let you get away with long n = ...; printf(\"%d\", n); 64-bit big endian won't let you get away with: curl_easy_setopt(handle, CURLOPT_TIMEOUT, 1);  See if you can spot the bug.  Always pay attention to recommendations that say \"never use feature X\"  Such recommendations are typically based on the experience of lots of skilled people over a significant period of time. If you choose to disregard such recommendations, make sure that you really understand them and the rationale behind them, before you disregard them. If you choose to ignore them out of hand, don't be surprised if people criticize your code.  "
    },
    {
        "ID": "21082",
        "Question": "I just read about cyclesort via a sortvis.org blog post. This is probably the most obscure one I have heard of so far, since it uses maths that I am not familiar with (detecting cycles in permutations of integer sets). What is the most obscure one you know? ",
        "Best answer": "Slowsort works by multiply and surrender (as opposed to divide and conquer). It is interesting because it is provably the least efficient sorting algorithm that can be built (asymptotically, and with the restriction that such an algorithm, while being slow, must still all the time be working towards a result). This offsets it from bogosort because in the best case, bogosort is quite efficient – namely, when the array is already sorted. Slowsort doesn’t “suffer” from such a best-case behaviour. Even in its best case, it still has runtime   for ϵ > 0. Here is its pseudocode, adapted from the German Wikipedia article: function slowsort(A, i, j):   if i >= j: return    m = (i + j) / 2   slowsort(A, i, m)   slowsort(A, m + 1, j)    if A[j] < A[m]:     swap(A[j], A[m])    slowsort(A, i, j - 1)  "
    },
    {
        "ID": "21300",
        "Question": "To my knowledge, all modern imperative programming languages support recursion in the sense that a procedure can call itself. This was not always the case, but I cannot find any hard facts with a quick Google search. So my question is: Which languages did not support recursion right from the start and when was that support added? ",
        "Best answer": "I'm not sure COBOL does (it certainly didn't at one time), but I can't quite imagine anybody caring much either.  Fortran has since Fortran 90, but requires that you use the recursive keyword to tell it that a subroutine is recursive. PL/I was pretty much the same -- recursion was supported, but you had to explicitly tell it what procedures were recursive. I doubt there are many more than that though. When you get down to it, prohibiting recursion was mostly something IBM did in their language designs, for the simple reason that IBM (360/370/3090/...) mainframes don't support a stack in hardware. When most languages came from IBM, they mostly prohibited recursion. Now that they all come from other places, recursion is always allowed (though I should add that a few other machines, notably the original Cray 1, didn't have hardware support for a stack either). "
    },
    {
        "ID": "21336",
        "Question": " Possible Duplicate: How do you organize your projects folders?   I'm interested to learn how everyone keeps their local development projects organized in a logical manner. What do you do to keep your dev projects organized in a manner that allows you to easily find things? ",
        "Best answer": "At any given time, I normally have several different clients, each of whom has one or more projects. I also use a mainline-with-branching development model, which works well with many version control systems like git and Perforce. So on any one of my development machines, above the individual project level, things look like this: Client 1 Directory     Project Foo Directory         Main Branch Directory         All Branches In One Directory (useful for Perforce branching/merging)         Simple Fixes Branch Directory         Big Ongoing Feature 1 Directory         Big Ongoing Feature 2 Directory         (etc.)     Project Bar Directory         (similar branch directories) Client 2 Directory     Project Baz Directory  and so on. I don't typically pull all branches onto any given machine, or pull Mac projects onto a Windows or Linux box. Individual branches usually look something like this: Build Instructions Document/Checklist Top-Level Makefile/Project Source (Directory)    Main Source Files    Component 1 Source Directory    Component 2 Source Directory    (etc.) Include (Directory for headers exposed to the outside world, if suitable) ThirdParty (Libraries, source code, etc. from elsewhere) Unit Tests  Of course, there's a lot of variation. And if I take over a project somebody else started, I usually retain their existing hierarchy. I typically keep documentation and test files either attached to a wiki in my issue tracking system (Redmine), or if they're bigger than Redmine's default 5 MB limit, on an FTP server, so I don't have to keep local copies on all my development machines, but can retrieve them as I need them. "
    },
    {
        "ID": "21339",
        "Question": "I have been using the http:BL to block bad IP's from accessing my site. If a malicious IP (comment spammer) trys to hit the site I just exit the web script which implicitly returns a 200 OK response.  Other responses I could return: 404 - Not found? If I return a 404 maybe the robots will think \"this is a waste of time, lets move on to attack another site\" which would reduce the load on the site (I currently get about 2 spam-hits per second). However  I'm reluctant to return 404's on urls that, under normal circumstances, can be found.  I'm not sure if spam robots can 'waste time'. i.e Why would a bot writer be bothered to code for 404's when they just blitz the web anyway?  401 Unauthorized? Blocking a bad IP is not quite the same as \"resource requires user authentication 1) which has not yet been provided or 2) which has been provided but failed authorization tests\"  In general I feel that 'responding to the bad-bots according to proper http protocol' gives the bad guys the upper hand. In the sense that I play by the rules while they do not. On some days I feel like I should do something clever to divert these bot's away. On other days I just think that I should not take it personally and just ignore them. Accepting it as par for the course of running a web site.  I dunno - what are your thoughts? How do you respond when you know its a bad IP? ",
        "Best answer": "If you want to play by the rules, 403 Forbidden, or 403.6 IP address rejected (IIS specific) would be the correct response. Giving a 200 response (and ignoring the comment) may just increase the load on the server, as the spam bot will presumably continue submitting spam on future occasions, unaware that it is having no effect. A 4XX response at least says \"go away you need to check your facts\" and is likely to diminish future attempts. In the unlikely event you have firewall access, then a block of blacklisted IP addresses at the firewall would minimize server load / make it appear that your server didn't exist to the spammer.  I was going to suggest using a 302 Temporary Redirect to the spammer's own IP address  - but this would probably have no effect as there would be no reason for the bot to follow the redirect. If dealing with manually submitted spam, making the spam only visible by the IP address that submitted it is a good tactic. The spammer goes away happy and contented (and does not vary his approach to work around your defences), and the other users never see the spam.  "
    },
    {
        "ID": "21463",
        "Question": "When doing TDD and writing a unit test, how does one resist the urge to \"cheat\" when writing the first iteration of \"implementation\" code that you're testing? For example: Let's I need to calculate the Factorial of a number.  I start with a unit test (using MSTest) something like: [TestClass] public class CalculateFactorialTests {     [TestMethod]     public void CalculateFactorial_5_input_returns_120()     {         // Arrange         var myMath = new MyMath();         // Act         long output = myMath.CalculateFactorial(5);         // Assert         Assert.AreEqual(120, output);     } }  I run this code, and it fails since the CalculateFactorial method doesn't even exist.  So, I now write the first iteration of the code to implement the method under test, writing the minimum code required to pass the test.   The thing is, I'm continually tempted to write the following: public class MyMath {     public long CalculateFactorial(long input)     {         return 120;     } }  This is, technically, correct in that it really is the minimum code required to make that specific test pass (go green), although it's clearly a \"cheat\" since it really doesn't even attempt to perform the function of calculating a factorial.  Of course, now the refactoring part becomes an exercise in \"writing the correct functionality\" rather than a true refactoring of the implementation.  Obviously, adding additional tests with different parameters will fail and force a refactoring, but you have to start with that one test. So, my question is, how do you get that balance between \"writing the minimum code to pass the test\" whilst still keeping it functional and in the spirit of what you're actually trying to achieve? ",
        "Best answer": "It's perfectly legit.  Red, Green, Refactor. The first test passes.   Add the second test, with a new input.   Now quickly get to green, you could add an if-else, which works fine.  It passes, but you are not done yet. The third part of Red, Green, Refactor is the most important.  Refactor to remove duplication.  You WILL have duplication in your code now.  Two statements returning integers.  And the only way to remove that duplication is to code the function correctly. I'm not saying don't write it correctly the first time.  I'm just saying it's not cheating if you don't. "
    },
    {
        "ID": "21480",
        "Question": "As part of a research I'm working on, I'm looking for public APIs that only work correctly when you apply a certain sequence of actions on them. For example, the java.nio.channels.SocketChannel class, from the Java standard library, only works correctly with sequences such as open() -> connect() -> read() -> read() -> close(). A more complete demonstration if how it may be used may be represented in the following graph:  Additional examples of Java standard library APIs that require certain sequences are java.io.PrintStream (very similar to the one above) and java.util.Iterator (which requires a next() call between every two remove() calls, thus enforcing a certain sequence). So, does you favorite API for doing X also behave that way? I would very much like to know about additional APIs that require a certain method sequence for correct usage; especially classes that are not part of the Java standard library. The more complex the sequence(s) required, the better.  Some APIs require a sequence that spans across multiple classes, for example: X x = new X(); x.setup(); Y y = x.createNewY(); Z z = new Z(y); z.doSomething();  These examples are also interesting, but I'm mostly looking for sequences that all appear in the same class.  EDIT added bounty for greater visibility. I'm sure many of you have encountered many APIs that will match this description - I would really appreciate some good examples. ",
        "Best answer": "From the Spring framework The Lifecycle interface forces the following action sequence: start (isRunning)* stop  which is used in just about all the principal components that make up the framework. Fortunately, this lifecycle is managed by the container. From the Hibernate framework The Lifecycle interface supports the following action sequence: (onDelete, onSave, onUpdate)* onLoad  From the Servlet API My all-time favourite - the lifecycle of a servlet: init service destroy  with service delegating to the doGet, doPost operations etc.  "
    },
    {
        "ID": "21534",
        "Question": "I think every single time I've used Math.Ceiling or its language variant, I've always had to cast it to an integer. I mean... that's the whole point, isn't it? To get a whole number. So why doesn't it just return an int? ",
        "Best answer": "For one, REALs/FLOATs usually have a much greater range. The result might not fit into an INTEGER. "
    },
    {
        "ID": "21730",
        "Question": "How can I move a library inside a project's source tree and compiling static binaries? I want to use a particular tool that utilizes ANCIENT binaries without upgrading it's API usage. This way I can use the old libraries inside the single binary without wrecking the local host environment. I am on nix with netbeans/eclipse/code::blocks.  I don't have a problem reading, just looking for a starting point. Any thoughts? ",
        "Best answer": "You could make a script to compile the lib and modify your project file to use that library's path. for qmake it would be : DEPENDPATH += . oldlib/ INCLUDEPATH += . oldlib/ LIBS += -Wl,-rpath=oldlib-build-path-L. -L../ -Loldlib-build-path -loldlib  Note that the rpath part is strictly for gcc, could be different on different compilers. "
    },
    {
        "ID": "21771",
        "Question": "I've heard the argument that you should use the most generic interface available so that you're not tied to a particular implementation of that interface. Does this logic apply to interfaces like java.util.Collection? I would much rather see something like the following: List<Foo> getFoos()  or Set<Foo> getFoos()  instead of  Collection<Foo> getFoos()  In the last case, I don't know what kind of data set I'm dealing with, whereas in the first two instances I can make some assumptions about ordering and uniqueness. Does java.util.Collection have a usefulness outside of being a logical parent for both sets and lists?  If you came across code that employed Collection when doing a code review, how would you determine whether its usage is justified, and what suggestions would you make for its replacement with a more specific interface? ",
        "Best answer": "Abstractions live longer than implementations In general the more abstract your design the longer it is likely to remain useful. So, since Collection is more abstract that it's sub-interfaces then an API design based on Collection is more likely to remain useful than one based on List. However, the overarching principle is to use the most appropriate abstraction. So if your collection must support ordered elements then mandate a List, if there are to be no duplicates then mandate a Set, and so on. A note on generic interface design Since you're interested in using the Collection interface with generics you may the following helpful. Effective Java by Joshua Bloch recommends the following approach when designing an interface that will rely on generics: Producers Extend, Consumers Super This is also known as the PECS rule. Essentially, if generic collections that produce data are passed to your class the signature should look like this: public void pushAll(Collection<? extends E> producerCollection) {}  Thus the input type can be E or any subclass of E (E is defined as both a super- and sub-class of itself in the Java language). Conversely, a generic collection that is passed in to consume data should have a signature like this: public void popAll(Collection<? super E> consumerCollection) {}  The method will correctly deal with any superclass of E. Overall, using this approach will make your interface less surprising to your users because you'll be able to pass in Collection<Number> and Collection<Integer> and have them treated correctly.  "
    },
    {
        "ID": "21802",
        "Question": "Getters and setters are often criticized as being not proper OO. On the other hand, most OO code I've seen has extensive getters and setters. When are getters and setters justified? Do you try to avoid using them? Are they overused in general? If your favorite language has properties (mine does) then such things are also considered getters and setters for this question. They are the same thing from an OO methodology perspective. They just have nicer syntax. To state the criticism simply: Getters and Setters allow you to manipulate the internal state of objects from outside of the object. This violates encapsulation. Only the object itself should care about its internal state. And an example: Procedural version of code: struct Fridge {     int cheese; }  void go_shopping(Fridge fridge) {      fridge.cheese += 5; }  Mutator version of code: class Fridge {      int cheese;             void set_cheese(int _cheese) { cheese = _cheese; }      int get_cheese() { return cheese; }  }  void go_shopping(Fridge fridge) {      fridge.set_cheese(fridge.get_cheese() + 5);         }  The getters and setters made the code much more complicated without affording proper encapsulation. Because the internal state is accessible to other objects we don't gain a whole lot by adding these getters and setters. ",
        "Best answer": "Having getters and setters does not in itself break encapsulation.  What does break encapsulation is automatically adding a getter and a setter for every data member (every field, in java lingo), without giving it any thought. While this is better than making all data members public, it is only a small step away. The point of encapsulation is not that you should not be able to know or to change the object's state from outside the object, but that you should have a reasonable policy for doing it.   Some data members may be entirely internal to the object, and should have neither getters nor setters. Some data members should be read-only, so they may need getters but not setters.  Some data members may need to be kept consistent with each other. In such a case you would not provide a setter for each one, but a single method for setting them at the same time, so that you can check the values for consistency. Some data members may only need to be changed in a certain way, such as incremented or decremented by a fixed amount. In this case, you would provide an increment() and/or decrement() method, rather than a setter. Yet others may actually need to be read-write, and would have both a getter and a setter.  Consider an example of a class Person.  Let's say a person has a name, a social security number, and an age.  Let's say that we do not allow people to ever change their names or social security numbers.  However, the person's age should be incremented by 1 every year.  In this case, you would provide a constructor that would initialize the name and the SSN to the given values, and which would initialize the age to 0.  You would also provide a method incrementAge(), which would increase the age by 1.  You would also provide getters for all three.  No setters are required in this case. In this design you allow the state of the object to be inspected from outside the class, and you allow it to be changed from outside the class.  However, you do not allow the state to be changed arbitrarily.  There is a policy, which effectively states that the name and the SSN cannot be changed at all, and that the age can be incremented by 1 year at a time.   Now let's say a person also has a salary.  And people can change jobs at will, which means their salary will also change.  To model this situation we have no other way but to provide a setSalary() method!  Allowing the salary to be changed at will is a perfectly reasonable policy in this case.   By the way, in your example, I would give the class Fridge the putCheese() and takeCheese() methods, instead of get_cheese() and set_cheese().  Then you would still have encapsulation.  public class Fridge {   private List objects;   private Date warranty;    /** How the warranty is stored internally is a detail. */   public Fridge( Date warranty ) {     // The Fridge can set its internal warranty, but it is not re-exposed.     setWarranty( warranty );   }    /** Doesn't expose how the fridge knows it is empty. */   public boolean isEmpty() {     return getObjects().isEmpty();   }    /** When the fridge has no more room... */   public boolean isFull() {   }    /** Answers whether the given object will fit. */   public boolean canStore( Object o ) {     boolean result = false;      // Clients may not ask how much room remains in the fridge.     if( o instanceof PhysicalObject ) {       PhysicalObject po = (PhysicalObject)o;        // How the fridge determines its remaining usable volume is a detail.       // How a physical object determines whether it fits within a specified       // volume is also a detail.       result = po.isEnclosedBy( getUsableVolume() );     }       return result;   }    /** Doesn't expose how the fridge knows its warranty has expired. */   public boolean isPastWarranty() {     return getWarranty().before( new Date() );   }    /** Doesn't expose how objects are stored in the fridge. */   public synchronized void store( Object o ) {     validateExpiration( o );      // Can the object fit?     if( canStore( o ) ) {       getObjects().add( o );     }     else {       throw FridgeFullException( o );     }   }    /** Doesn't expose how objects are removed from the fridge. */   public synchronized void remove( Object o ) {     if( !getObjects().contains( o ) ) {       throw new ObjectNotFoundException( o );     }      getObjects().remove( o );      validateExpiration( o );   }    /** Lazily initialized list, an implementation detail. */   private synchronized List getObjects() {     if( this.list == null ) { this.list = new List(); }     return this.list;   }    /** How object expiration is determined is also a detail. */   private void validateExpiration( Object o ) {     // Objects can answer whether they have gone past a given     // expiration date. How each object \"knows\" it has expired     // is a detail. The Fridge might use a scanner and     // items might have embedded RFID chips. It's a detail hidden     // by proper encapsulation.     if( o implements Expires && ((Expires)o).expiresBefore( today ) ) {       throw new ExpiredObjectException( o );     }   }    /** This creates a copy of the warranty for immutability purposes. */   private void setWarranty( Date warranty ) {     assert warranty != null;     this.warranty = new Date( warranty.getTime() )   } }  "
    },
    {
        "ID": "21891",
        "Question": "Dr Bjarne Stroustrup in his book D&E says  Several reviewers asked me to compare C++ to other languages. This I have decided against doing. Thereby, I have reaffirmed a long-standing and strongly held view: \"Language comparisons are rarely meaningful and even less often fair\" . A good comparison of major programming languages requires more effort than most people are willing to spend, experience in a wide range of application areas, a rigid maintenance of a detached and impartial point of view, and a sense of fairness. I do not have the time, and as the designer of C++, my impartiality would never be fully credible.  -- The Design and Evolution of C++(Bjarne Stroustrup)  Do you people agree with his this statement \"Language comparisons are rarely meaningful and even less often fair\"?  Personally I think that comparing a language X with Y makes sense because it gives many more reasons to love/despise X/Y :-P What do you people think? ",
        "Best answer": "I think Stroustrup is entirely correct. Adequately comparing two languages on their technical merits requires enough familiarity with both to write idiomatic code and use the same design patterns normally used by programmers who are very productive in both languages. Someone who doesn't have that level of knowledge of both languages may see things that aren't explicitly provided for by the language that he's not as familiar with, and assume there would be problems as a result.  For example, someone who doesn't use Python on a regular basis may assume that Python users regularly have trouble because of indentation. Or someone not familiar with Common Lisp may look at the lack of polished libraries, but not know that the FFI is powerful enough to write wrappers for C libraries with nominal effort. Someone not familiar with Ruby may see the lack of static typing and assume type errors would be a major problem. Finally, someone not familiar with Haskell may see the lack of assignment, and assume it can't handle state. Now all of this assumes that languages actually are compared only on their technical merits. "
    },
    {
        "ID": "21917",
        "Question": "I am going to interview within two weeks for an internship that would involve Python programming. Can anyone suggest what possible areas should I polish? I am looking for commonly asked stuff in interviews for Python openings. Apart from the fact that I have already been doing the language for over a year now, I fail to perceive what they can ask me.  Like for a C or C++ interview, there are lots of questions ranging from reversing of strings to building linked lists, but for a Python interview, I am clueless. Personal experiences and/ or suggestions are welcomed. ",
        "Best answer": "How about something involving Python list comprehensions? To me, those were one of the big selling points over C++, after I read about them in Dive into Python. \"Write a list comprehension that builds a list of the even numbers from 1 to 10 (inclusive)\". Where the answer is anything like this (note the range values avoid a fencepost error): foo = [x for x in range(1, 11) if (x % 2) == 0] print foo [2, 4, 6, 8, 10]  For that matter, if you understand all the concepts listed in Dive into Python, that should cover most of the important features. "
    },
    {
        "ID": "21943",
        "Question": "We're all familiar with the Java package name convention of turning the domain name around. I.e. www.evilcorp.com would, by convention, chose to have their java packages com.evilcorp.stuff. Increasingly I'm getting fed up with this. As a commercial programmer, I encounter time and again that the software package name is completely irrelevant due to some rebrand, acquisition or similar. In the opensource world there's less name changes so there it makes sense. However it seems to me the shelf life of many pieces of (commercial/internal) software are much longer than that of the organisation making them. The problem is often made worse by software projects taking the marketing department's lead to use the name du jour they use refer to a certain project. A name that will, without fail, change 3 months down the line to make the emperor's new clothes feel fresh and new. Because of this, I've mostly stopped using the reverse domain as package name. Granted, if this is done on a large scale, there's risk of name collisions, but surely this is mitigated by either using \"unique\" software names, avoiding generic words, or use the reverse domain for projects intended to be sold/released as libraries. Other thoughts? ",
        "Best answer": "I'm going to quote the advice Microsoft gives for namespaces (.NET's packages), which doesn't have the domain name convention. I think it's good advice for Java packages too, since I don't believe that a domain name represents a solid and stable identity.  The general format for a namespace name is as follows: <Company>.(<Product>|<Technology>)[.<Feature>][.<Subnamespace>] For example, Microsoft.WindowsMobile.DirectX.  Do prefix namespace names with a company name to prevent namespaces from different companies from having the same name and prefix. Do use a stable, version-independent product name at the second level of a namespace name. Do not use organizational hierarchies as the basis for names in namespace hierarchies, because group names within corporations tend to be short-lived. The namespace name is a long-lived and unchanging identifier. As organizations evolve, changes should not make the namespace name obsolete.  If even your company name is unstable, you might want to just start with the product name. "
    },
    {
        "ID": "21950",
        "Question": "The last week I saw at least three questions where people were confused about the differences between char * and std::string or made some related mistakes. Don't get me wrong, I don't have a problem with this, I just don't get the exact reason for this. Maybe it was just a coincidence. ",
        "Best answer": "Because they're both commonly known as \"strings\" in a language that has no real string type.  It's very understandable that inexperienced coders would be confused by that... "
    },
    {
        "ID": "21977",
        "Question": "Back in the \"good ol' days,\" when we would copy shareware onto floppies for friends, we also used a fair bit of assembly. There was a common practice of \"micro-optimization,\" where you would stare and stare at lines of assembly until you figured out a way to express it in one fewer instruction. There was even a saying, which was mathematically impossible, that \"You can always remove one more instruction.\" Given that changing runtime performance by small constant factors isn't a major issue for (most) programming today, are programmers transferring these micro-optimization efforts elsewhere? In other words, Can a best-practice be taken to an extreme state where it's no longer adding anything of value? And instead is wasting time? For example: Do programmers waste time generalizing private methods that are only called from one place? Is time wasted reducing test case data? Are programmers (still) overly concerned about reducing lines of code? There are two great examples of what I'm looking for below: (1) Spending time finding the right variable names, even renaming everything; and (2) Removing even minor and tenuous code duplication.  Note that this is different from the question \"What do you optimize for?\", because I'm asking what other programmers seem to maximize, with the stigma of these being \"micro\" optimizations, and thus not a productive use of time. ",
        "Best answer": "Code Formatting Don't     get    me   wrong             , code      should be   consistent        &  readable                                ,  but       some   take it         too far.  "
    },
    {
        "ID": "21987",
        "Question": "I know there have been questions like What is your favorite editor/IDE?, but none of them have answered this question: Why spend the money  on IntelliJ when Eclipse is free? I'm personally a big IntelliJ fan, but I haven't really tried Eclipse. I've used IntelliJ for projects that were Java, JSP, HTML/CSS, Javascript, PHP, and Actionscript, and the latest version, 9, has been excellent for all of them. Many coworkers in the past have told me that they believe Eclipse to be \"pretty much the same\" as IntelliJ, but, to counter that point, I've occasionally sat behind a developer using Eclipse who's seemed  comparably inefficient (to accomplish roughly the same task), and I haven't experienced this with IntelliJ. They may be on par feature-by-feature but features can be ruined by a poor user experience, and I wonder if it's possible that IntelliJ is easier to pick up and discover time-saving features. For users who are already familiar with Eclipse, on top of the real cost of IntelliJ, there is also the cost of time spent learning the new app. Eclipse gets a lot of users who simply don't want to spend $250 on an IDE. If IntelliJ really could help my team be more productive, how could I sell it to them? For those users who've tried both, I'd be very interested in specific pros or cons either way. ",
        "Best answer": "I work with Intellij (9.0.4 Ultimate) and Eclipse (Helios) every day and Intellij beats Eclipse every time.  How? Because Intellij indexes the world and everything just works intuitively. I can navigate around my code base much, much faster in Intellij. F3 (type definition) works on everything - Java, JavaScript, XML, XSD, Android, Spring contexts. Refactoring works everywhere and is totally reliable (I've had issues with Eclipse messing up my source in strange ways). CTRL+G (where used) works everywhere. CTRL+T (implementations) keeps track of the most common instances that I use and shows them first.  Code completion and renaming suggestions are so clever that it's only when you go back to Eclipse that you realise how much it was doing for you. For example, consider reading a resource from the classpath by typing getResourceAsStream(\"/ at this point Intellij will be showing you a list of possible files that are currently available on the classpath and you can quickly drill down to the one you want. Eclipse - nope. The (out of the box) Spring plugin for Intellij is vastly superior to SpringIDE mainly due to their code inspections. If I've missed out classes or spelled something wrong then I'm getting a red block in the corner and red ink just where the problem lies. Eclipse - a bit, sort of. Overall, Intellij builds up a lot of knowledge about your application and then uses that knowledge to help you write better code, faster. Don't get me wrong, I love Eclipse to bits. For the price, there is no substitute and I recommend it to my clients in the absence of Intellij. But once I'd trialled Intellij, it paid for itself within a week so I bought it, and each of the major upgrades since. I've never looked back. "
    },
    {
        "ID": "22070",
        "Question": "Similar question was closed on SO. Sometimes when we're programming, we find that some particular control structure would be very useful to us, but is not directly available in our programming language. What alternative control structures do you think are a useful way of organizing computation? The goal here is to get new ways of thinking about structuring code, in order to improve chunking and reasoning. You can create a wishful syntax/semantic not available now or cite a less known control structure on an existent programming language. Answers should give ideas for a new programming language or enhancing an actual language. Think of this as brainstorming, so post something you think is a crazy idea but it can be viable in some scenario. It's about imperative programming. ",
        "Best answer": "OK, this is a fun question. I would also like to have a general else for while and for loops, for when the condition isn't true on the first test: while (condition) {     // process } else {     // condition was never true }  This avoids the awkward re-computation of the condition or storing it in a variable. "
    },
    {
        "ID": "22525",
        "Question": "For years I have considered digging into what I consider \"low level\" languages. For me this means C and assembly. However I had no time for this yet, nor has it EVER been neccessary. Now because I don't see any neccessity arising, I feel like I should either just schedule some point in time when I will study the subject or drop the plan forever. My Position For the past 4 years I have focused on \"web technologies\", which may change, and I am an application developer, which is unlikely to change. In application development, I think usability is the most important thing. You write applications to be \"consumed\" by users. The more usable those applications are, the more value you have produced. In order to achieve good usability, I believe the following things are viable  Good design: Well-thought-out features accessible through a well-thought-out user interface. Correctness: The best design isn't worth anything, if not implemented correctly. Flexibility: An application A should constantly evolve, so that its users need not switch to a different application B, that has new features, that A could implement. Applications addressing the same problem should not differ in features but in philosophy. Performance: Performance contributes to a good user experience. An application is ideally always responsive and performs its tasks reasonably fast (based on their frequency). The value of performance optimization beyond the point where it is noticeable by the user is questionable.  I think low level programming is not going to help me with that, except for performance. But writing a whole app in a low level language for the sake of performance is premature optimization to me. My Question What could low level programming teach me, what other languages wouldn't teach me? Am I missing something, or is it just a skill, that is of very little use for application development? Please understand, that I am not questioning the value of C and assembly. It's just that in my everyday life, I am quite happy that all the intricacies of that world are abstracted away and managed for me (mostly by layers written in C/C++ and assembly themselves). I just don't see any concepts, that could be new to me, only details I would have to stuff my head with. So what's in it for me? My Conclusion Thanks to everyone for their answers. I must say, nobody really surprised me, but at least now I am quite sure I will drop this area of interest until any need for it arises. To my understanding, writing assembly these days for processors as they are in use in today's CPUs is not only unneccesarily complicated, but risks to result in poorer runtime performance than a C counterpart. Optimizing by hand is nearly impossible due to OOE, while you do not get all kinds of optimizations a compiler can do automatically. Also, the code is either portable, because it uses a small subset of available commands, or it is optimized, but then it probably works on one architecture only. Writing C is not nearly as neccessary anymore, as it was in the past. If I were to write an application in C, I would just as much use tested and established libraries and frameworks, that would spare me implementing string copy routines, sorting algorithms and other kind of stuff serving as exercise at university. My own code would execute faster at the cost of type safety. I am neither keen on reeinventing the wheel in the course of normal app development, nor trying to debug by looking at core dumps :D I am currently experimenting with languages and interpreters, so if there is anything I would like to publish, I suppose I'd port a working concept to C, although C++ might just as well do the trick. Again, thanks to everyone for your answers and your insight. ",
        "Best answer": "I was just thinking this recently. I'd currently consider myself as a C# developer - which is perfectly fine for my career. However, every so often I miss out on the really low level things (essentially 'getting my hands dirty' by doing assembler or device drivers in C). I just miss the programming. I don't expect that to help me in my career massively. If device drivers or embedded systems are your thing, then it could help a lot. The more I program in the abstracted languages, the more I miss what got me into computers in the first place: poking around the computer and seeing what twitches. Assembler and C are very much suited for poking :) By using the older languages, I think you're forced to do pretty much everything yourself. In C# I can do something like myArray.SortBy(x=>x.Name). No way I'd be able to do that in C. I'm accepting that the language will do the best sorting for me. If I was to do it in C, I'd be able to go back to the days of my university modules and revise my different sort and search algorithms. So, I think the lower level languages would help you to revise any of the long forgotten bits that have all being abstracted away. More of a personal challenge than a career progressing one. "
    },
    {
        "ID": "22528",
        "Question": "Sometimes I come across these message-hub-style APIs, for example the Cocoa NSNotificationCenter: http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class/Reference/Reference.html Usually these APIs provide a global access point on which you subscribe to or broadcast messages/events. I'm thinking this is a problem because it encourages a flat and unstructured program architecture, where dependencies are not explicit in the API, but hidden in the source code. You are not forced to think about object ownership and hierarchies, but can rather make any object in your program result in any code anywhere being called. But maybe this is a good thing? Does this pattern generally encourage good or bad program design, and why so? Does it make the code harder or easier to test? Forgive me if this question is too vague or broad. I'm trying to wrap my head around the potential consequences of extensive use of an API like this, and the different ways you could use it. Edit: I guess my biggest issue with this pattern is that the API \"lies\" about dependencies and object couplings, and can be illustrated with this example: myObj = new Foo(); myOtherObj = new Bar(); print myOtherObj.someValue; // prints 0 myObj.doSomething(); print myOtherObj.someValue; // prints 1, unexpectedly, because I never indicated that these objects had anything to do with each other  ",
        "Best answer": "Asynchronous messaging is a good architectural principal for large systems that must scale The Java equivalent of this is JMS and generally considered to be a good thing. This is because it promotes decoupling of your client code from the code that actually services the message. Client code merely has to know where to post their message. Service code merely has to know where to pick up messages. Client and service know nothing of each other and therefore can change independently of each other as required.  You can easily externalise the URI of the message hub to make it configurable and not embedded in the source code.  "
    },
    {
        "ID": "22583",
        "Question": "I'm talking about something like this:  echo $form->input('general_addresss', array(             'label' => 'Where will you go today?'             'format' => array('before', 'input', 'after', 'label', 'after', 'error')             ));  Do you start with one array parameter, then break a line? If it can't fit on a line, do you immediately break a line?  After of which, do you do a set number of tabs over? What happens if an array within an array has lots of properties?  Is there any particular guide you follow?  ",
        "Best answer": "I do it like this: echo $form->input     (         'general_addresss',         array         (             'label' => 'Where will you go today?'             'format' => array             (                 'before',                 'input',                 'after',                 'label',                 'after',                 'error'             )         )     );  It may seem like a massive overkill of whitespace, but I find it quite readable and obvious - none of my brackets are hidden and everything is nicely indented visually. YMMV ;) Edit: Regarding the \"particular guide\", my particular guide are my eyes. If I can't quickly see where I left my keys in the source code, it's probably badly formatted. p.s. You must be coming from CakePHP :) "
    },
    {
        "ID": "22598",
        "Question": "Preface This is not code golf. I'm looking at an interesting problem and hoping to solicit comments and suggestions from my peers. This question is not about card counting (exclusively), rather, it is about determining the best table to engage based on observation. Assume if you will some kind of brain implant that makes worst case time / space complexity (on any given architecture) portable to the human mind. Yes, this is quite subjective. Assume a French deck without the use of wild cards. Background I recently visited a casino and saw more bystanders than players per table, and wondered what selection process turned bystanders into betting players, given that most bystanders had funds to play (chips in hand). Scenario You enter a casino. You see n tables playing a variant of Blackjack, with y of them playing Pontoon. Each table plays with an indeterminate amount of card decks, in an effort to obfuscate the house advantage. Each table has a varying minimum bet. You have Z currency on your person. You want to find the table where:  The least amount of card decks are in use The minimum bet is higher than a table using more decks, but you want to maximize the amount of games you can play with Z. Net losses, per player are lowest (I realize that this is, in most answers, considered to be  incidental noise, but it could illustrate a broken shuffler)  Problem You can magically observe every table. You have X rounds to sample, in order to base your decision. For this purpose, every player takes no more than 30 seconds to play. What algorithm(s) would you use to solve this problem, and what is their worst case complexity? Do you:  Play Pontoon or Blackjack ? What table do you select ? How many rounds do you need to observe (what is the value of X), given that the casino can use no more than 8 decks of cards for either game? Each table has between 2 and 6 players. How long did you stand around while finding a table?  I'm calling this the \"standing gambler problem\" for lack of a better term. Please feel free to refine it. Additional Where would this be useful if not in a casino? Final I'm not looking for a magic gambling bullet. I just noticed a problem which became a bone that my brain simply won't stop chewing. I'm especially interested in applications way beyond visiting a casino. ",
        "Best answer": "If I can concurrently examine all tables even while playing then: Given that all games progress at the same speed for simplicity...(i could adjust for this)    while(not satisfied with winnings)  keepcurrenttable == 1 || Wait for positive count threshold on any one table     if Z/(min bet)>%chance of win*payout       next     else       Play hand according to standard counting rules.     endif if (%chance of win on another table*payout on another table > same for current) && Z/(min bet)>%chance of win*payout   change tables    elseif currenttable %chance of win*payout >   keepcurrenttable=1  else   keepcurrenttable=0  endif next   still some bugs in there and doesn't account for EVERYTHING, but you get where I'm going   there's a lot more to %chance of win   number of players should be minimally pertinent(more players == faster burning through decks)   does less players mean I can play more hands concurrently?(that would require heavier weight on player count)   additionally, count threshold could be defined with a risk appetite meter. "
    },
    {
        "ID": "22642",
        "Question": "I have seen several times on this site posts that decry Java's implementation of generics. Now, I can honestly say that I have not had any issues with using them. However, I have not attempted to make a generic class myself. So, what are your issues with Java's generic support? ",
        "Best answer": "Java's generic implementation uses type erasure. This means that your strongly typed generic collections are actually of type Object at runtime. This has some performance considerations as it means primitive types must be boxed when added to a generic collection. Of course the benefits of compile time type correctness outweigh the general silliness of type erasure and obsessive focus on backwards compatibility. "
    },
    {
        "ID": "22643",
        "Question": "It's not that this doesn't make sense, but it just works out awkward 99% of the time. Often in 2D graphics rectangles are initialized, stored and manipulated as a pair of points.  In no particular language, class Rect:    p1, p2: point  It makes more sense to define a rectangle as two x values and two y values, like this: class Rect    xleft, xright: int    ytop, ybottom: int  With two points, if at some place in the source code you want to make use of the y value of the top, you'd have to say rect.p1.y  (hmmm, stop and think, is it p1 or p2) but with the four values as plain data members, it's clear and direct:  rect.ytop (no thinking required!)     The use of two points means that in dealing with the vertical, you have to tangle the horizontal; there's an extraneous relation between indepenent elements. How did this two-point idea come about and why does it persists?  Does it have some benefit over bare x and y coordinates? ADDED NOTE: This question is in the context of X-Y aligned rectangles, such as in windows managers and GUI toolkits, not in the context of arbitrary shapes in drawing and painting app. ",
        "Best answer": "I always liked defining a rectangle as a point + width and height, where the point is the upper-left corner of the rectangle. class Rect {   float x, y;   float width, height; }  And then add whatever methods you need to fetch the other metrics. Like the Java version "
    },
    {
        "ID": "22819",
        "Question": "Suppose I have some code void some_block(void) {     some_statement_1();     some_statement_2();     some_statement_3(); }  Now I wish to out-comment statement #2, but here I never can find a way where it feels right. Usually I will do the following: void some_block(void) {     some_statement_1(); //    some_statement_2();     some_statement_3(); }  But now we got what looks like extra indentation of statement #2, yet it is arguable whether the indentation is still \"correct\". Alternatively we could do: void some_block(void) {     some_statement_1();     //some_statement_2();     some_statement_3(); }  This looks a bit better, yet still somehow also wrong. However the following just looks misplaced: void some_block(void) {     some_statement_1();   //some_statement_2();     some_statement_3(); }  How do you outcomment code and keep \"correct\" indentation? Update It seems most people who have provided answers did not answer my question, but simply state that it is bad practice to leave dead code around. While I completely agree with that, that was not the point of the question. Right now I am facing a case of example where I have 5 helper functions, that manage 5 similar but slightly different structs for me. I use these helper functions to make my code easier to read. But, at the moment (and for the next month probably) one of the structs are not going to be used. And I cannot commit anything which causes compiler warnings, so I have to outcomment that part of the code and commit it like that. Also I forgot this last variant, which I think just looks plain wrong: void some_block(void) {     some_statement_1(); //  some_statement_2();     some_statement_3(); }  ",
        "Best answer": "Format it so it sticks out and makes your code look so ugly that you'll be compelled to delete it. Comments are for comments and not for dealing with unnecessary code; that's the job of version control.  "
    },
    {
        "ID": "22993",
        "Question": "Next semester (starts in just under 5 weeks), I'm taking System Programming and OOD concurrently.  Apparently SP centers on working in C on Linux, and I only have Java and Python experience, so I am a little nervous about this. For those of you who've taken these at an university, what should I look out for?  I've already taken Computer Organization which included an overview of Assembly.  With the exception of implementing loops in assembly, I ranged from B+ to A- in the assembly projects.  Building circuitry was another story, however. ",
        "Best answer": "Well, exactly what you're going to need wil depend on the class, though some generalities will likely hold. I'd suggest getting a C book intended for Java programmers. It's likely to point out the major pitfalls and help you transition. The biggest items that you're going to worry in C that you don't really worry about in Java are pointers and memory management. Java references are technically pointers, but they're seriously dumbed-down pointers, and from what I've seen, Java programmers don't really see them as the pointers that they are and often have some trouble dealing with pointers initially. Going hand in hand with that is the fact that you won't have a garbage collector, so anything that gets allocated on the heap will not only have to be manually allocated, but you'll have to manually de-allocate it when you're done with it. So, you're going to have to become familiar with malloc and free. You also aren't going to have classes, and structs in C can't have functions in them, so you don't generally program in C in an object-oriented manner. That may or may not be a big deal for you. It does mean, however, that what you'll be learning in your systems programming course and your object-oriented design course are likely to be very different. OOD should be more of an extension of what you know, teaching you how to better program in an object-oriented manner. Systems programming, on the other hand is much more about getting down and dirty and will be much more low-level in what it deals with. Both are really important to being a good programmer though. Without knowing your exact skill set and experiences and without knowing the exact courses, giving more detailed advice would be difficult, but primarily, the issue is likely to be in dealing with how C doesn't doesn't manage things for you and doesn't try and keep you safe from yourself. You will have to be more careful programming in C than you would be in Java or Python. There's plenty of stuff that's perfectly legal C which would be illegal many other languages and could surprise you. The main things to be concerned about though are pointers and manual memory management. "
    },
    {
        "ID": "23098",
        "Question": "I'm creating a RESTfull service for a tree-like resource structure and was wondering what the best URL structure would be? I have three requirements:  be able to get a collection of root resources  be able to get an individual resource  be able to get a collection of child resources  My current thought is: /rest/documents /rest/documents/{id} /rest/documents/{id}/documents  I was also thinking of going the singular / plural routes to denote lists or individual elements, but I know I'm going to have a resource that is the same plural as it is singular, so decided against this. Does anybody have any thoughts on the above? or have a different / better way of structuring this? ",
        "Best answer": "Something like this perhaps: /rest/{rootEntity}/Item/{leafEntity}/{id} /rest/{entity}/ItemList /rest/{entity}/ItemList/{leafEntity}  where {rootEntity} is the starting point of your collection, {leafEntity} is any named leaf node within your tree. You could append a few parameters any of the above to select, say, Latest or All or something. "
    },
    {
        "ID": "23182",
        "Question": "What are the common bugs introduced by refactoring, carelessness, and newbies? I would like to request the experienced programmers here to share their experience and list the bugs they used to introduce when they were inexperienced. In your response, please write a headline mentioning the kind of bug in bold text, followed by few linebreaks, and then an explanation, cause of the bug, and finally the fix. ",
        "Best answer": "Manually written values instead of constants Example: public District GetDefaultDistrict() {   return GetById(1); }  public IList<Revenue> GetRevenues() {   return GetByCodes(new [] { 8010, 8011, 8096 }); }  and thousands of use of 1, 8010, 8011 and 8096 in other places. Try to image if the default district now is 2 and 8011 moved to 8012. Fix: public District GetDefaultDistrict() {   return GetById(Consts.DEFAULT_DISTRICT_ID); }  public IList<Revenue> GetRevenues() {   return GetByCodes(Consts.REVENUE_CODES); }  and use this constants everywhere where you need to determine default district id and/or other static values. Or even: public IList<Revenue> GetRevenues() {   var codes = GetRevenueCodes(); // get from db   return GetByCodes(codes); }  to get actual values from db. But this is just an example. "
    },
    {
        "ID": "23240",
        "Question": "I can't find this now but I've read it before on various blogs discussing the topic. I'll give an example and hopefully it's clear (albeit it may not clarify anything at all). Given this piece of markup (arbitrary on purpose): <div class=\"myWrapper\">   <a href=\"somepage.url\" class=\"img\">     <img url=\"someimage.url\">   </a> </div> <div class=\"yourWrapper\">   <a href=\"somepage.url\" class=\"img\">     <img url=\"someimage.url\">   </a> </div>  While the CSS could read like this: .myWrapper .img img {border: thin black solid;} .myWrapper .img {margin:10px;} .yourWrapper .img img {border: thick red dashed;} .yourWrapper .img {margin:20px;}  It could also be written like this: .myWrapper {   .img {      margin:10px;     img {         border: thin black solid;     }   } } .yourWrapper {   .img {      margin:10px;     img {         border: thick red dashed;     }   } }  But I can't remember seeing where that was discussed or if it's something in the works. Anybody know what the hell I'm talking about? And I don't think this is an SO question or I would've put it on SO. ",
        "Best answer": "LESS CSS  dynamic stylesheet language designed by Alexis Sellier. It is influenced by Sass and has influenced the newer \"SCSS\" syntax of Sass, which adapted its CSS-like block formatting syntax. LESS is open-source. Its first version was written in Ruby, however in the later versions, use of Ruby has been deprecated and replaced by JavaScript. The indented syntax of LESS is a nested metalanguage, as valid CSS is valid LESS code with the same semantics. LESS provides the following mechanisms: variables, nesting, mixins, operators and functions; the main difference between LESS and other CSS precompilers being that LESS allows real-time compilation via LESS.js by the browser.] LESS can run on the client-side and server-side, or can be compiled into plain CSS...  LESS uses those nested styles. #header {   color: red;   a {     font-weight: bold;     text-decoration: none;   } }  "
    },
    {
        "ID": "23364",
        "Question": "To me it seems these are two different platforms that address similar enterprise(but not only) problems. I'm interested however in problems that Java can solve better than C#/.NET or C#/.NET can solve better than Java. Leaving aside the 'cost' factor, since that is somehow not an issue for big enterprise companies (the developers probably cost more than the licenses from Microsoft - it's just a thought) and even for small projects there are free/open-source tools for .NET so the cost can be zero for the .NET world as well. With Mono, you can port .NET to Linux and MacOS as well so the benefit that Java had(cross platform) isn't THE decision factor to use Java nowadays.. What real world problems can you think of where .NET would be a much better solution than Java, and vice-versa? I'm only interested in solutions to problems. ",
        "Best answer": "There are some language features in C# (4/5) such as LINQ, using predicate and some functional aspects that many would argue place it ahead of Java 6 in terms of productivity/flexibility (YMMV on that).  Others would argue that C# is becoming a big cesspit of every brand new idea that happens to be popular and it's getting harder to wield effectively (YMMV on that). Some will also argue that the Java eco-system is far more flexible and that the JVM is probably the most capable and flexible runtime around (if you look at the various languages that run on the JVM adn their interoperability with Java).  Again YMMV. What it really boils down to is the quality of the developer(s) who are designing and writing the code.  .NET and the Java eco-system are so close in capabilities that its usually the developer that makes a difference. From a systems integration flexibility aspect, yes Java still has an edge there.  Cross platform is still an issue - many enterprises will see using Mono as risky (again YMMV here) and there are some systems that Mono won't run on that have JVMs (Some older big IBM machines for example).  Java has also been around a bit longer and has that established 'trust' in enterprises, it's not easy for .NET to gain that trust at say a mega-bank. Meh - I conclude with no real conclusion, which I think mirrors the fact that Java and .NET are neck and neck these days. "
    },
    {
        "ID": "23404",
        "Question": "I completed this website 4 months ago. (I would like to keep the website anonymous - if this post comes up on google search by customers, it will have a negative impact on their business). We did several iterations, the client was very demanding (and nosy), I complied with every single thing that was wanted, including the font-size of the footer which destroyed the aesthetic looks by quite a bit; (and they messed with the colours too, making it look dangerously childish and unprofessional).  Anyway, the client was very friendly during the whole process. After getting all the requirements I accepted to build the website for £950 and I charged him £150 in advance so he wouldn't want to bail out after I started the work. The requirements kept changing quite a lot, I made adjustments as and completed the website just 5 days late, w.r.t. the agreed date, in-spite all the changes in requirements. That was four months ago. They have never returned my calls nor replied to my emails since then. How do I get the money back from them? I really need some advice on this, this is the second time someone has not paid me. Points to be noted:  We did not sign any contract - the client was a friend of a friend.   I still hold the passwords for ftp, cpanel and everything. I don't want to bring the site down; somehow it doesn't seem ethical to me.    I posted this on Stack Overflow and it was closed, I was redirected here.  EDIT Thank you everyone, for your enormous support. I thought I should include some more details: The client is hosting the site; as in, I made them register and use their own debit card to buy the domain name, webspace and everything, I just have the passwords for his cpanel, and ftp (well, I have access to cpanel that pretty much gives me access to many things).  Now, if I give them a warning, he might change the password to cpanel, but I am fairly sure they doesn't know about ftp's. UPDATE I followed Anna Lear's advice and sent the final invoice, on Saturday, with a warning that I will take the site down if he doesn't respond to my email before this Tuesday. They havn't replied to my emails yet, but I will let you know how this goes. Thanks much for your support. I plan to put up a holding page as Darknight suggested after Tuesday. Points I don't have a server space of my own, however I have few web spaces of my clients but I don't want to use them for this kind of purpose. RESULTS After my follow up of final invoice and warning, the client refused to anything. workman's advice seemed to be the most sensible to me. I mirrored the site to my own webspace, logged into his CPanel and forwarded the website to my site. Once that was done, I put up a holding page on my site so anyone going to the website would see a holdup page (nothing fishy, just an Under Construction page). Of course, this was all very weak in the sense that if my client knew about CPanel he could just remove the redirection. But, I had this second chance to get back to him and I was relying on him not knowing anything.   Two hours later, I got a call from the said client, (and  acting as if they did not get any of my voice mails or emails) and asked me to get the site back up. I, of-course, said I had to be paid and two days after that I received a bank transfer. The site's back up and running now.  Just wanted to say thank you all very much, I was very desperate when I had started this question. You are the best, not only you told me to learn the lesson (which I did) you also gave me a very very good solution that seemed to be very ethical (almost) to me.    A BIG thank you to workman!    If I could choose more than once answer, I would have chosen Anna Lear  too, but since I followed workman's advice I had to pick that up. People who made a point about not taking the site down without consulting a lawyer, thanks a lot.  ",
        "Best answer": "Take it down 1 It's your work and it's unpaid. What happens if you take a car off the lot and fail to pay? They take it back. Better do it now while you can then regret it later. Why would it not be ethical to take back something that is yours?  Hopefully a down site will motivate them to pay you. Otherwise you are in a bit of a bind. No matter who you work for get a contract or something in writing. Friends, family, the only exclusion would be your mother because honestly you probably won't be charging her anyways.  I'm opposed to warning him only because that will prompt him to remove your access, and prevent you from taking any action. What good is the warning if you can't follow through?   1: Please be aware of the possible legal consequences that may present themselves in following this course of action. This information is provided \"as-is\". The author cannot not be held liable for the results of following any part of the above stated recommendation. By reading this you are affixing an assumed electronic signature that you agree to all terms, as stated, without reservation. If any part of this agreement is found unlawful, I don't really care. Just adding fine print for fine prints sake.  "
    },
    {
        "ID": "23472",
        "Question": "What do you when you're working with someone who tends to write stylistically bad code? The code I'm talking about is usually technically correct, reasonably structured, and may even be algorithmically elegant, but it just looks ugly. We've got:  Mixture of different naming conventions and titles (underscore_style and camelCase and UpperCamel and CAPS all applied more or less at random to different variables in the same function) Bizarre and inconsistent spacing, e.g. Functioncall  (arg1 ,arg2,arg3 ); Lots of misspelled words in comments and variable names  We have a good code review system where I work, so we do get to look over and fix the worst stuff. However, it feels really petty to send a code review that consists of 50 lines of \"Add a space here. Spell 'itarator' correctly. Change this capitalization. etc.\" How would you encourage this person to be more careful and consistent with these kinds of details? ",
        "Best answer": "I think you just have to keep doing what you are doing.  Have a clear set of coding guidelines, and enforce them during code reviews.  If a developer gets 50 or 100 lines of \"Add a space here\" and \"Spell 'iterator' correctly\" every time he tries to check something in, and he is actually not allowed to check in before all of those get fixed, eventually he'll have to start writing cleaner code just to avoid the hassle. I think if you fix these things yourself, like NimChimpsky suggested, you will be cleaning up after this person forever. "
    },
    {
        "ID": "23852",
        "Question": "I've seen others use Bitwise-OR to combine flags before: #define RUN 0x01 #define JUMP 0x02 #define SHOOT 0x04  const byte madPerson = RUN | JUMP | SHOOT;  That's also the way I do it. But I've also seen some (not as many) combine flags using addition: #define RUN 0x01 #define JUMP 0x02 #define SHOOT 0x04  const byte madPerson = RUN + JUMP + SHOOT;  Which one is more \"readable\"? (Which one do you think more people will recognize?) What is the \"standard\" way to do it? Which one do you prefer? ",
        "Best answer": "Bitwise-OR. Addition is dangerous. Consider an example where a bandit is a person, and an angry bandit is a bandit that speaks and shoots. Later, you decide all bandits should shoot, but you've forgotten about the angry bandit definition and don't remove its shooting flag. #define PERSON 1 << 0 #define SPEAKS 1 << 1 #define SHOOTS 1 << 2 #define INVINCIBLE 1 << 3 const byte bandit = PERSON | SHOOTS;                    // 00000101 const byte angryBandit_add = bandit + SPEAKS + SHOOTS;  // 00001011 error const byte angryBandit_or = bandit | SPEAKS | SHOOTS;   // 00000111 ok  If you used angryBandit_add your game would now have the perplexing logic error of having angry bandits that can't shoot or be killed. If you used angryBandit_or the worst you'd have is a redundant | SHOOTS. For similar reasons, bitwise NOT is safer than subtraction for removing flags. "
    },
    {
        "ID": "24077",
        "Question": "Are short identifiers bad? How does identifier length correlate with code comprehension? What other factors (besides code comprehension) might be of consideration when it comes to naming identifiers? Just to try to keep the quality of the answers up, please note that there is some research on the subject already! Edit Curious that everyone either doesn't think length is relevant or tend to prefer larger identifiers, when both links I provided indicate large identifiers are harmful! Broken Link The link below pointed to a research on the subject, but it's now broken, I don't seem to have a copy of the paper with me, and I don't recall what it was. I'm leaving it here in case someone else figure it out.  http://evergreen.loyola.edu/chm/www/Papers/SCP2009.pdf  ",
        "Best answer": "The best \"rule\" I've heard is that name lengths should be proportional to the length of the scope of the variable. So an index i is fine if the body of the loop is a few lines long, but I like to use something a little more descriptive if it gets to be longer than 15ish lines. "
    },
    {
        "ID": "24079",
        "Question": "What apsects of Java are the most diificult to learn when coming from such a background?  What common mistakes do people make ? What are the top timesaving and produtivtity increasing tricks ? If you had a room of C/PHP coders who were about to start development using Java what advise would you give ? This is my list of topics so far (in no particular order):  Use jodatime instead of the standard library , and also less importantly the guava library. Arrays are zero indexed I'd also highlight the pass-by-value/reference aspects of Java, and the fact that  String s1 = new String(\"test\");  String s2 = new String(\"test\");  if(s1 == s2) // will be false  if(s1.equals(s2)) // will be true   Introduce the concept of design patterns and give a quick overview. Introduce Spring (it will be used) and the concept of dependency injection  Is there anything obvious I am missing. ",
        "Best answer": "The automatic garbage collecting doesn't mean that you should give up memory usage optimization. "
    },
    {
        "ID": "24190",
        "Question": "This might be a stupid question, but it's been in the back of my head for a while and I can't find a decent answer anywhere else. I have a teacher who says we should explicitly list each parameter with a description, even if there's only one.  This leads to a lot of repetition: double MyFunction(const int MyParam); // Function: MyFunction // Summary: Does stuff with MyParam. // Input: int MyParam - The number to do stuff with. // Output: MyParam with stuff done to it.  When writing in-code documentation, how detailed are you? ",
        "Best answer": "For starters, I agree that the \"Function:\" line in your example is completely redundant. It's also been my experience that people taught in school to add that type of comment continue adding that type of comment in their production code.  Good comments don't repeat what's in the code. They answer the question \"Why?\" instead of \"What?\" or \"How?\" They cover expectations about the inputs, as well as how the code will behave under certain conditions. They cover why algorithm X was chosen instead of algorithm Y. In short, exactly the things that wouldn't be obvious to someone else1 from reading the code.   1: Someone else who is familiar with the language the code is written in. Don't write comments to teach, comment to supplement information.  "
    },
    {
        "ID": "24310",
        "Question": "Consider a drop down \"Duration\" which has 3 options  1. 30 days 2. 60 days 3. 90 days  and by default 30 days will be the selected value. Does it make sense to make this dropdown mandatory? Do we really need to put a * (Mandatory mark) for this field? ",
        "Best answer": "No it does not make sense. The only context in which it could be argued to make sense is if there was a blank selection present. But having a blank selection be available for a required field with a default value doesn't make any sense.  If there were no default value, then one would want a blank field and required status. As it stands, I think that that would only add confusion. "
    },
    {
        "ID": "24378",
        "Question": "PHP, as most of us know, has weak typing.  For those who don't, PHP.net says:   PHP does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used.    Love it or hate it, PHP re-casts variables on-the-fly.  So, the following code is valid: $var = \"10\"; $value = 10 + $var; var_dump($value); // int(20)  PHP also allows you to explicitly cast a variable, like so: $var = \"10\"; $value = 10 + $var; $value = (string)$value; var_dump($value); // string(2) \"20\"  That's all cool...  but, for the life of me, I cannot conceive of a practical reason for doing this. I don't have a problem with strong typing in languages that support it, like Java.  That's fine, and I completely understand it.  Also, I'm aware of - and fully understand the usefulness of - type hinting in function parameters. The problem I have with type casting is explained by the above quote.  If PHP can swap types at-will, it can do so even after you force cast a type; and it can do so on-the-fly when you need a certain type in an operation.  That makes the following valid: $var = \"10\"; $value = (int)$var; $value = $value . ' TaDa!'; var_dump($value); // string(8) \"10 TaDa!\"  So what's the point?  Take this theoretical example of a world where user-defined type casting makes sense in PHP:  You force cast variable $foo as int → (int)$foo. You attempt to store a string value in the variable $foo. PHP throws an exception!! ← That would make sense.  Suddenly the reason for user defined type casting exists!  The fact that PHP will switch things around as needed makes the point of user defined type casting vague.  For example, the following two code samples are equivalent: // example 1 $foo = 0; $foo = (string)$foo; $foo = '# of Reasons for the programmer to type cast $foo as a string: ' . $foo;  // example 2 $foo = 0; $foo = (int)$foo; $foo = '# of Reasons for the programmer to type cast $foo as a string: ' . $foo;   A year after originally asking this question, guess who found himself using typecasting in a practical environment?  Yours Truly. The requirement was to display money values on a website for a restaurant menu.  The design of the site required that trailing zeros be trimmed, so that the display looked something like the following: Menu Item 1 .............. $ 4 Menu Item 2 .............. $ 7.5 Menu Item 3 .............. $ 3  The best way I found to do that wast to cast the variable as a float: $price = '7.50'; // a string from the database layer. echo 'Menu Item 2 .............. $ ' . (float)$price;  PHP trims the float's trailing zeros, and then recasts the float as a string for concatenation. ",
        "Best answer": "In a weakly-typed language, type-casting exists to remove ambiguity in typed operations, when otherwise the compiler/interpreter would use order or other rules to make an assumption of which operation to use. Normally I would say PHP follows this pattern, but of the cases I've checked, PHP has behaved counter-intuitively in each. Here are those cases, using JavaScript as a comparison language. String Concatentation Obviously this is not a problem in PHP because there are separate string concatenation (.) and addition (+) operators. JavaScript var a = 5; var b = \"10\" var incorrect = a + b; // \"510\" var correct = a + Number(b); // 15  String Comparison Often in computer systems \"5\" is greater than \"10\" because it doesn't interpret it as a number.  Not so in PHP, which, even if both are strings, realizes they are numbers and removes the need for a cast): JavaScript console.log(\"5\" > \"10\" ? \"true\" : \"false\"); // true  PHP echo \"5\" > \"10\" ? \"true\" : \"false\";  // false!  Function signature typing PHP implements a bare-bones type-checking on function signatures, but unfortunately it's so flawed it's probably rarely usable. I thought I might be doing something wrong, but a comment on the docs confirms that built-in types other than array cannot be used in PHP function signatures - though the error message is misleading. PHP function testprint(string $a) {     echo $a; }  $test = 5; testprint((string)5); // \"Catchable fatal error: Argument 1 passed to testprint()                       //  must be an instance of string, string given\" WTF?  And unlike any other language I know, even if you use a type it understands, null can no longer be passed to that argument (must be an instance of array, null given).  How stupid. Boolean interpretation [Edit]: This one is new. I thought of another case, and again the logic is reversed from JavaScript. JavaScript console.log(\"0\" ? \"true\" : \"false\"); // True, as expected. Non-empty string.  PHP echo \"0\" ? \"true\" : \"false\"; // False! This one probably causes a lot of bugs.   So in conclusion, the only useful case I can think of is... (drumroll) Type truncation In other words, when you have a value of one type (say string) and you want to interpret it as another type (int) and you want to force it to become one of the valid set of values in that type: $val = \"test\"; $val2 = \"10\"; $intval = (int)$val; // 0 $intval2 = (int)$val2; // 10 $boolval = (bool)$intval // false $boolval2 = (bool)$intval2 // true $props = (array)$myobject // associative array of $myobject's properties  I can't see what upcasting (to a type that encompasses more values) would really ever gain you. So while I disagree with your proposed use of typing (you essentially are proposing static typing, but with the ambiguity that only if it was force-cast into a type would it throw an error — which would cause confusion), I think it's a good question, because apparently casting has very little purpose in PHP. "
    },
    {
        "ID": "24412",
        "Question": "I know that many of us maintain our own little personal library with tools and utilities that we use often. I've had mine since I was 16 years old so it has grown to quite a considerable size. Some of the stuff I've written has since been added to the framework. I wrote my own little implementation of expression trees for use with genetic algorithms long before LINQ, which I quite like and was proud of at the time - of course its pretty useless now. But recently I have been going through it and upgrading to .NET 4.0 and re-kindled an interest.  So I'm curious as to what you use your library for. Maybe we could get some cool ideas going for useful little snippets and share them amongst ourselves. So my questions are:  Do you have a miscellaneous utility library? Which part are you most proud of and why?  Give an example of code if you like :-) ",
        "Best answer": "No.  I've seen some nightmarish effects of a dozen developers all adding their own little \"util.h\" style libraries to projects, and have it turn into a giant mess of inconsistent function naming and behaviors. Much like PHP. So for that reason I avoid doing it.  I avoid needing to do that by using programming environments that give me nearly all the tools and libraries I need up front whenever possible, such as C# and python. "
    },
    {
        "ID": "24460",
        "Question": "I'm totally new to the Ruby world, and I'm a bit confused with the concept of Symbols. What's the difference between Symbols and Variables? Why not just using variables? Thanks. ",
        "Best answer": "Variables and symbols are different things. A variable points to different kinds of data. In Ruby, a symbol is more like a string than a variable. In Ruby, a string is mutable, whereas a symbol is immutable. That means that only one copy of a symbol needs to be created. Thus, if you have x = :my_str y = :my_str  :my_str will only be created once, and x and y point to the same area of memory. On the other hand, if you have x = \"my_str\" y = \"my_str\"  a string containing my_str will be created twice, and x and y will point to different instances. As a result, symbols are often used as the equivalent to enums in Ruby, as well as keys to a dictionary (hash). "
    },
    {
        "ID": "24466",
        "Question": "I have written many database (MySQL) web apps so far but I always think my structure is kinda clumsy. I want to improve the programming/design pattern I use, hoping for some advice here. Particularly, I cannot find a structure that complements an OOP approach that encapsulates the implementation of the database (schema). I  Think my question can be best explained by example. There are 2 approaches I use now say I have an Invoice object/class: first is to use static member functions class Invoice {    int id;    string ref;    int customer_id;    date created;    date due;     static id create();    static bool update(id, field1, field2, ...);    static bool delete(id);    static bool get(id); };  The second approach is to put every thing in a database object: class Database extends ProprietaryDBConnecter, Singleton {    id createInvoice();    bool updateInvoice(id, field1, field2, ...);    bool deleteInvoice(id);    bool getInvoice(id);     id createCustomer();    bool updateCustomer(id, field1, field2, ...);    bool deleteCustomer(id);    bool getCustomer(id);     // etc... }  I find that both ways the (SQL) member functions are very much unseparable from the \"view\", in that the \"view\" determines what the classes needs to have and hence seems to break the document/view architecture. Also, it seems kind of inefficient for example a SELECT statement should only select what is needed, but the presence of member variables in Invoice seems to imply \"guaranteed data\". Don't know if I explained the question clearly, What are some other best approaches to this architecture/design pattern/what-it-is-known-as? Thanks for advices ",
        "Best answer": "Well I suppose that you could use an ORM.  But really, database design should NOT follow OOP priciples, it should follow database design priciples such as normalization.  And it should be designed at the database not in the application. And the data integrity rules should be enforced at the database level not by the application.  I would suggest you read some database design books and, then, read about performance tuning the database of your choice.  "
    },
    {
        "ID": "24485",
        "Question": "A lot of web frameworks have a MVC-style layout to code and approaching problems. What are some good similar paradigms for JavaScript? I'm already using a framework (jQuery) and unobtrusive js, but that still doesn't address the problem I run into when I have more complex web apps that require a lot of javascript, I tend to just end up with a bunch of functions in a single, or possibly a few files. What's a better way to approach this? ",
        "Best answer": "Namespacing: Don't forget to use objects as a pseudo-package (most frameworks do this, you should also): var YourCompany = {};  YourCompany.util = {};  YourCompany.util.myFunction = function() { /* ...  */ }  You don't necessarily need to set it up that way, and use whatever naming conventions you prefer, but the namespacing will help you out a lot (makes it easier on refactoring search-and-replace too, when you decide to move something). "
    },
    {
        "ID": "24526",
        "Question": "Are there any patterns which seem sensible when designing an object oriented domain, but do not translate nicely onto a relational database schema?  If so, are there standard patterns that can be used instead? ",
        "Best answer": "Domains which have entities where the number of attributes (properties, parameters) that can be used to describe them is potentially vast, but the number that will actually apply to a given entity is relatively modest. An example of such a domain would be a medical practice, where there are a vast number of possible symptoms, but the number of symptoms that any patient might have at any given time is comparatively small. These kinds of domains are typically represented using an Entity-Attribute-Value (EAV) model.  This data representation is analogous to space-efficient methods of storing a sparse matrix, where only non-empty values are stored. In the case of a medical domain, the problem space is complicated by the fact that any given symptom or medical test can have its own set of custom attributes, just as products sold in an online store can have custom specifications.   In fact, online stores have to deal with this problem also.  A book has a \"number of pages\" specification, while a memory module has a \"number of bytes\" specification, and the two attributes are not related at all. So a set of attributes appropriate for each product is chosen from an attributes table. The Attributes table might look like this: AttributeID AttributeDescription UnitsID --> FK to Units table  The ProductAttributes table might look like this: ProductAttributeID ProductID AttributeID --> FK to Attributes table Value  Notice that Number of Bytes and Number of Pages aren't features of the database schema. Instead, they are soft-coded into the tables.  So there is no way to represent these features as part of the domain design. "
    },
    {
        "ID": "24558",
        "Question": "This is just a wondering I had while reading about interpreted and compiled languages.    Ruby is no doubt an interpreted language since the source code is processed by an interpreter at the point of execution. On the contrary C is a compiled language, as one have to compile the source code first according to the machine and then execute. This results is much faster execution. Now coming to Python:    A python code (somefile.py) when imported creates a file (somefile.pyc) in the same directory. Let us say the import is done in a python shell or django module. After the import I change the code a bit and execute the imported functions again to find that it is still running the old code. This suggests that *.pyc files are compiled python files similar to executable created after compilation of a C file, though I can't execute *.pyc file directly. When the python file (somefile.py) is executed directly ( ./somefile.py or python somefile.py ) no .pyc file is created and the code is executed as is indicating interpreted behavior.   These suggest that a python code is compiled every time it is imported in a new process to create a .pyc while it is interpreted when directly executed.  So which type of language should I consider it as? Interpreted or Compiled? And how does its efficiency compare to interpreted and compiled languages? According to wiki's Interpreted Languages page, it is listed as a language compiled to Virtual Machine Code, what is meant by that? ",
        "Best answer": "Python will fall under byte code interpreted. .py source code is first compiled to byte code as .pyc. This byte code can be interpreted (official CPython), or JIT compiled (PyPy). Python source code (.py) can be compiled to different byte code also like IronPython (.Net) or Jython (JVM). There are multiple implementations of Python language. The official one is a byte code interpreted one. There are byte code JIT compiled implementations too. For speed comparisons of various implementations of languages you can try here. "
    }
]
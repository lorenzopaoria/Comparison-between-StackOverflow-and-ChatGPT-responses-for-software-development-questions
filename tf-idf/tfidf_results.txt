Post 1:
A coworker of mine believes that any use of in-code comments (ie, not javadoc style method or class comments) is a code smell.  What do you think?


TF-IDF Scores:
class: 0.2399
code: 0.3545
comments: 0.7199
method: 0.2648
style: 0.3600
think: 0.2515
use: 0.1884

Termine con il punteggio TF-IDF più alto: comments (0.7199)

----------------------------------------------------------------------------------------------------

Post 2:
When starting a project for a company that's not primarily a programming company, one of the expectations is that there's a finished product at the end free of all bugs and does everything needed right away. However, that's rarely the case. 
What are some ways to manage expectations and explain to non-programmers how software development differs from other types of product development?


TF-IDF Scores:
bugs: 0.2385
case: 0.1859
company: 0.4514
development: 0.3975
differs: 0.2385
does: 0.1666
end: 0.2257
explain: 0.2064
needed: 0.2385
non: 0.2064
programmers: 0.1987
programming: 0.1462
project: 0.1666
right: 0.1920
software: 0.2152
starting: 0.2257
ways: 0.2152

Termine con il punteggio TF-IDF più alto: company (0.4514)

----------------------------------------------------------------------------------------------------

Post 3:
Sometimes, the things I have to do for my job are interesting and engaging.  Sometimes, they aren't.  Occasionally, they really aren't.
Do you have any particular strategies or tricks for dealing with those dull stretches when your brain would rather be doing anything other than what you're supposed to be doing, particularly when the Internet and its boundless opportunities for interesting Slack beckon?


TF-IDF Scores:
aren: 0.4967
dealing: 0.2484
doing: 0.4701
interesting: 0.4701
job: 0.2350
really: 0.1936
supposed: 0.2350
things: 0.1999
tricks: 0.2484

Termine con il punteggio TF-IDF più alto: aren (0.4967)

----------------------------------------------------------------------------------------------------

Post 4:
I have read a few articles on Internet about programming language choice in the enterprise. Recently many dynamic typed languages have been popular, i.e. Ruby, Python, PHP and Erlang. But many enterprises still stay with static typed languages like C, C++, C# and Java.
And yes, one of the benefits of static typed languages is that programming errors are caught earlier, at compile time, rather than at run time. But there are also advantages with dynamic typed languages. (more on Wikipedia)
The main reason why enterprises don't start to use languages like Erlang, Ruby and Python, seem to be the fact that they are dynamic typed. That also seem to be the main reason why people on StackOverflow decide against Erlang. See Why did you decide "against" Erlang.
However, there seem to be a strong criticism against dynamic typing in the enterprises, but I don't really get it why it is that strong.
Really, why is there so much criticism against dynamic typing in the enterprises? Does it really affect the cost of projects that much, or what? But maybe I'm wrong.


TF-IDF Scores:
benefits: 0.1066
choice: 0.1182
compile: 0.1182
decide: 0.2237
did: 0.1066
does: 0.0826
don: 0.1739
java: 0.0869
language: 0.0788
languages: 0.5591
like: 0.1130
main: 0.2363
maybe: 0.1023
people: 0.0921
php: 0.1066
popular: 0.1182
programming: 0.1448
projects: 0.1023
python: 0.2363
read: 0.1023
really: 0.2764
reason: 0.2237
recently: 0.1066
ruby: 0.2363
run: 0.1118
stackoverflow: 0.1182
start: 0.1118
static: 0.2237
time: 0.1575
use: 0.0619
yes: 0.1182

Termine con il punteggio TF-IDF più alto: languages (0.5591)

----------------------------------------------------------------------------------------------------

Post 5:
At first glance, I'd say a good programming team needs to understand the following matters:

The details of the core language / framework
HTML, (asynchronous) javascript
SQL / data model
Usability / UI design
Security
Project management.

If this team is not complete: what is needed?


TF-IDF Scores:
complete: 0.2253
core: 0.2497
data: 0.1889
design: 0.1946
details: 0.2363
following: 0.2080
framework: 0.2363
good: 0.1837
html: 0.2497
language: 0.1664
management: 0.2253
model: 0.2363
needed: 0.2497
programming: 0.1530
project: 0.1744
say: 0.1946
team: 0.4725
understand: 0.2253

Termine con il punteggio TF-IDF più alto: team (0.4725)

----------------------------------------------------------------------------------------------------

Post 6:
The coding standards for the code hosted in drupal.org suggest to use two spaces to indent the code; other sites suggest to use tabs to indent the code.
What is the proper indentation character for everything, and in every situation? Please explain the answer you give.


TF-IDF Scores:
answer: 0.3148
code: 0.6319
explain: 0.3702
situation: 0.4049
use: 0.4479

Termine con il punteggio TF-IDF più alto: code (0.6319)

----------------------------------------------------------------------------------------------------

Post 7:
We often receive last minute requests from the business asking for an extra feature to be implemented.  The project manager is usually responsible for filtering out these requests as "must haves" or "nice to have", but there are cases where the business wants to squeeze all these features into a release.   Is there a good way to say NO to the business?  What steps can be taken to stop or minimize scope creep?


TF-IDF Scores:
asking: 0.2189
business: 0.6566
cases: 0.2002
extra: 0.2189
feature: 0.2087
features: 0.2189
good: 0.1702
implemented: 0.2087
nice: 0.2189
project: 0.1616
say: 0.1803
taken: 0.2313
usually: 0.2087
wants: 0.2087
way: 0.1476

Termine con il punteggio TF-IDF più alto: business (0.6566)

----------------------------------------------------------------------------------------------------

Post 8:
I realize there have been lots of discussions about this type of thing and they often devolve into dogma around whether you ask the "100 logical pirates" type of questions or whether you get them to write "fizz buzz". 
I'm interested in what techniques and questions have been effective for you when interviewing potential developers for jobs. 
One technique per answer so we can vote on them, please.


TF-IDF Scores:
100: 0.2848
answer: 0.2096
ask: 0.2570
developers: 0.2695
questions: 0.4930
realize: 0.2848
techniques: 0.2848
thing: 0.2373
type: 0.4747
write: 0.2220

Termine con il punteggio TF-IDF più alto: questions (0.4930)

----------------------------------------------------------------------------------------------------

Post 9:
We've often run across scenarios where the business will promise a client a new feature.  The business will promise that the feature be implemented in a specific way.  These technical details promised by the business are usually poor.  Unfortunately, client is now set and want this feature to be implemented in the way described by the business.
In the end, the business just wants this feature to be completed without regard to quality and maintainability.  Is there a good way to push back?  How can we explain to the business that providing technical details before the requirements have been gathered is a bad idea?


TF-IDF Scores:
bad: 0.1134
business: 0.6805
client: 0.2268
details: 0.2268
end: 0.1134
explain: 0.1037
feature: 0.4326
good: 0.0882
idea: 0.1082
implemented: 0.2163
just: 0.0734
new: 0.0765
requirements: 0.1082
run: 0.1134
set: 0.0882
specific: 0.1037
usually: 0.1082
ve: 0.0907
want: 0.0749
wants: 0.1082
way: 0.2294

Termine con il punteggio TF-IDF più alto: business (0.6805)

----------------------------------------------------------------------------------------------------

Post 10:
How do you bill your programming projects? Do you do it per hour? Per job? 
Please include what kind of project you are doing in the answer. (Mobile, Web, Desktop, etc... You can be more specific if you want.)
BONUS:
If you'd like to give specific amounts in your answer, you may. ;-)


TF-IDF Scores:
answer: 0.4125
desktop: 0.2803
doing: 0.2653
include: 0.2653
job: 0.2653
kind: 0.2803
like: 0.1340
programming: 0.1718
project: 0.1958
projects: 0.2426
specific: 0.4851
want: 0.1752
web: 0.2256

Termine con il punteggio TF-IDF più alto: specific (0.4851)

----------------------------------------------------------------------------------------------------

Post 11:
Who in the software engineering and software development fields uses Twitter to tweet about relevant happenings in the field?


TF-IDF Scores:
development: 0.3072
field: 0.3687
fields: 0.3489
relevant: 0.3327
software: 0.6655
uses: 0.3072

Termine con il punteggio TF-IDF più alto: software (0.6655)

----------------------------------------------------------------------------------------------------

Post 12:
Are there any great programming or software development books that are language agnostic?  Why should I read it?


TF-IDF Scores:
books: 0.4438
development: 0.3698
great: 0.4438
language: 0.2958
programming: 0.2720
read: 0.3840
software: 0.4005

Termine con il punteggio TF-IDF più alto: books (0.4438)

----------------------------------------------------------------------------------------------------

Post 13:
The Actor Model which is used by Erlang seems to be a very different way to do concurrent programming. What are your thoughts about the Actor Model? Will it be a popular solution for concurrency?


TF-IDF Scores:
different: 0.3307
model: 0.6936
popular: 0.3665
programming: 0.2246
solution: 0.3054
used: 0.2773
way: 0.2339

Termine con il punteggio TF-IDF più alto: model (0.6936)

----------------------------------------------------------------------------------------------------

Post 14:
For the longest time in places like Java's IRC channel, SO, and other places I've been told something along the lines of "Worry about how the code looks and its readability/understandability now, and performance later if absolutely necessary". So for the longest time, I haven't really been OCD about performance for my small desktop or web apps, just removing the obviously inefficient.
Most responses are "What about scalability?". Thats a legitimate point, but if my app was only built to parse, say, files 10,000 lines long, should I make my code a mess for the small percentage of people that are going to shove in a 1,000,000 line file?
My main question is when should I trade the easy but somewhat inefficient ways of doing tasks for big giant complicated beasts that do things extremely quickly but destroy any possible ways of upgrading and make the code excessively difficult and prone to rewriting anyway by the next developer? 


TF-IDF Scores:
10: 0.1358
app: 0.1542
apps: 0.1630
code: 0.2407
desktop: 0.1630
developer: 0.1358
difficult: 0.1410
doing: 0.1542
easy: 0.1630
file: 0.1542
java: 0.1199
just: 0.0999
later: 0.1630
like: 0.0779
long: 0.1542
looks: 0.1630
main: 0.1630
make: 0.2624
people: 0.1270
places: 0.3259
point: 0.1542
possible: 0.1471
prone: 0.1630
question: 0.1062
really: 0.1270
say: 0.1270
small: 0.2941
things: 0.1312
time: 0.2172
told: 0.1542
ve: 0.1233
ways: 0.2941
web: 0.1312

Termine con il punteggio TF-IDF più alto: places (0.3259)

----------------------------------------------------------------------------------------------------

Post 15:
If I have some code that has 80% test coverage (all tests pass), is it fair to say that it's of higher quality than code with no test coverage?  
Or is it fair to say it's more maintainable?


TF-IDF Scores:
code: 0.3315
higher: 0.3367
pass: 0.3186
say: 0.5249
test: 0.5611
tests: 0.2913

Termine con il punteggio TF-IDF più alto: test (0.5611)

----------------------------------------------------------------------------------------------------

Post 16:
Test driven development. I get it, like it.
But writing tests does require overhead. So should TDD be used universally throughout the code base, or are there areas where TDD provides a high ROI and other areas where the ROI is so low that it is not worth following.


TF-IDF Scores:
code: 0.1556
development: 0.2634
does: 0.2208
driven: 0.3161
following: 0.2634
high: 0.3161
like: 0.1512
low: 0.3161
overhead: 0.3161
require: 0.2735
test: 0.2634
tests: 0.2735
used: 0.2392
writing: 0.2991

Termine con il punteggio TF-IDF più alto: driven (0.3161)

----------------------------------------------------------------------------------------------------

Post 17:
Having taken a course in Operating Systems I'm interested in expanding my knowledge of the Linux kernel and practice working with a big system. What are some interesting but not overly difficult projects I can try my hand at? 
EDIT: a bit of background on what I did do with the kernel. 

Implemented a new scheduling policy
Implemented User Threads and a corresponding mutex library (not really kernel hacking but contained kernel related theory)



TF-IDF Scores:
bit: 0.2249
course: 0.2249
did: 0.2249
difficult: 0.2157
having: 0.2157
implemented: 0.4499
interesting: 0.2359
library: 0.2493
new: 0.1591
practice: 0.2493
projects: 0.2157
really: 0.1943
related: 0.2493
taken: 0.2493
try: 0.2359
user: 0.2006
working: 0.2077

Termine con il punteggio TF-IDF più alto: implemented (0.4499)

----------------------------------------------------------------------------------------------------

Post 18:
How would someone implement Agile process concepts as a solo developer?  Agile seems useful for getting applications developed at a faster pace, but it also seems very team oriented...


TF-IDF Scores:
developer: 0.3714
getting: 0.4457
implement: 0.3714
process: 0.4457
team: 0.4218
useful: 0.3857

Termine con il punteggio TF-IDF più alto: getting (0.4457)

----------------------------------------------------------------------------------------------------

Post 19:

Possible Duplicate:
Using “Foo” and “Bar” in examples 

I know AT&T labs used them in their Unix days, but do they have even deeper histories?


TF-IDF Scores:
examples: 0.5678
know: 0.3231
possible: 0.5124
used: 0.4296
using: 0.3550

Termine con il punteggio TF-IDF più alto: examples (0.5678)

----------------------------------------------------------------------------------------------------

Post 20:
Does learning COBOL still make sense?


TF-IDF Scores:
does: 0.4141
learning: 0.5350
make: 0.4771
sense: 0.5610

Termine con il punteggio TF-IDF più alto: sense (0.5610)

----------------------------------------------------------------------------------------------------

Post 21:
There is a widely accepted opinion that Singleton is an anti-pattern. As usual, there are always exceptions to the rule. Can you explain why Singleton is a bad choice in general and give an example of some valid use cases for it?


TF-IDF Scores:
bad: 0.3437
cases: 0.3143
choice: 0.3632
example: 0.2270
explain: 0.3143
general: 0.3277
pattern: 0.3277
rule: 0.3632
use: 0.1901
valid: 0.3437

Termine con il punteggio TF-IDF più alto: choice (0.3632)

----------------------------------------------------------------------------------------------------

Post 22:
Will Java have the same importance it had in the past, or it will be less relevant than nowadays?


TF-IDF Scores:
java: 0.4903
past: 0.6307
relevant: 0.6015

Termine con il punteggio TF-IDF più alto: past (0.6307)

----------------------------------------------------------------------------------------------------

Post 23:
I just started working a year ago, and I want to join an open source project for the same reasons as anyone else: help create something useful and develop my skills further.
My problem is, I don't know how to find a project where I'll fit in.
How can I find a beginner-friendly project?  What attributes should I be searching for?  What are warning signs that a project might not be the right fit?  Are there any tools out there to help match people with open source projects?
There's a similar question here, but that question has to do with employment and is limited to PHP/Drupal.


TF-IDF Scores:
attributes: 0.1871
create: 0.1340
develop: 0.1871
don: 0.1376
help: 0.3376
just: 0.1146
know: 0.1064
ll: 0.1688
people: 0.1458
php: 0.1688
problem: 0.1376
project: 0.5227
projects: 0.1619
question: 0.2439
reasons: 0.1770
right: 0.1506
similar: 0.1770
source: 0.3376
tools: 0.1871
useful: 0.1619
want: 0.1169
working: 0.1559

Termine con il punteggio TF-IDF più alto: project (0.5227)

----------------------------------------------------------------------------------------------------

Post 24:
Elite developers can be 10x more productive than an average developer. 
Clearly it's easier to find an elite developer around the whole world than in a company's backyard. 
If a company is not located in a programming hot spot, should they consider hiring people who work from home?


TF-IDF Scores:
company: 0.5815
developer: 0.5120
developers: 0.2907
easier: 0.2773
people: 0.2395
productive: 0.3072
programming: 0.1883
work: 0.2260

Termine con il punteggio TF-IDF più alto: company (0.5815)

----------------------------------------------------------------------------------------------------

Post 25:
For a long time in SO and in other places Java has the reputation of being slow. From jokes to many comments in questions and answers, people still believe Java is slow based solely on experience with it in the 90s.
This is my issue: we have disproved (most) of the reasons that people believe Java is slow. Outside of small things, Java is pretty fast.
So why is it that people still refuse to believe Java is fast now? Is it part of their mindset that anything thats not C/C++ is slow? Is it because people don't check over time? Is it because people are just biased?


TF-IDF Scores:
answers: 0.1400
based: 0.1325
believe: 0.4200
check: 0.1400
comments: 0.1400
don: 0.1030
issue: 0.1325
java: 0.5150
just: 0.0858
long: 0.1325
people: 0.5457
places: 0.1400
pretty: 0.1263
questions: 0.1211
reasons: 0.1325
small: 0.1263
things: 0.1127
time: 0.1866

Termine con il punteggio TF-IDF più alto: people (0.5457)

----------------------------------------------------------------------------------------------------

Post 26:
I've been told that to be taken seriously as a job applicant, I should drop years of relevant experience off my résumé, remove the year I got my degree, or both. Or not even bother applying, because no one wants to hire programmers older than them.1
Or that I should found a company, not because I want to, or because I have a product I care about, but because that way I can get a job if/when my company is acquired.
Or that I should focus more on management jobs (which I've successfully done in the past) because… well, they couldn't really explain this one, except the implication was that over a certain age you're a loser if you're still writing code. But I like writing code.
Have you seen this? Is this only a local (Northern California) issue?
If you've ever hired programmers:2

Of the résumés you've received, how old was the eldest applicant?
What was the age of the oldest person you've interviewed?
How old (when hired) was the oldest person you hired?

How old is "too old" to employed as a programmer?
1 I'm assuming all applicants have equivalent applicable experience. This isn't about someone with three decades of COBOL applying for a Java guru job.
2 Yes, I know that (at least in the US) you aren't supposed to ask how old an applicant is. In my experience, though, you can get a general idea from a résumé.


TF-IDF Scores:
aren: 0.1359
ask: 0.1227
certain: 0.1359
code: 0.1338
company: 0.2572
explain: 0.1176
general: 0.1227
got: 0.1359
idea: 0.1227
isn: 0.1286
issue: 0.1286
java: 0.1000
job: 0.3859
know: 0.0773
like: 0.0650
local: 0.1286
management: 0.1227
past: 0.1286
programmer: 0.1286
programmers: 0.2265
really: 0.1060
relevant: 0.1227
remove: 0.1176
seen: 0.1133
supposed: 0.1286
taken: 0.1359
told: 0.1286
ve: 0.5142
want: 0.0850
wants: 0.1227
way: 0.0867
writing: 0.2572
yes: 0.1359

Termine con il punteggio TF-IDF più alto: ve (0.5142)

----------------------------------------------------------------------------------------------------

Post 27:
Joel Spolsky wrote a famous blog post "Human Task Switches considered harmful".
While I agree with the premise and it seems like common sense, I'm wondering if there are any studies or white papers on this to calculate the overhead on task switches, or is the evidence merely anecdotal? 


TF-IDF Scores:
blog: 0.2967
common: 0.2808
considered: 0.2678
like: 0.1419
overhead: 0.2967
post: 0.2678
sense: 0.2808
task: 0.5934
wondering: 0.2678
wrote: 0.2808

Termine con il punteggio TF-IDF più alto: task (0.5934)

----------------------------------------------------------------------------------------------------

Post 28:
"Regular" golf vs. code golf:
Both are competitions.  Both have a well-defined set of rules, which I'll leave out for simplicity.  Both have well-defined goals; in short, "use fewer hits/characters than your competitors."
To win matches, athletic golfers rely on

equipment

Some situations call for a sand wedge; others, a 9-iron.


techniques

The drive works better when your feet are about shoulder width apart and your arms are relaxed.


and strategies

Sure, you could take that direct shortcut to the hole... but do you really want to risk the water hazard or sand bunker when those trees are in the way and the wind is so strong?  It might be better to go around the long way.



What do code golfers have that's analagous to athletic golfers' equipment, techniques and strategies?
Sample answer to get this started: use the right club!  Choose GolfScript instead of C#.


TF-IDF Scores:
answer: 0.1599
better: 0.3622
characters: 0.2174
choose: 0.2174
code: 0.2141
instead: 0.1962
leave: 0.2057
ll: 0.1962
long: 0.2057
really: 0.1695
right: 0.1750
set: 0.1599
sure: 0.2057
techniques: 0.4347
use: 0.2276
vs: 0.2174
want: 0.1359
way: 0.2774
works: 0.1750

Termine con il punteggio TF-IDF più alto: techniques (0.4347)

----------------------------------------------------------------------------------------------------

Post 29:
If you were to design a programming language, how would you do it? What features would you put in? What would you leave out? Statically or dynamically typed? Strongly or weakly typed? Compiled or interpreted? Justify your answers.


TF-IDF Scores:
answers: 0.4869
design: 0.3796
features: 0.4607
language: 0.3245
leave: 0.4607
programming: 0.2984

Termine con il punteggio TF-IDF più alto: answers (0.4869)

----------------------------------------------------------------------------------------------------

Post 30:
Did you learn to touch-type when you were already working as a programmer?  If so how did it affect your productivity?  Or are you still unable to touch type and do you think it holds you back?
According to Steve Yegge it is essential,
Personally I did not notice much difference, possibly because I was spending less than 25% of my work time actually typing (I was working on a large legacy project at the time and I was spending more time on reading and debugging existing code.)


TF-IDF Scores:
actually: 0.1840
code: 0.1004
did: 0.5519
existing: 0.1929
large: 0.1840
possibly: 0.2039
programmer: 0.1929
project: 0.1424
reading: 0.2039
think: 0.1424
time: 0.4076
type: 0.3397
work: 0.1500
working: 0.3397

Termine con il punteggio TF-IDF più alto: did (0.5519)

----------------------------------------------------------------------------------------------------

Post 31:
Rather than slavishly pair program all the time, we use pair programming selectively on our team. I think it works best in the following circumstances:

Ramping up brand new team members on a project (instead of letting them wade through documentation or code on their own).
Having junior and senior people work together (helps to show some of the skills and tricks of the more experienced developers, plus it allows the old dogs to learn new tricks sometimes).
When someone is trying to track down a defect, it often helps to pair with a fresh set of eyes.

When to use pair program and why?
When to avoid pair programming? Why?


TF-IDF Scores:
avoid: 0.2028
best: 0.1831
code: 0.0999
developers: 0.1920
following: 0.1690
having: 0.1755
instead: 0.1831
new: 0.2589
people: 0.1581
program: 0.3380
programming: 0.2486
project: 0.1417
set: 0.1492
team: 0.3839
think: 0.1417
time: 0.1352
tricks: 0.4057
trying: 0.1755
use: 0.2124
work: 0.1492
works: 0.1633

Termine con il punteggio TF-IDF più alto: tricks (0.4057)

----------------------------------------------------------------------------------------------------

Post 32:
No matter how much you love a programming language, there are always a few details in it that aren’t quite as nice as they could be.
In this question, I would like to specifically focus on syntax elements. In a programming language that you use frequently (perhaps your favourite programming language, or perhaps the one you are forced to use at work), which syntax element do you find most unreadable, unclear, inconvenient or unpleasant?


TF-IDF Scores:
aren: 0.2658
details: 0.2515
element: 0.2658
language: 0.5315
like: 0.1271
nice: 0.2515
programming: 0.4887
question: 0.1733
quite: 0.2215
use: 0.2783
work: 0.1956

Termine con il punteggio TF-IDF più alto: language (0.5315)

----------------------------------------------------------------------------------------------------

Post 33:
I think everyone has their own program or set of features beyond "Hello World!", that they use when trying out a new language.
Mine is a guessing game:
I'm thinking of a number 1-10, guess what it is!
Guess: 3
Nope, too low!
Guess: 7
Nope, too high!
Guess: 5
Yes, You win!
Play again (Y/N)? N

What do you write?


TF-IDF Scores:
10: 0.1688
features: 0.1917
game: 0.2026
guess: 0.7312
high: 0.2026
language: 0.1350
low: 0.2026
new: 0.1293
number: 0.1917
program: 0.1688
set: 0.1490
think: 0.1415
thinking: 0.1631
trying: 0.1753
use: 0.1060
write: 0.1579
yes: 0.2026

Termine con il punteggio TF-IDF più alto: guess (0.7312)

----------------------------------------------------------------------------------------------------

Post 34:
I have seen this on the SO on many times. Whenever a question is vague and the question is asking some magical answer somebody or the other leaves a comment saying answer is 42. Even a book I am reading right now uses '42' as the number whenever it wants demonstrate some basic concept using an integer. So is there any history behind it or it is just a coincidence?


TF-IDF Scores:
answer: 0.4218
asking: 0.2713
concept: 0.2867
just: 0.1757
number: 0.2713
question: 0.3738
reading: 0.2867
right: 0.2307
seen: 0.2389
times: 0.2713
uses: 0.2389
using: 0.1792
wants: 0.2587

Termine con il punteggio TF-IDF più alto: answer (0.4218)

----------------------------------------------------------------------------------------------------

Post 35:
I am a moderately capable web developer. I can put stuff where I want it to go and put some JQuery stuff in there if I need to. However, if I am making my own website (which I am starting to do) I have no idea how to design it. If someone was to sit next to me a point to the screen and say "put this picture there, text there" I can do that quite easily. But designing my own site with my choice of colours and text will look like a toddler has invented it.
Does anyone know any websites/books I can look at or has anyone got any tips on the basics of non-toddler web design?


TF-IDF Scores:
books: 0.2009
choice: 0.2009
design: 0.3133
developer: 0.1674
does: 0.1404
easily: 0.1813
got: 0.2009
idea: 0.1813
know: 0.1143
like: 0.0961
look: 0.3803
need: 0.1520
non: 0.1739
point: 0.1901
quite: 0.1674
say: 0.1566
starting: 0.1901
text: 0.4018
want: 0.1256
web: 0.3234
website: 0.2009

Termine con il punteggio TF-IDF più alto: text (0.4018)

----------------------------------------------------------------------------------------------------

Post 36:
goto is almost universally discouraged. Is using this statement ever worthwhile?


TF-IDF Scores:
using: 1.0000

Termine con il punteggio TF-IDF più alto: using (1.0000)

----------------------------------------------------------------------------------------------------

Post 37:
Managed OSes like Microsoft Singularity and JNode are quite an interesting concept. Essentially, the OS is bootstrapped with code written in a low-level language (C/C++/Assembly), which essentially implements a virtual machine. The rest of the OS (and all userland apps) run on the virtual machine. There are some great things about this. For example, you suddenly make arbitrary pointers obsolete. And if well written, you get rid of a ton of legacy crud that most modern OSes currently have. 
However, as a disadvantage, you're that much farther away from the hardware, and as a developer, you lose the ability to drop down to a lower level of abstraction and get your hands dirty. 
What are your opinions on this?


TF-IDF Scores:
ability: 0.2259
apps: 0.2259
code: 0.1112
concept: 0.2259
currently: 0.2039
developer: 0.1883
example: 0.1412
great: 0.2259
interesting: 0.2138
language: 0.1506
level: 0.4519
like: 0.1080
low: 0.2259
make: 0.1819
managed: 0.2259
quite: 0.1883
run: 0.2138
things: 0.1819
written: 0.3910

Termine con il punteggio TF-IDF più alto: level (0.4519)

----------------------------------------------------------------------------------------------------

Post 38:
All but the most trivial programs are filled with bugs and so anything that promises to remove them is extremely alluring. At the moment, correctness proofs are code are extremely esoteric, mainly because of the difficultly of learning this and the extra effort it takes to prove a program correct. Do you think that code proving will ever take off?


TF-IDF Scores:
bugs: 0.3287
code: 0.3237
correct: 0.2845
extra: 0.3111
learning: 0.2966
moment: 0.3287
program: 0.2739
prove: 0.3287
remove: 0.2845
takes: 0.3111
think: 0.2296

Termine con il punteggio TF-IDF più alto: bugs (0.3287)

----------------------------------------------------------------------------------------------------

Post 39:
on a widescreen monitor one can easily see more than 80 characters at a time, without scrollbars. even linus torvalds sees the 80 character limit as outdated.
so, is the 80 character limit still relevant in times of widescreen monitors?


TF-IDF Scores:
characters: 0.5020
easily: 0.4530
relevant: 0.4530
time: 0.3346
times: 0.4750

Termine con il punteggio TF-IDF più alto: characters (0.5020)

----------------------------------------------------------------------------------------------------

Post 40:
When I am in a code or design rut, I tend to find a non-dev coworker to discuss the problem with. It forces me to explain the problem in great detail and I'll usually find something I missed in the process.
What are your "unsticking" methods?


TF-IDF Scores:
code: 0.1661
design: 0.2629
explain: 0.2919
great: 0.3373
ll: 0.3044
methods: 0.2715
non: 0.2919
problem: 0.4963
process: 0.3373
usually: 0.3044

Termine con il punteggio TF-IDF più alto: problem (0.4963)

----------------------------------------------------------------------------------------------------

Post 41:
We, as programmers, are constantly being asked 'How long will it take'?
And you know, the situation is almost always like this:

The requirements are unclear. Nobody has done an in depth analysis of all the implications.
The new feature will probably break some assumptions you made in your code and you start thinking immediately of all the things you might have to refactor. 
You have other things to do from past assignments and you will have to come up with an estimate that takes that other work into account.
The 'done' definition is probably unclear: When will it be done? 'Done' as in just finished coding it, or 'done' as in "the users are using it"?
No matter how conscious you are of all these things, sometimes your "programmer's pride" makes you give/accept shorter times than you originally suppose it might take. Specially when you feel the pressure of deadlines and management expectations.

Many of these are organizational or cultural issues that are not simple and easy to solve, but in the end the reality is that you are being asked for an estimate and they expect you to give a reasonable answer. It's part of your job. You cannot simply say: I don't know. 
As a result, I always end up giving estimates that I later realize I cannot fulfill. It has happened countless of times, and I always promise it won't happen again. But it does.
What is your personal process for deciding and delivering an estimate? What techniques have you found useful?


TF-IDF Scores:
account: 0.1390
answer: 0.1081
code: 0.0723
come: 0.1224
definition: 0.1469
does: 0.1026
don: 0.1081
easy: 0.1469
end: 0.2780
feature: 0.1326
feel: 0.1469
issues: 0.1469
job: 0.1390
just: 0.0900
know: 0.1672
later: 0.1469
like: 0.0703
long: 0.1390
makes: 0.1271
management: 0.1326
new: 0.0938
past: 0.1390
process: 0.1469
programmer: 0.1390
programmers: 0.1224
realize: 0.1469
reasonable: 0.1469
requirements: 0.1326
result: 0.1469
say: 0.1145
simple: 0.1271
simply: 0.1390
situation: 0.1390
start: 0.1390
suppose: 0.1469
takes: 0.1390
techniques: 0.1469
things: 0.3547
thinking: 0.1182
times: 0.2780
useful: 0.1271
users: 0.1469
using: 0.0918
won: 0.1390
work: 0.1081

Termine con il punteggio TF-IDF più alto: things (0.3547)

----------------------------------------------------------------------------------------------------

Post 42:
I know some people are massive proponents of test driven development. I have used unit tests in the past, but only to test operations that can be tested easily or which I believe will quite possibly be correct. Complete or near complete code coverage sounds like it would take a lot of time.

What projects do you use test-driven development for? Do you only use it for projects above a certain size?
Should I be using it or not? Convince me!



TF-IDF Scores:
believe: 0.1725
certain: 0.1725
code: 0.0850
complete: 0.3114
correct: 0.1493
development: 0.2875
driven: 0.3451
easily: 0.1557
know: 0.0982
like: 0.0825
lot: 0.1633
operations: 0.1557
past: 0.1633
people: 0.1345
possibly: 0.1725
projects: 0.2986
quite: 0.1438
size: 0.1633
test: 0.4313
tests: 0.1493
time: 0.1150
unit: 0.1633
use: 0.1806
used: 0.1306
using: 0.1079

Termine con il punteggio TF-IDF più alto: test (0.4313)

----------------------------------------------------------------------------------------------------

Post 43:
When learning a new programming language you sometimes come across a language feature which 
makes you wish you had it in your other programming languages that you know.
What are some language feature which were at the time of learning very new to you and that you wish your other programming languages had.  
An example of this is generators in Python or C#.
Other examples may include list comprehensions in Python, template in C++ or LINQ in .NET or lazy evaluation in Haskell.
What other semi-unique language features have you come across which were completely new and enlightening to you?  Are there other features of older programming languages which were unique and have fallen out of fashion?


TF-IDF Scores:
come: 0.2410
completely: 0.1369
example: 0.0904
examples: 0.1446
feature: 0.2611
features: 0.2737
include: 0.1369
know: 0.0823
language: 0.3856
languages: 0.4106
learning: 0.2611
list: 0.1205
makes: 0.1252
net: 0.1205
new: 0.2769
programming: 0.3545
python: 0.2893
time: 0.0964

Termine con il punteggio TF-IDF più alto: languages (0.4106)

----------------------------------------------------------------------------------------------------

Post 44:
As programmers we have a lot of inputs:

Ebooks 
Code snippets 
Interesting emails 
Documents
Web articles 
Blog posts
StackOverflow questions
Podcasts
...

Which tools do you use to store, organize, search and consult all of this stuff?
Is there a silver bullet solution to handle this huge amount of data? 


TF-IDF Scores:
blog: 0.3248
code: 0.1599
data: 0.2458
interesting: 0.3074
lot: 0.3074
programmers: 0.2706
questions: 0.2811
solution: 0.2706
stackoverflow: 0.3248
store: 0.2931
tools: 0.3248
use: 0.1700
web: 0.2614

Termine con il punteggio TF-IDF più alto: blog (0.3248)

----------------------------------------------------------------------------------------------------

Post 45:
What is the recommended  User Account Control (UAC) setting when developing on Windows?
Even on Win7 I find it annoying enough to turn it off (because it makes me more productive with it off) but sometimes I feel bad because I know I'll find more problems in my code if I leave it on.


TF-IDF Scores:
account: 0.3302
bad: 0.3302
code: 0.1718
developing: 0.3020
feel: 0.3489
know: 0.1985
leave: 0.3302
ll: 0.3149
makes: 0.3020
productive: 0.3489
user: 0.2809

Termine con il punteggio TF-IDF più alto: feel (0.3489)

----------------------------------------------------------------------------------------------------

Post 46:
What methods do you use to stay awake and alert while working?
Personally I drink coffee non stop throughout the day.  But I've also heard of this thing called exercise that should help too.  Does anyone else have tips and tricks to stay more awake and alert while working?  Redbull? Maybe a magic pill that won't require me to sleep?


TF-IDF Scores:
called: 0.2694
does: 0.2085
help: 0.2694
maybe: 0.2583
methods: 0.2402
non: 0.2583
require: 0.2583
thing: 0.2487
tricks: 0.2985
use: 0.1562
ve: 0.2258
won: 0.2825
working: 0.4974

Termine con il punteggio TF-IDF più alto: working (0.4974)

----------------------------------------------------------------------------------------------------

Post 47:
I'm freshly out of college, and starting university somewhere next week. We've seen unit tests, but we kinda not used them much; and everyone talks about them, so I figured maybe I should do some.
The problem is, I don't know what to test. Should I test the common case? The edge case? How do I know that a function is adequately covered?
I always have the terrible feeling that while a test will prove that a function works for a certain case, it's utterly useless to prove that the function works, period.


TF-IDF Scores:
case: 0.4013
certain: 0.1716
common: 0.1624
don: 0.1262
function: 0.4290
know: 0.1953
maybe: 0.1485
problem: 0.1262
prove: 0.3432
seen: 0.1430
starting: 0.1624
test: 0.4290
tests: 0.1485
unit: 0.1624
used: 0.1298
ve: 0.1298
works: 0.2762

Termine con il punteggio TF-IDF più alto: function (0.4290)

----------------------------------------------------------------------------------------------------

Post 48:
I'm trying to find places where I can hone my craft outside the context of school or work. Are there places online, or books available, where I can access lists of programming puzzles or challenges?


TF-IDF Scores:
access: 0.2788
available: 0.3089
books: 0.3089
context: 0.3089
lists: 0.3089
places: 0.6178
programming: 0.1893
trying: 0.2673
work: 0.2273

Termine con il punteggio TF-IDF più alto: places (0.6178)

----------------------------------------------------------------------------------------------------

Post 49:
I'd like to know whether a task must be self contained.
Our tasks mostly contain a couple of sentences.
To understand what you are to do you should:

Read the requirements document for several related back log items.
Know how system currently works and understand how it differs
from what is required.

In other words: newcomer or the person who was absent at the planning meeting will require a sufficient amount of time just to comprehend the task.
In addition such way of keeping backlog does not tell much about system evolution and looks more like a primitive contextually conditioned to-do list.


TF-IDF Scores:
currently: 0.2041
differs: 0.2262
does: 0.1580
items: 0.2140
just: 0.1386
know: 0.2574
like: 0.2163
list: 0.1885
looks: 0.2262
read: 0.1957
related: 0.2262
require: 0.1957
requirements: 0.2041
task: 0.4524
time: 0.1508
understand: 0.4082
way: 0.1443
works: 0.1821

Termine con il punteggio TF-IDF più alto: task (0.4524)

----------------------------------------------------------------------------------------------------

Post 50:
I am trying to get my head around as to why having a local variable or a for loop inside a function is not considered to be pure functional programming. 
Given this function:
int as_int(char *str)
{
    int acc; /* accumulate the partial result */

    for (acc = 0; isdigit(*str); str++) {
        acc = acc * 10 + (*str - '0');
    }

    return acc;
}

Under what circumstances would the variable acc be a side-effect ? Even in a concurrent environment each invocation of the function would have its own copy of acc. So I don't quite get why it isn't allowed in functional programming.


TF-IDF Scores:
10: 0.1504
considered: 0.1629
copy: 0.1805
don: 0.1328
environment: 0.1708
function: 0.4513
functional: 0.3610
given: 0.1805
having: 0.1562
inside: 0.1805
int: 0.3610
isn: 0.1708
local: 0.1708
programming: 0.2213
quite: 0.1504
result: 0.1805
return: 0.1562
trying: 0.1562
variable: 0.3258

Termine con il punteggio TF-IDF più alto: function (0.4513)

----------------------------------------------------------------------------------------------------

Post 51:
I have the method which returns java.util.Date inside the hibernate-entity class:
package ua.com.winforce.loto_partner.commons.db.entity;

@Entity
@Table(schema = "pr", name = "publice")
public class Pr {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private int id;

    @Column(name = "reg_date")  
    private Date regDate;

    //GET, SET
}

And in a method I need to create the local variable which will be hold getRegDate(); value, or to invoke that method twice. What would be more appropriate in that case? I mean, in the first case we're potentially closing the moment when GC will be triggered, but in the first we waste our time to the second method invocation.


TF-IDF Scores:
case: 0.2502
class: 0.2139
com: 0.1605
create: 0.1150
id: 0.4814
inside: 0.1605
int: 0.1605
java: 0.1181
local: 0.1519
method: 0.4722
moment: 0.1605
need: 0.1214
private: 0.3209
public: 0.1605
returns: 0.1605
second: 0.1389
set: 0.1181
strategy: 0.1519
time: 0.1070
value: 0.1605
variable: 0.1448

Termine con il punteggio TF-IDF più alto: id (0.4814)

----------------------------------------------------------------------------------------------------

Post 52:
Very often I have to review pull requests of fellow programmers and I face the problem - what should I do when the code is not as good as I would expect? Should I reject the pull request or accept/merge even though I don't like the code? Of course, I reject when I see errors, but I can't keep rejecting again and again. This annoys my colleagues and they ask me to close my eyes and move on. But if I accept the changes I don't like - what code review is for? What can you recommend?


TF-IDF Scores:
ask: 0.2763
changes: 0.3062
code: 0.4523
course: 0.2763
don: 0.4505
good: 0.2253
like: 0.2928
problem: 0.2253
programmers: 0.2551
request: 0.3062

Termine con il punteggio TF-IDF più alto: code (0.4523)

----------------------------------------------------------------------------------------------------

Post 53:
I'm building a php system with the Services/DAOs/Domain Models pattern, and now is the time to implement a caching system for the DAOs.
Would you use a decorator pattern, or maybe the strategy pattern?
What are the ups and downs of each one?
added requirement: Like I told in a comment answering to edalorzo I need to be able to use the DAOs without any caching at some moments. For the same method sometimes is acceptable to have cache, but some other times is not.


TF-IDF Scores:
able: 0.2258
implement: 0.2085
like: 0.1197
maybe: 0.2165
method: 0.1841
need: 0.1893
pattern: 0.6775
php: 0.2258
strategy: 0.2368
time: 0.1668
times: 0.2368
told: 0.2368
use: 0.2620

Termine con il punteggio TF-IDF più alto: pattern (0.6775)

----------------------------------------------------------------------------------------------------

Post 54:
We know that checking return values prevent our software from unexpected states. (You can see CWE definition.)
But, we are sometimes sure about the return value. For example:
bool calculateSquareRootReturnFalseIfInputIsNegative(float input, float& output);
float calculateHypotenuse(float a, float b){
  float c2 = (a*a) + (b*b);
  float c;
  calculateSquareRootReturnFalseIfInputIsNegative(c2, c);
  return c;
}

The local variable c2 is always positive. So, calculateSquareRootReturnFalseIfInputIsNegative() always returns true. I shouldn't check its return value.
Finally, Is "check all return values not already known by caller" a valid idiom?
Thanks..


TF-IDF Scores:
check: 0.3217
checking: 0.1609
definition: 0.1609
example: 0.1006
input: 0.1522
know: 0.0915
local: 0.1522
prevent: 0.1609
return: 0.6960
returns: 0.1609
software: 0.1452
sure: 0.1522
thanks: 0.1609
true: 0.1609
valid: 0.1522
value: 0.3217
variable: 0.1452

Termine con il punteggio TF-IDF più alto: return (0.6960)

----------------------------------------------------------------------------------------------------

Post 55:
This is a really simple question but oddly, I'm finding it difficult to get a definite answer.... 
What do you do with fields? Is this valid?
/** 
 * Keeps track of all usernames in the system.
 */   
private List<String> usernames = new ArrayList<>();

Or is above ingnored by documentation tools, so would it be best to do something like:
 //Keeps track of all usernames in the system.   
private List<String> usernames = new ArrayList<>();

Since (from what I see), documentation only shows methods, constructors and classes, what do programmers usually do with fields?


TF-IDF Scores:
answer: 0.1497
best: 0.1836
classes: 0.1761
difficult: 0.1761
fields: 0.3850
like: 0.0973
list: 0.3390
methods: 0.1638
new: 0.2597
private: 0.4069
programmers: 0.1695
question: 0.1326
really: 0.1586
simple: 0.1761
string: 0.3672
tools: 0.2034
usually: 0.1836
valid: 0.1925

Termine con il punteggio TF-IDF più alto: private (0.4069)

----------------------------------------------------------------------------------------------------

Post 56:
I joined a project were we sell services for different providers through web, iOS and android apps. I am working on iOS. I was ask to display a purchase form via a web view and react by what is entered natively. I do so by intercepting the network communication but as you can imagine it is slow, error prone and just kind of stupid. 
I ask why it has to be done in this way, why I just cannot get the data and render the form myself natively, and I was told that soon also the android app will adapt this feature and as the form can slightly change for each providers that would be the easiest approach.   
While I agree that it is easier to decide on the server which fields are needed for each call, I don't think that the logical conclusion is to request a html form and create hackish interception around it. 
Before the implementation for android starts I want to propose another option:
Instead of rendering a website I want the server to create a JSON to describe the form, that than can easily be used at client-side to create the form. Basically a server generated view model.
My question is: is there some "standard" already how such a JSON should look like?
I imagine it something like this
{
  "form": {
    "action": {
      "action-name": "Send",
      "method": "POST",
      "target": "https://api.mydomain.com/purchase/"
    },
    "fieldsets": [{
      "fieldset-name": "personal information",
      "fields": [{
        "field": {
          "kind": "text-field",
          "field-name": "First Name",
          "validator": {
            "validator-name": "regex-validator",
            "arguments": [{
              "regex": ".{3:}"
            }]
          },
          "optional": false
        }
      }, {
        "field": {
          "kind": "text-field",
          "field-name": "Last Name",
          "validator": {
            "validator-name": "regex-validator",
            "arguments": [{
              "regex": ".{3:}"
            }]
          },
          "optional": false
        }
      }, {
        "field": {
          "kind": "text-field",
          "field-name": "Email",
          "validator": {
            "validator-name": "email-validator"
          },
          "optional": false
        }
      }, {
        "field": {
          "kind": "text-field",
          "field-name": "Confirm Email",
          "validator": {
            "validator-name": "email-validator"
          },
          "optional": false
        }
      }]
    }, {
      "fieldset-name": "Credit Card Data",
      "fields": [{
        "field": {
          "kind": "text-field",
          "field-name": "Credit Card Number",
          "validator": {
            "validator-name": "creditcard-number-validator"
          },
          "optional": false
        }
      }]
    }]
  }
}



TF-IDF Scores:
api: 0.0488
app: 0.0462
approach: 0.0406
apps: 0.0488
arguments: 0.0923
ask: 0.0880
change: 0.0422
client: 0.0462
com: 0.0488
create: 0.1048
data: 0.0738
decide: 0.0462
different: 0.0440
don: 0.0359
easier: 0.0440
easily: 0.0440
email: 0.1951
error: 0.0488
feature: 0.0440
field: 0.7316
fields: 0.1385
form: 0.3414
generated: 0.0488
html: 0.0488
implementation: 0.0462
information: 0.0422
instead: 0.0440
just: 0.0598
kind: 0.2926
like: 0.0466
look: 0.0462
method: 0.0359
model: 0.0462
needed: 0.0488
number: 0.0923
option: 0.0462
post: 0.0440
project: 0.0341
prone: 0.0488
question: 0.0318
request: 0.0488
server: 0.1385
target: 0.0488
text: 0.2439
think: 0.0341
told: 0.0462
used: 0.0369
want: 0.0610
way: 0.0311
web: 0.0785
website: 0.0488
working: 0.0406

Termine con il punteggio TF-IDF più alto: field (0.7316)

----------------------------------------------------------------------------------------------------

Post 57:
I am just learning Java, and am not a practicing programmer.  
The book I am following says that when overriding a method, the argument types must be the same, but the return types can be polymorphically compatible. 
My question is why can't the arguments passed to the overriding method not be a subclass type of the super-type expected? 
In the overloaded method, whatever method I call on the object is guaranteed to be defined on the object. 

Notes on suggested duplicates:
The first suggestion appears to be about class hierarchy and where to put functionality.  My question is more focused on why the language restriction exists.  
The second suggestion explains how to do what I'm asking, but not why it has to be done that way.  My question is focused on the why.


TF-IDF Scores:
argument: 0.1926
arguments: 0.1823
asking: 0.1823
class: 0.1284
following: 0.1605
java: 0.1417
just: 0.1181
language: 0.1284
learning: 0.1739
method: 0.5669
object: 0.3210
programmer: 0.1823
question: 0.3768
return: 0.1667
second: 0.1667
type: 0.3210
way: 0.1229

Termine con il punteggio TF-IDF più alto: method (0.5669)

----------------------------------------------------------------------------------------------------

Post 58:
I have Student and Group entities. Student can have many groups and Group can have many students too. so in database I should have middle class and change many-to-many relation to one-to-many and many-to-one.
My question is how should I design class diagram in oop?
If middle table does not have any extra field(just student_id and group_id) then I think no middle class is need in oop, is this true or not?


TF-IDF Scores:
change: 0.2569
class: 0.5936
database: 0.2569
design: 0.2314
does: 0.2074
extra: 0.2809
field: 0.2968
just: 0.1819
need: 0.2246
question: 0.1935
think: 0.2074
true: 0.2968

Termine con il punteggio TF-IDF più alto: class (0.5936)

----------------------------------------------------------------------------------------------------

Post 59:
I have a set of classes that represent different objects (tables in a database):
class ObjA:
    # some class specific attributes and methods

    def refresh(self):
        # implementation
        pass

class ObjB:
    # some class specific attributes and methods

    def refresh(self):
        # implementation
        pass

and they all have a refresh method. Now I have a task manager (like Luigi) that is used to call the refresh method on each class and the definitions look like:
from somewhere import ObjA, ObjB


class RefreshObjA(TaskManager):
    def run(self):
        ObjA.refresh()


class RefreshObjB(TaskManager):
    def run(self):
        ObjB.refresh()

TaskManager here is a parent class provided by the manager module. As you can see, the class definitions all have an identical pattern and naming convention, and it stands to reason that these can be dynamically generated as generateRefreshClasses([ObjA, ObjB, ...]). 
However, I have been resisting this and writing each one out explicitly because

All the information re: the classes is available when the code is written i.e. I'm not reliant on any external/user generated input which is probably where dynamic generation is useful. This use is purely to save space/keystrokes/repetition.
One doesn't know if some ObjX might need modifications/additional requirements and will need to be careful to remove it from the dynamic generator, lest it is overwritten. 
It is harder to reason where (as in file and line no:) an execution error occurs if the code is dynamically generated. 
These classes might be imported elsewhere in the code base and I lose out on the static inspection based checking provided by the IDE.

Are these valid reasons to continue to individually define the classes (there might be about 20 or so of them) or are there other benefits to dynamic generation that might make these concerns small in comparison? Would dynamic generation of classes be considered acceptable/good practice in such an application?


TF-IDF Scores:
application: 0.0905
attributes: 0.1809
available: 0.0905
based: 0.0856
benefits: 0.0816
checking: 0.0905
class: 0.5426
classes: 0.3914
code: 0.1336
considered: 0.0816
database: 0.0783
different: 0.0816
error: 0.0905
file: 0.0856
generated: 0.2714
good: 0.0666
implementation: 0.1712
information: 0.0783
input: 0.0856
know: 0.0515
like: 0.0865
look: 0.0856
make: 0.0728
method: 0.1331
methods: 0.1456
need: 0.1369
objects: 0.0754
pass: 0.1712
pattern: 0.0816
practice: 0.0905
reason: 0.1712
reasons: 0.0856
remove: 0.0783
represent: 0.0905
requirements: 0.0816
run: 0.1712
set: 0.0666
small: 0.0816
specific: 0.1566
static: 0.0856
task: 0.0905
use: 0.0474
used: 0.0684
useful: 0.0783
user: 0.0728
valid: 0.0856
writing: 0.0856
written: 0.0783

Termine con il punteggio TF-IDF più alto: class (0.5426)

----------------------------------------------------------------------------------------------------

Post 60:
I have two designs which achieve the same result.
-------Design A


MainClass has a List and two methods. The methods create an autonomous object and is added to the list. The reason for the superclass, B and C are similar and I will be adding more subclasses. Furthermore, I can take advantage of polymorphism later on.
-------Design B


mainclass has two methods. The method creates a aggregation link with MiddleClass and directly calls Mainclass methods - which returns an autonomous object of class b/c.
Unlikely A, B benefits from a higher degree of (loose)coupling from the MainClass, where the MiddleClass acts handles information from the inheritance hierarchy to the mainclass - And of course, the more subclasses I add, the mainclass will not have any additional links to the hierarchy, instead, it's all dealt with by middleclass.
However, I am not sure if I am just over-engineering the design or if it's a better design. What do you guys think is the better design and why?


TF-IDF Scores:
add: 0.1264
benefits: 0.1318
better: 0.2434
class: 0.0973
course: 0.1318
create: 0.1046
design: 0.5693
higher: 0.1460
information: 0.1264
instead: 0.1318
just: 0.0895
later: 0.1460
list: 0.2434
method: 0.1075
methods: 0.4702
object: 0.2434
reason: 0.1382
result: 0.1460
returns: 0.1460
similar: 0.1382
sure: 0.1382
think: 0.1020

Termine con il punteggio TF-IDF più alto: design (0.5693)

----------------------------------------------------------------------------------------------------

Post 61:
I have a system with a structure like this:

The ConcreteWriteable is caching the ReadOnlyWrapper.
This is a similar system to what .Net's System.Array uses for its Array.AsReadOnly<T>(T[] array) method (ignoring for the moment that System.Array's AsReadOnly is static). However looking at the code for System.Array at reference source, System.Array.AsReadOnly is returning a new wrapper each time, whereas I'm creating the wrapper at the same time as the ConcreteWriteable and caching it, then returning the same one each time.
This got me thinking, is there some reason why I shouldn't be doing this? Is there some reason why creating a new wrapper each time is more desirable than returning the same wrapper (bearing in mind that the wrapper cannot possibly change the ConcreteWriteable and is indeed a wrapper, not a copy)?


TF-IDF Scores:
array: 0.7139
change: 0.1141
code: 0.0649
copy: 0.1318
creating: 0.2122
doing: 0.1248
got: 0.1318
like: 0.0630
looking: 0.1318
method: 0.0970
moment: 0.1318
net: 0.1099
new: 0.1683
possibly: 0.1318
reason: 0.2495
reference: 0.1318
similar: 0.1248
source: 0.1190
static: 0.1248
thinking: 0.1061
time: 0.3515
uses: 0.1099

Termine con il punteggio TF-IDF più alto: array (0.7139)

----------------------------------------------------------------------------------------------------

Post 62:
I was reading about copy constructors for structs and i found this example:
#include <iostream>
#include <string>
using namespace std;

struct SomeData {
    int * pd;
    string id;
    SomeData(SomeData & ref) {
        cout << "Copy Constructor called" << endl;
        pd = new int (*ref.pd);
        id = "Copy Constructed";
    }
    SomeData(string name) {
        pd = new int(0);
        id = name;
        cout << "Constructor for " << id << endl;
    };
    ~SomeData() {
        cout << "Destructor for " << id << endl;
        delete pd;
    }
};

int main() {
    SomeData s("First");
    *s.pd = 9;
    SomeData s2=s;
    cout << *s2.pd << endl;
    return 0;
}

in the main, the member pd of SomeData is accessed using the dereference,
but why is that, isn't the correct way is 
s->pd=9;

why was it written like that in the example?


TF-IDF Scores:
called: 0.1010
constructor: 0.2118
copy: 0.3357
correct: 0.0968
example: 0.1399
id: 0.5596
include: 0.2118
int: 0.4477
isn: 0.1059
like: 0.0535
main: 0.2238
member: 0.1119
new: 0.1428
reading: 0.1119
return: 0.0968
string: 0.3030
using: 0.1399
way: 0.0714
written: 0.0968

Termine con il punteggio TF-IDF più alto: id (0.5596)

----------------------------------------------------------------------------------------------------

Post 63:
I'm trying to make a service that's polymorphic based upon what mode is specified in the URL. If the char param in the route is set to 'p', I want to use a PresentMode service. If the char param is set to 'n', I want to use a NoteMode service. Each of these present the same interface, but I want to choose one at a time.
So far the best solution I've come up with is something like this:
var mod = angular.module('modeModule', []);

mod.service('modeService', function($routeParams, presentMode, noteMode) {
  if ($routeParams.char === 'p') {
    this.mode = presentMode;
  } else if ($routeParams.char === 'n') {
    this.mode = noteMode;
  }
}

mod.service('presentMode', function() {});
mod.service('noteMode', function() {});

This works, but it requires that I append .mode to the end of every access (eg modeService.mode.blah(). Is there a better way to do this?


TF-IDF Scores:
access: 0.1806
based: 0.1894
best: 0.1806
better: 0.1667
choose: 0.2001
come: 0.1667
end: 0.1894
function: 0.5002
interface: 0.1732
like: 0.0957
make: 0.1611
requires: 0.2001
set: 0.2944
solution: 0.1667
time: 0.1334
trying: 0.1732
use: 0.2095
ve: 0.1514
want: 0.3753
way: 0.1277
works: 0.1611

Termine con il punteggio TF-IDF più alto: function (0.5002)

----------------------------------------------------------------------------------------------------

Post 64:
It is a Design Problem which I am listing out here.
I have different set of business operations that are carried out for different business entities.
Operations: 

Operation A
Operation B
Operation C

For Example I have an Entity A. Entity A's data could be in parts, for example:

Entity A's (Jan Data)
Entity B's (Feb Data) etc.

To complete a Use Case all Operations (A,B,C) should be performed. Now these operations are performed and are independent of each other and can be performed in parallel, the only condition is that they should be of different Entities. So Entity A can't have all the operations (A, B or C) executing in parallel. And these operations are running on server side.
How to scale this and provide a solution?
I am thinking of following solution and would like to have inputs from the community on this.
I am thinking of three Queues for operations which I mentioned above 

Queue A carrying out Operation A
Queue B carrying out Operation B
Queue C carrying out Operation C

And all the Consumers will be listening to these Queues.

Consumer A (or multiple consumers)
Consumer B (or multiple consumers)
Consumer C (or multiple consumers)

And my server would be load balanced, and I will be having a Single Message Queue containing these three queues.
So it is possible that I have 2 servers running and on every server there are for example 5 threads (Consumers) running, so there will be 10 instances of Consumer A running in parallel picking the data from the Message Queue A.
As I stated earlier that for the same entity A(that is the business use case which I have) all these operations (Operation A, Operation B and Operation C) can't be running in parallel, they should be only of them being executed.
So what I am thinking is to have a database entry for the Entity A and all the consumers must check whether there is a Database Entry for Entity A, 

if not then 

Make an entry to Database for Entity A
Go and execute the Operation
Remove the Entry from the Database for Entity A

if there is an entry in Database found

Enqueue the Data for Entity A again from the Queue where it was picked.


Is there any better solution possible for such a design problem?


TF-IDF Scores:
10: 0.0675
better: 0.0675
business: 0.2300
case: 0.1263
check: 0.0810
complete: 0.0731
data: 0.3065
database: 0.3505
design: 0.1263
different: 0.2193
example: 0.1519
execute: 0.0810
following: 0.0675
having: 0.0701
like: 0.0387
make: 0.0652
multiple: 0.2430
operations: 0.5848
possible: 0.1462
problem: 0.1192
remove: 0.0701
server: 0.2300
set: 0.0596
solution: 0.2025
thinking: 0.1956
use: 0.0848

Termine con il punteggio TF-IDF più alto: operations (0.5848)

----------------------------------------------------------------------------------------------------

Post 65:
When do you feel that you need a new class (maybe when you are developing or after development for refactoring purpose)? 
Maybe I can start from my existing variables and think how I can reorganize them into some classes! Please add more!


TF-IDF Scores:
add: 0.2537
class: 0.1954
classes: 0.2537
developing: 0.2537
development: 0.2442
existing: 0.2774
feel: 0.2931
maybe: 0.5073
need: 0.2218
new: 0.1871
purpose: 0.2931
start: 0.2774
think: 0.2048

Termine con il punteggio TF-IDF più alto: maybe (0.5073)

----------------------------------------------------------------------------------------------------

Post 66:
There are two ways to execute AsynTask, i.e., execute and executeOnExecutor. I already know that execute works serially and executeOnExecutor works in parallel. So my question is:

Which one to use? 
Which one is better? 
Can someone help me understand which one to use in which situation?



TF-IDF Scores:
better: 0.1994
execute: 0.7178
help: 0.2159
know: 0.1361
question: 0.1560
situation: 0.2264
understand: 0.2159
use: 0.2505
ways: 0.2159
works: 0.3852

Termine con il punteggio TF-IDF più alto: execute (0.7178)

----------------------------------------------------------------------------------------------------

Post 67:
We are developing a framework that has several layers and would be deployed in a multi-threaded environment. Each layer may have its own input/output data type. The top layer takes the input, performs some actions on the data and passes it to the next layer. Based on the output from next layer, the top layer would perform another set of operations on the data. Similar interactions happen between other layers.

There are two use cases that we did not incorporate in the original design:

Generating metrics over what operations each layer performs on the data.
The change in data in one layer affects the operations in another layer, the changes should be recorded and each layer should have capability to fetch the list of changes.

After some thinking we came up with two approaches to accommodate these requirements in the existing design:

Use observer pattern and let each layer report its changes. These changes can be then pulled by the layer that needs to use it.
Pros: 

Since we have already come up with a design for the framework and most of work is complete. This approach would not require significant changes to the existing design, if any. 

Cons: 

It becomes difficult to manage(record and report back) changes corresponding to each layer. 
There is a central class that aggregates all the data for each request. This class acts like a global variable. It has to be initialized and deleted by the top layer. Adding another top layer could be error prone.

Extend the current data classes using an interface equivalent to EventContainer. This way all the layers would record their changes and spit them in their output.
Pros: 

This approach is much more cleaner and extendable than observer pattern. 

Cons: 

It would require significant design changes. 
The concept of data having events as well merges two separate concerns into one and does not seem like a good idea. 



We would like to know if there is a design pattern or any other solution that solves this problem?
Which of the above two solutions should be given higher preference considering that we would want a flexible, extendable and cleaner solution?


TF-IDF Scores:
approach: 0.0845
approaches: 0.0507
based: 0.0480
cases: 0.0439
change: 0.0439
changes: 0.4055
class: 0.0676
classes: 0.0439
come: 0.0422
complete: 0.0457
concept: 0.0507
current: 0.0507
data: 0.3068
design: 0.2371
developing: 0.0439
did: 0.0457
difficult: 0.0439
does: 0.0354
environment: 0.0480
error: 0.0507
existing: 0.0959
framework: 0.0959
given: 0.0507
good: 0.0373
having: 0.0439
higher: 0.0507
idea: 0.0457
input: 0.0959
interface: 0.0439
know: 0.0288
layer: 0.7096
let: 0.0439
like: 0.0727
list: 0.0422
operations: 0.1372
pattern: 0.1372
perform: 0.0480
problem: 0.0373
prone: 0.0507
request: 0.0507
require: 0.0877
requirements: 0.0457
set: 0.0373
similar: 0.0480
solution: 0.0845
solutions: 0.0507
takes: 0.0480
thinking: 0.0408
type: 0.0422
use: 0.0796
using: 0.0317
variable: 0.0457
want: 0.0317
way: 0.0323
work: 0.0373

Termine con il punteggio TF-IDF più alto: layer (0.7096)

----------------------------------------------------------------------------------------------------

Post 68:
I really cannot decide what option is the best, I see plenty of down/upsides to both approaches and right now I'm undecided.
For example;
class DX11GBuffer
{
public:
    DX11GBuffer(ID3D11DevicePtr device, ID3D11DeviceContextPtr context, D3D11_TEXTURE2D_DESC backbufferTextureDesc);
    ~DX11GBuffer();

    void BindForGeometryStage(ID3D11DepthStencilViewPtr dsv);
    // ...
}

"dsv" is not owned by the object and thus passed every frame, but it could just aswell be passed as a argument in the constructor and stored seeing as it is a smart pointer.
I guess what I am getting at is I understand there are pitfalls for keeping too much state in an object but also passing so much as function arguments means a whole lot of ASCII. Likewise defining "argument objects", collection of data for functions, seems to add alot of overhead aswell if it is to be applied everywhere as a rule of thumb.
I guess I am looking some general guidelines on when to pass as argument vs when to store as member.


TF-IDF Scores:
add: 0.1407
approaches: 0.1626
argument: 0.4877
arguments: 0.1538
best: 0.1467
class: 0.1083
constructor: 0.1538
context: 0.1626
data: 0.1230
decide: 0.1538
example: 0.1016
function: 0.1355
general: 0.1467
getting: 0.1626
guess: 0.2934
just: 0.0996
looking: 0.1626
lot: 0.1538
member: 0.1626
object: 0.2709
objects: 0.1355
option: 0.1538
overhead: 0.1626
pass: 0.1538
public: 0.1626
really: 0.1267
right: 0.1308
rule: 0.1626
store: 0.1467
understand: 0.1467
vs: 0.1626

Termine con il punteggio TF-IDF più alto: argument (0.4877)

----------------------------------------------------------------------------------------------------

Post 69:
I'm practicing around building e-commerce asp.net applications that allows for users to register to the site and their user credentials are stored in a MySQL database. In my sample project the registration asks for the users username, password, full name, phone #, email, home address (for shipping of products purposes).
I know its good practice to store the user's password as a salted hash.  But is there any other info that should be stored the same way or not?  For example should the username also be stored as a salted hash or even encrypted?
I guess I'm just wondering what kinds of information is it ok to be stored in plain text in MySQL database for an asp.net web app? And which items are recommended to be stored in a salted hash? And which items should be stored using encryption?


TF-IDF Scores:
app: 0.1801
database: 0.3294
email: 0.1903
example: 0.1190
good: 0.1400
guess: 0.1718
information: 0.1647
items: 0.3603
just: 0.1167
know: 0.1083
net: 0.3172
practice: 0.1903
products: 0.1903
project: 0.1330
store: 0.1718
text: 0.1903
user: 0.3064
users: 0.3807
using: 0.1190
way: 0.1215
web: 0.1532
wondering: 0.1718

Termine con il punteggio TF-IDF più alto: users (0.3807)

----------------------------------------------------------------------------------------------------

Post 70:
I am curious why exception handling is a topic often ignored in Scala. Is it the goal of the language (or the style) to not rely on exception handling except for external input/code? 
I was hoping the style guide had some discussion on exception checking/handling. Is there a good reference that I could consult to understand if there are any differences in handling exceptions in Scala vs. languages I'm more used to (C++/C#/Java/Ruby/etc)?
Would someone with some Scala years under their belt be willing to write down guidelines for exception handling that are Scala specific? or is the answer simply "do as you would in Java"? What is "the functional way"?


TF-IDF Scores:
answer: 0.1698
checking: 0.2308
code: 0.1136
functional: 0.2308
good: 0.1698
input: 0.2184
java: 0.3396
language: 0.1538
languages: 0.2184
reference: 0.2308
ruby: 0.2308
simply: 0.2184
specific: 0.1997
style: 0.4616
understand: 0.2083
used: 0.1746
vs: 0.2308
way: 0.1473
write: 0.1799

Termine con il punteggio TF-IDF più alto: style (0.4616)

----------------------------------------------------------------------------------------------------

Post 71:
I'm familiar with the notion in c++ of the rule of 3, however since the release of C++11 I've seen some sources suggesting it should be extended to a "rule of 5", I.e. the move constructor and move assignment operator should also be implemented whenever the others are. What is the rationale behind such a rule? My understanding is that in most cases implementation of move semantics is only necessary as an optimization - am I wrong about this, or is the so-called rule of five about optimizing my code (and, therefore, substantially less important than the rule of 3, which is about avoiding pitfalls that can lead to unexpected behaviors)?


TF-IDF Scores:
called: 0.1629
cases: 0.1562
code: 0.0889
constructor: 0.1709
implementation: 0.1709
implemented: 0.1629
rule: 0.9027
seen: 0.1504
ve: 0.1366

Termine con il punteggio TF-IDF più alto: rule (0.9027)

----------------------------------------------------------------------------------------------------

Post 72:
I am still pretty new to programming, but my first app was recently approved and is now for sale on the App Store. My app uses Core Data and is written in Swift. After some initial difficulties, I decide to write the app without unit tests. Now I'd like to implement unit tests to prevent regression.
My managed objects are created inside class methods in my NSManagedObject subclasses and use a global variable "context" which I declare in AppDelegate to store the NSManagedObjectContext created in Apple's default code. I know that global variables are generally discouraged but this approach makes the most sense to me, is easy to write, and hasn't let to any bugs or other issues inside the app itself. Unfortunately, this makes it difficult to unit test. I've tried several different approaches to creating a Core Data stack inside my test target, but I can't seem to get anything to work without rewriting lots of my app code. I really don't want to do that just to make it testable. I've considered using frameworks such as Quick/Nimble or Magical Record but I don't see how that would help my problem.
I did figure out a workaround, but I'm curious if people think this is a bad idea: I created a class in my primary target (non testing) called TestingClass. In my first ViewController's viewDidAppear, I call the startTests method. TestingClass is written in strait Swift with no testing frameworks. I have several if statements which are supposed to be false. If they are true they add a string to an array. When the tests are complete, if the array count is > 0, it prints out the contents and aborts.
I am planning on using this until my update is ready to ship. When it is, I will disable the TestingClass and remove my call to it. I'm curious if anyone has ever done anything like this. Should I just figure out a way to do tests the "right" way?


TF-IDF Scores:
add: 0.0727
app: 0.4767
approach: 0.0700
approaches: 0.0840
array: 0.1515
bad: 0.0795
bugs: 0.0840
called: 0.0758
class: 0.1119
code: 0.0827
complete: 0.0758
considered: 0.0758
context: 0.0840
core: 0.1679
creating: 0.0676
data: 0.1271
decide: 0.0795
did: 0.0758
different: 0.0758
difficult: 0.0727
don: 0.1235
easy: 0.0840
help: 0.0758
idea: 0.0758
implement: 0.0700
inside: 0.2519
issues: 0.0840
just: 0.1029
know: 0.0478
let: 0.0727
like: 0.0803
make: 0.0676
makes: 0.1453
managed: 0.0840
method: 0.0618
methods: 0.0676
new: 0.0536
non: 0.0727
objects: 0.0700
people: 0.0655
pretty: 0.0758
prevent: 0.0840
problem: 0.0618
programming: 0.0515
really: 0.0655
recently: 0.0758
remove: 0.0727
right: 0.0676
sense: 0.0795
stack: 0.0840
store: 0.1515
string: 0.0758
supposed: 0.0795
target: 0.1679
test: 0.1399
testing: 0.1679
tests: 0.2906
think: 0.0587
true: 0.0840
unit: 0.2384
use: 0.0440
uses: 0.0700
using: 0.1050
variable: 0.0758
ve: 0.1271
want: 0.0525
way: 0.1072
work: 0.0618
write: 0.1309
written: 0.1453

Termine con il punteggio TF-IDF più alto: app (0.4767)

----------------------------------------------------------------------------------------------------

Post 73:
I am having some problems trying to figure out when to use a factory or to wrapper class. This question is slightly geared towards C# I guess, so I'm not sure if this is the correct place to ask.
Say there is a library that exposes an interface called IStackExchangeClient, and multiple differing implementations of that interface (private implementations that clients will not know about), HttpStackExchangeClient, UdpStackExchangeClient.
We can allow the object creation of the interface through a factory, like StackExchangeClientFactory.Create(), or we can wrap it up in another class like StackExchangeClient that internally does the same thing, but simply proxies.
In the second instance, clients can write new StackExchangeClient() which feels much more natural to me. So my question is, when do I choose one or the other? What are some of the considerations that I should be taking in?
I've thought hard about it and I can't choose between one style or the other, but clearly some parts of the .NET framework use factories, and some parts don't, even when there are multiple underlying implementations of its interface.
Thank you!


TF-IDF Scores:
ask: 0.1365
called: 0.1365
choose: 0.3024
class: 0.2016
correct: 0.1308
create: 0.1083
does: 0.1056
don: 0.1112
framework: 0.1431
guess: 0.1365
having: 0.1308
interface: 0.5234
know: 0.0860
library: 0.1512
like: 0.1446
multiple: 0.3024
net: 0.1260
new: 0.0965
object: 0.1260
place: 0.1512
private: 0.1512
question: 0.1971
say: 0.1179
second: 0.1308
simply: 0.1431
style: 0.1512
sure: 0.1431
thing: 0.1260
trying: 0.1308
use: 0.1583
ve: 0.1144
write: 0.1179

Termine con il punteggio TF-IDF più alto: interface (0.5234)

----------------------------------------------------------------------------------------------------

Post 74:
Given are two sorted arrays a, b of type T with size n and m. I am looking for an algorithm that merges the two arrays into a new array (of maximum size n+m). 
If you have a cheap comparison operation, this is pretty simple. Just take from the array with the lowest first element until one or both arrays are completely traversed, then add the remaining elements. Something like this https://stackoverflow.com/questions/5958169/how-to-merge-two-sorted-arrays-into-a-sorted-array
However, the situation changes when comparing two elements is much more expensive than copying an element from the source array to the target array. For example you might have an array of large arbitrary precision integers, or strings, where a comparison can be quite expensive. Just assume that creating arrays and copying elements is free, and the only thing that costs is comparing elements.
In this case, you want to merge the two arrays with a minimum number of element comparisons. Here are some examples where you should be able to do much better than the simple merge algorithm:
a = [1,2,3,4, ... 1000]
b = [1001,1002,1003,1004, ... 2000]

Or
a = [1,2,3,4, ... 1000]
b = [0,100,200, ... 1000]

There are some cases where the simple merge algorithm will be optimal, like
a = [1,3,5,7,9,....,999]
b = [2,4,6,8,10,....,1000]

So the algorithm should ideally gracefully degrade and perform a maximum of n+m-1 comparisons in case the arrays are interleaved, or at least not be significantly worse.
One thing that should do pretty well for lists with a large size difference would be to use binary search to insert the elements of the smaller array into the larger array. But that won't degrade gracefully in case both lists are of the same size and interleaved.
The only thing available for the elements is a (total) ordering function, so any scheme that makes comparisons cheaper is not possible.
Any ideas?
I have come up with this bit in Scala. I believe it is optimal regarding the number of comparisons, but it is beyond my ability to prove it. At least it is much simpler than the things I have found in the literature.
And since the original posting, I wrote a blog post about how this works.


TF-IDF Scores:
10: 0.0660
100: 0.0792
ability: 0.0792
able: 0.0714
add: 0.0685
algorithm: 0.3167
array: 0.5716
available: 0.0792
believe: 0.0792
better: 0.0660
bit: 0.0714
blog: 0.0792
case: 0.1852
cases: 0.0685
changes: 0.0792
com: 0.0792
come: 0.0660
completely: 0.0749
creating: 0.0637
element: 0.2375
example: 0.0495
examples: 0.0792
function: 0.0660
given: 0.0792
just: 0.0970
large: 0.1429
like: 0.0757
lists: 0.1583
looking: 0.0792
makes: 0.0685
new: 0.0505
number: 0.1498
perform: 0.0749
possible: 0.0714
post: 0.0714
pretty: 0.1429
prove: 0.0792
questions: 0.0685
quite: 0.0660
simple: 0.2055
situation: 0.0749
size: 0.2997
source: 0.0714
stackoverflow: 0.0792
strings: 0.0792
target: 0.0792
thing: 0.1979
things: 0.0637
type: 0.0660
use: 0.0414
want: 0.0495
won: 0.0749
works: 0.0637
wrote: 0.0749

Termine con il punteggio TF-IDF più alto: array (0.5716)

----------------------------------------------------------------------------------------------------

Post 75:
In my school management system I have this partial  class diagram:

1- In one use case student want to see his schedule of classes in week. this is what i suppose to do:
get student object from session and call method getSchedule() on that and it will give me schedule(this method calls StudentCourse, Course for getting schedule).
Is this good place to put getSchedule() method or I should place it elsewhere?
..................................................
2- In another use class student's parent want to see his child class schedule, I plan to do something like this:
Because I have some use cases that parent want to see some other student information(course mark...), I create interface StudentParentInterface that have method getSchedule() and other methods and student implement StudentParentInterface, then parent has reference to StudentParentInterface not student obj directly.
parent call getSchedule() method on StudentParentInterface, is this correct?


TF-IDF Scores:
case: 0.1199
cases: 0.1331
class: 0.3076
classes: 0.1331
correct: 0.1331
course: 0.2777
create: 0.1102
getting: 0.1538
good: 0.1132
implement: 0.1282
information: 0.1331
interface: 0.1331
like: 0.0736
management: 0.1388
method: 0.5659
methods: 0.1238
object: 0.1282
place: 0.3077
reference: 0.1538
suppose: 0.1538
use: 0.2416
want: 0.2885

Termine con il punteggio TF-IDF più alto: method (0.5659)

----------------------------------------------------------------------------------------------------

Post 76:
Recently ive been consumed by creating my own simple CPU architecture that at some point could be easily implemented in hardware (No FPGA, but actual Logic Gate circuits). Naturally to fulfill this requirement i went with a simple 4 Bit CPU, with a 4kB program space and 256 Byte RAM. 
It supports all the fundamental operations such as ADD, Subtract, AND, LOAD, STORE etc. Before i start committing this to hardware i want to develop a moderately powerful software stack that could compile the a C/ C like language for the architecture, so the cpu could be programmed using a high level language. Currently i have written a working assembler in VB.NET, but now im stuck on how to approach the final goal of a working compiler. 
Specifically i have the following questions: 
What should be my next step, and how should i approach writing a compiler?
Even though a 4 Bit CPU is simple, it is not very useful as it cannot handle large calculations at once, thus my final goal would be abstract this inability by developing a software stack that to the user would be like programming a 16 bit (or larger) CPU. Currently i manually write assembly that can span larger numbers over multiple registers and perform calculations between them, but ultimately what part of the software stack deals with handling numbers and calculations which are greater than the size of the physical registers?
What part of the software stack deals with Subroutine calling etc?
Please let me know if i need to clarify anything. 


TF-IDF Scores:
actual: 0.1115
add: 0.0964
approach: 0.1857
bit: 0.3017
compile: 0.1115
creating: 0.0897
currently: 0.2012
develop: 0.1115
developing: 0.0964
easily: 0.1006
following: 0.0929
high: 0.1115
implemented: 0.1006
know: 0.0634
language: 0.1486
large: 0.1006
let: 0.0964
level: 0.1115
like: 0.1066
multiple: 0.1115
need: 0.0843
net: 0.0929
operations: 0.1006
perform: 0.1055
point: 0.1055
program: 0.0929
programming: 0.0683
questions: 0.0964
recently: 0.1006
simple: 0.2893
size: 0.1055
software: 0.4023
stack: 0.4458
start: 0.1055
store: 0.1006
useful: 0.0964
user: 0.0897
using: 0.0697
want: 0.0697
working: 0.1857
write: 0.0869
writing: 0.1055
written: 0.0964

Termine con il punteggio TF-IDF più alto: stack (0.4458)

----------------------------------------------------------------------------------------------------

Post 77:
I currently have one separate project for my models, and one separate project for a API application that consumes this model. The intention of the separation is to avoid any outgoing dependencies from the core model to consumers like the API project, enabling me to have a nice layered structure of responsibility.
In this case though, the API can not use the model as-is, as it requires the classes to be decorated with attributes related to the serialization of the data. Since this is exactly the kind of dependencies from the model that I want to avoid, I can only see my only option being intermediate DTO's that the core model gets mapped upon.
This preserves the decoupling of the model to it's consumers, but obviously introduces some nasty redundancies where I not only manually have to create all the DTO's, but also maintain them to match an eventually changing core model. Even if AutoMapper can take care of the actual mapping.
This feels quite nasty, but since the model project is using an EDMX to define and auto generate code for the model, I'm thinking to change the t4-templates to generate an interface for every class, and using this in the consumer to put a contract on the DTO's and even let the IDE auto-implement them from the interface.
This seems quite reasonable for my, but I wonder if this would be considered a good approach for enterprise-level projects, or if I'm missing something. I guess that the extra layer of intermediate DTO's even could be seen as a good artefact in concreting a separation of the core model contract and the API contract. And if so, maybe the use of model-generated interface would conflict with this separation, even if it has some neat benefits? But in that case, maybe it would be a productive strategy to use the auto-generated interfaces where we do have an 1-to-1 mapping, and create a separate set of DTO's where the contracts actually differs?
So to be clear, I'm striving for a well partitioned and coherent architecture in order to increase general static code qualities like maintainability and cohesion. Above I gave a specific example of the partitioning of the core model from it's consumers that I try to do while rationalizing about it, and my question is whether the approach suggested could generally be considered good or not. Or could this be too specific to fit any generalized answer?


TF-IDF Scores:
actual: 0.0626
actually: 0.0565
answer: 0.0460
api: 0.2503
application: 0.0626
approach: 0.1043
attributes: 0.0626
avoid: 0.1252
benefits: 0.0565
case: 0.0976
change: 0.0542
class: 0.0417
classes: 0.0542
code: 0.0616
considered: 0.1129
core: 0.3129
create: 0.0897
currently: 0.0565
data: 0.0473
differs: 0.0626
example: 0.0391
extra: 0.0592
general: 0.0565
generate: 0.1252
generated: 0.1252
good: 0.1381
guess: 0.0565
implement: 0.0521
interface: 0.1625
kind: 0.0626
layer: 0.0626
let: 0.0542
level: 0.0626
like: 0.0599
maybe: 0.1083
model: 0.7106
nice: 0.0592
option: 0.0592
productive: 0.0626
project: 0.1749
projects: 0.0542
question: 0.0408
quite: 0.1043
reasonable: 0.0626
related: 0.0626
requires: 0.0626
seen: 0.0521
set: 0.0460
specific: 0.1083
static: 0.0592
strategy: 0.0592
thinking: 0.0504
try: 0.0592
use: 0.0983
using: 0.0782
want: 0.0391

Termine con il punteggio TF-IDF più alto: model (0.7106)

----------------------------------------------------------------------------------------------------

Post 78:
I'm currently revisiting some code I wrote in sass when I was learning it and I came upon a particular issue. I was able to write the code in 2 ways, with the first being the more readable code and the second being the shortest code when compiled to css. I was wondering whether it's a good thing to sacrifice some readability for smaller compiled file sizes.
In the current example, option 1 takes up about 60% less characters compiled in css. At 12 colums, the first option uses ~750 less characters than the second option. This is actually pretty significant.
The example is pretty straightforward, but when extending the code readability of the sass file can become more complicated. Is it worth sacrificing this for the smaller compiled file?
Option 1
// Create all columns
@for $i from 1 through $column_amount {
  .col-#{$i}-lg, .col-#{$i}-md, .col-#{$i}-sm {
    width: $i * $col-size;
  }
}

// At medium screen and below set all large columns to 100%
@media all and (max-width: $screen-medium-max) {
  @for $i from 1 through $column_amount {
    .col-#{$i}-lg {
      width: 100%;
    }
  }
}

// At small screen and below set all medium columns to 100%
@media all and (max-width: $screen-small-max) {
  @for $i from 1 through $column_amount {
    .col-#{$i}-md {
      width: 100%;
    }
  }
}

Option 2
// Creating the columns
@for $i from 1 through $column_amount {
  .col-#{$i}-lg, .col-#{$i}-md, .col-#{$i}-sm {
    width: $i * $col-size;
  }

  // At medium screen and below set all large columns to 100%
  @media all and (max-width: $screen-medium-max) {
    .col-#{$i}-lg {
      width: 100%;
    }
  }

  // At small screen and below set all medium columns to 100%
  @media all and (max-width: $screen-small-max) {
    .col-#{$i}-md {
      width: 100%;
    }
  }
}

If any extension exists that does this for me, it'd be nice to know about it, but it won't answer the question


TF-IDF Scores:
100: 0.6391
able: 0.0721
actually: 0.0721
answer: 0.0588
characters: 0.1598
code: 0.1967
create: 0.0572
creating: 0.0643
current: 0.0799
currently: 0.0721
does: 0.0558
example: 0.0999
file: 0.2268
good: 0.0588
issue: 0.0756
know: 0.0455
large: 0.1442
learning: 0.0721
nice: 0.0756
option: 0.3780
pretty: 0.1442
question: 0.0521
second: 0.1383
set: 0.2351
size: 0.1512
small: 0.2884
takes: 0.0756
thing: 0.0666
uses: 0.0666
ways: 0.0721
won: 0.0756
wondering: 0.0721
write: 0.0623
wrote: 0.0756

Termine con il punteggio TF-IDF più alto: 100 (0.6391)

----------------------------------------------------------------------------------------------------

Post 79:
I have to implement the AI for Abalone game and I'm wondering what is the best way to represent the board logic using Java without wasting too much resources in all checks and updates routines involved.
Is better use various lists? A matrix of Cell objects? 
Any suggestion?



TF-IDF Scores:
best: 0.3128
better: 0.2888
game: 0.3466
implement: 0.2888
java: 0.2550
lists: 0.3466
objects: 0.2888
represent: 0.3466
use: 0.1814
using: 0.2167
way: 0.2212
wondering: 0.3128

Termine con il punteggio TF-IDF più alto: game (0.3466)

----------------------------------------------------------------------------------------------------

Post 80:
With some platforms, like LinkedIn, you can see a list of all sessions where you are logged in, and you can even log them out on a distance.

How would you implement something like that? I'm not talking about specific code, but more about general flow.
I am using ASP.NET myself, but I think a general approach would be more useful for others.
Right now I'm thinking about something like this:

User logs in, validate email/password combination
Generate GUID, save to database together with UserId and Browser information.
Put Cookie in a serverside-read-only cookie.
When user wants to sign out from a distance, we remove the GUID in the database.

One of the security issues here would be that the GUID can get intercepted, and an attacker could use this to login.
So how to do this properly?


TF-IDF Scores:
approach: 0.1703
code: 0.1007
database: 0.3538
email: 0.2044
general: 0.3690
generate: 0.2044
implement: 0.1703
information: 0.1769
issues: 0.2044
like: 0.2933
list: 0.1703
net: 0.1703
read: 0.1769
remove: 0.1769
right: 0.1645
specific: 0.1769
think: 0.1428
thinking: 0.1645
use: 0.1070
useful: 0.1769
user: 0.3291
using: 0.1278
wants: 0.1845

Termine con il punteggio TF-IDF più alto: general (0.3690)

----------------------------------------------------------------------------------------------------

Post 81:
The tutorials I find to setup OS-X for web developer programming (installing x-code ruby js cocoapods sql c asm etc) leave out if it should be done from an admin account, or standard (managed) user.
Some methods I've seen used: Setup dev environment from admin account, then change admin to managed user. Or install dev environment from managed user, using sudo or otherwise editing settings to get things to install.
What's the consensus for using Terminal from a managed & parental controlled account? What's the correct procedural way to setup a fresh 10.10 install? Thanks.


TF-IDF Scores:
10: 0.2413
account: 0.4110
change: 0.1253
code: 0.0713
correct: 0.1253
developer: 0.1206
environment: 0.2740
leave: 0.1370
managed: 0.5791
methods: 0.1165
programming: 0.0887
ruby: 0.1448
seen: 0.1206
thanks: 0.1448
things: 0.1165
used: 0.1095
user: 0.3496
using: 0.1810
ve: 0.1095
way: 0.0924
web: 0.1165

Termine con il punteggio TF-IDF più alto: managed (0.5791)

----------------------------------------------------------------------------------------------------

Post 82:
So OOP is about breaking down functionality, making each class responsible for one thing etc. But let's take the example where an object is using another object. First thing that comes to mind "composition, of course!".
I have 2 questions:
Question 1:
Suppose you have a Shop that is loading products from a file using a ProductsLoader, which in term uses a ProductsFileReader. You design the API so that the code is simple and readable and specialized. Therefore, you are able to do this:
    std::shared_ptr<Shop> shop = std::shared_ptr<Shop> (new Shop());
    shop->LoadProducts();
    // other code

In LoadProducts you do this:
    m_productsLoader.LoadAllProducts();
    std::shared_ptr<Products> products = m_productsLoader.GetAllProducts();
    this->setProducts(products);

In LoadAllProducts() you do this:
    prodFileReader.OpenProductsFile();
    prodFileReader.LoadDescriptionsFromFile();
    prodFileReader.CloseProductsFile();

    // create products from descriptions
    std::shared_ptr<Descriptions> descriptions = prodFileReader.GetProductsDescriptions();
    this->createProductsFromDescriptions(descriptions);

And now here is the question: Do you keep ProductsLoader m_productsLoader as a Shop member? The same for ProductsFileReader: should it be a member of ProductsLoader? The alternative for this is creating these objects on the stack: when your functions are using one of them, you just declare, initialize etc them in the function and they get destructed when the function exits. Does this defy the purpose of OOP?
Question 2:
Let's say you decided to keep them as members. How do you know wheter you should keep the whole object as a member, or you should keep only a pointer to it (and, of course, in the constructor, instantiate the member and assign the pointer). Whether you access the member with the dot opperator . or arrow ->, it will perform the same functionality.


TF-IDF Scores:
able: 0.0939
access: 0.0939
api: 0.1040
class: 0.0693
code: 0.1025
constructor: 0.0985
course: 0.1878
create: 0.0745
creating: 0.0837
design: 0.0811
does: 0.0727
example: 0.0650
file: 0.0985
function: 0.1734
just: 0.0638
know: 0.0592
let: 0.1801
member: 0.5202
new: 0.0664
object: 0.2601
objects: 0.0867
perform: 0.0985
products: 0.5202
purpose: 0.1040
question: 0.2035
questions: 0.0900
say: 0.0811
simple: 0.0900
stack: 0.1040
suppose: 0.1040
thing: 0.1734
uses: 0.0867
using: 0.1951

Termine con il punteggio TF-IDF più alto: member (0.5202)

----------------------------------------------------------------------------------------------------

Post 83:
I am a desktop developer moving to web development. The guys who I am working with use procedural PHP, and coming from an event driven, objectified perspective (using WPF and C#.Net) I am completely lost in what seems like the Wild West of development.
Are there any language/framework combinations that allow some semblance of state between the client and server and 'persists' the objects? Is there a way to create a definition of an object that is synonymous between the client and the server?  
Is there anything that incorporates testing and UI components as well?
I realize this is a somewhat broad and biased question, however it is one that I have not found any definitive answers for. Any advice and guidance would be thoroughly appreciated!


TF-IDF Scores:
answers: 0.1986
client: 0.3759
completely: 0.1880
create: 0.1423
definition: 0.1986
desktop: 0.1986
developer: 0.1655
development: 0.3310
driven: 0.1986
framework: 0.1880
language: 0.1324
like: 0.0950
net: 0.1655
object: 0.1655
objects: 0.1655
php: 0.1792
question: 0.1295
realize: 0.1986
server: 0.3759
testing: 0.1986
use: 0.1040
using: 0.1242
way: 0.1268
web: 0.1599
working: 0.1655

Termine con il punteggio TF-IDF più alto: client (0.3759)

----------------------------------------------------------------------------------------------------

Post 84:
I often wondered why C Language is taught as the basis of programming languages everywhere. There are a lot of modern languages like Java, Python etc. which makes the syntax and programming easier. Why are we still holding the C Language up in the front as the basics of programming languages?


TF-IDF Scores:
easier: 0.2161
java: 0.1761
language: 0.3192
languages: 0.6797
like: 0.1145
lot: 0.2266
makes: 0.2072
programming: 0.4402
python: 0.2394

Termine con il punteggio TF-IDF più alto: languages (0.6797)

----------------------------------------------------------------------------------------------------

Post 85:
Will it be difficult in developing a programming language which is much more closer to our language ?
It was just to know the view of programmers across the globe towards the natural programming language.Thanks for giving me your views on this . 


TF-IDF Scores:
developing: 0.2824
difficult: 0.2824
just: 0.2000
know: 0.1857
language: 0.6525
programmers: 0.2719
programming: 0.3999
thanks: 0.3263

Termine con il punteggio TF-IDF più alto: language (0.6525)

----------------------------------------------------------------------------------------------------

Post 86:
I have an algorithm problem. I'll simplify the issue, because most of what I'm dealing with has nothing to do with the algorithm I need.
Basically, I have a list of objects that each have properties. Let's say for the sake of simplicity that this was a simple struct or another simple data type containing a string ID and an array of strings that are its properties. The properties can be things like "tool", "weapon", "food", etc.
What I need to do is turn this list of objects into a tree, where the most common properties go on top, and the least common go on the bottom. It's a bit more complex than that, actually. For example, let's say that I have:

Four objects with only the "weapon" property.
Six objects with a "tool" and "weapon" property.
Two items with a "food" and "fruit" property.
One item with a "tool" property.

If I were to turn this into the tree that I want, it'd look like this:

weapon (as there are ten items that have the weapon property)

tool (as there are six items with the tool and weapon properties)

food

fruit

tool

It's simple to do by hand, but I can't seem to wrap my head around putting this into program form. Any help?


TF-IDF Scores:
actually: 0.1170
algorithm: 0.2593
array: 0.1170
bit: 0.1170
common: 0.2453
data: 0.0981
dealing: 0.1296
example: 0.0810
form: 0.1296
help: 0.1170
id: 0.1296
issue: 0.1227
items: 0.3680
let: 0.2244
like: 0.1240
list: 0.2160
ll: 0.1170
look: 0.1227
need: 0.1962
objects: 0.4321
problem: 0.0954
program: 0.1080
say: 0.2021
simple: 0.3365
string: 0.1170
strings: 0.1296
things: 0.1043
type: 0.1080
want: 0.0810

Termine con il punteggio TF-IDF più alto: objects (0.4321)

----------------------------------------------------------------------------------------------------

Post 87:
I recently stumbled upon a special Sudoku variant and am now struggling to effectively solve it programatically.
Consider the following initial 6x6 grid:

The rules
The red question mark is supposed to represent our secret digit. The secret digit behaves like a normal digit. That is, it has an actual value between 1 and 6, but this value isn't revealed to the player. In this game type, if we create a collision, the newly placed digit would become a neutral element that can be seen as a joker, not colliding with any other digit. For instance, if the secret digit actually was a 6 and we placed a 6 in its row, it would become a neutral element (and we would therewith also know what the secret digit is). We can generate a maximum of one neutral element (meaning that we can only create one collision), a second collision would render the grid unsolved.
Side note: Naturally, this interactive game type doesn't make sense to be printed on a piece of paper; it would e.g. require a client-server infrastructure for the secret not to be revealed to the player.
Analysis
Since the secret digit follows the basic rules, we can deduce that it can't be a 4 in the example grid, but every other digit could be possible. We can also see that there isn't a unique solution; in fact, there usually are hundreds of possible solutions. In a 6x6 initial grid, there is always one secret digit and 6 digits that are pretty randomly placed in the grid (without colliding with each other). This means, the secret could be exposed right off the bet, but we will dismiss the trivial case since it's not fun at all :)
Solving strategy
The most promising strategy would be to find out the secret digit as quickly as possible. That is, we would place digits in its row, column or box until either every possibility is exhausted, or we create a collision. As soon as we know what the secret is, we can solve the puzzle like a normal one (simply ignoring the neutral element if present).
The problem
I want to write an algorithm that finds the secret digit without creating an unsolvable board.
I wrote a rather blunt program which starts by identifying the fields in the secret's row, column and box with the fewest blockers. It then inserts digits in those fields, in an order from fewest blockers to most blockers until the secret can be deduced by collision or exhaustion. In the example grid, it would do something like this:

The blue digits would be placed in ascending order (starting with 1).
My current alogrithm produces an unsolvable board about 20% of the time, which is unacceptable to me. And that's why I'm asking the question:
What would be a smarter approach, minimizing or even eliminating the possibility of creating an unsolvable puzzle?
P.S.: I appreciate every type of answer; theoretical prose, pseudo-code or real code in a popular language is all fine, I simply want to get the gist of which fields/digits to select for the starting strategy.


TF-IDF Scores:
actual: 0.0950
actually: 0.0857
algorithm: 0.0950
answer: 0.0699
approach: 0.0791
asking: 0.0899
case: 0.0740
client: 0.0899
code: 0.0935
create: 0.2041
creating: 0.1529
current: 0.0950
element: 0.3799
example: 0.1187
fields: 0.2696
following: 0.0791
game: 0.1899
generate: 0.0950
isn: 0.1797
know: 0.1081
language: 0.0633
like: 0.1362
make: 0.0764
normal: 0.1899
place: 0.0950
popular: 0.0950
possible: 0.2571
pretty: 0.0857
problem: 0.0699
program: 0.0791
question: 0.1238
recently: 0.0857
represent: 0.0950
require: 0.0822
right: 0.0764
second: 0.0822
seen: 0.0791
sense: 0.0899
server: 0.0899
simply: 0.1797
solution: 0.0791
solutions: 0.0950
starting: 0.1797
strategy: 0.2696
supposed: 0.0899
time: 0.0633
type: 0.2374
usually: 0.0857
value: 0.1899
want: 0.1187
write: 0.0740
wrote: 0.0899

Termine con il punteggio TF-IDF più alto: element (0.3799)

----------------------------------------------------------------------------------------------------

Post 88:
Are there succesful ways (i.e. non spammed by 1000 bots per second!) to propose some user interaction on a website such as :

Voting up / Voting down / Liking posts
Posting comments

but without account registration and without captcha ?

I have read that filtering by IP is not relevant, for many reasons (people may have the same public IP, if they work in the same company for example, and may want to vote on the same post, without being a bot).
[I have tried solutions with honeypots HTML items that bot may fill, and normal users would not fill, but I don't think this is enough to prevent spam to come.]


TF-IDF Scores:
account: 0.2086
come: 0.1837
comments: 0.2205
company: 0.2086
don: 0.1622
example: 0.1378
html: 0.2205
items: 0.2086
non: 0.1908
normal: 0.2205
people: 0.1719
post: 0.1990
prevent: 0.2205
public: 0.2205
read: 0.1908
reasons: 0.2086
relevant: 0.1990
second: 0.1908
solutions: 0.2205
think: 0.1540
user: 0.1775
users: 0.2205
want: 0.1378
ways: 0.1990
website: 0.2205
work: 0.1622

Termine con il punteggio TF-IDF più alto: comments (0.2205)

----------------------------------------------------------------------------------------------------

Post 89:
When programming for android, whenever I use an AsyncTask the doInBackground method looks like this.
 protected String doInBackground(String... args)

But when using the arguments anywhere in that block I can access them like a normal String array for example in my program
        @Override
    protected String doInBackground(String... args)
    {
        String details = "";
        try
        {
            details = facade.getRecipeDetails(args[0]);
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return details;
    }

Which works fine and I have no problem dealing with it. But I'm wondering why they use (String . . . args) instead of a normal array of Strings. Is it just because in the calling method you can just write something like:
 new AsyncHandler.execute("argument1","argument2","argument3",...)  

instead of creating a new array to pass the arguments? Though we could write
new AsyncHandler().execute(new String[]{"Argument1","Argument2"});

which is a bit more verbose.
Are (String ...) and String[] synonymous in how they work, but the argument passing is just easier using the former because there is no need to create an array? As far as I can tell, the former also gets translated to a string array in the background so would they both compile to the same code and it's just 'syntactic sugar'?


TF-IDF Scores:
access: 0.0673
argument: 0.0746
arguments: 0.1412
array: 0.3367
bit: 0.0673
code: 0.0367
compile: 0.0746
create: 0.0535
creating: 0.0601
dealing: 0.0746
details: 0.2118
easier: 0.0673
example: 0.0466
execute: 0.1492
instead: 0.1347
just: 0.1829
like: 0.1070
looks: 0.0746
method: 0.1098
need: 0.0565
new: 0.1905
normal: 0.1492
pass: 0.0706
problem: 0.0549
program: 0.0622
programming: 0.0457
return: 0.0646
string: 0.7407
strings: 0.0746
try: 0.0706
use: 0.0781
using: 0.0933
wondering: 0.0673
work: 0.0549
works: 0.0601
write: 0.1163

Termine con il punteggio TF-IDF più alto: string (0.7407)

----------------------------------------------------------------------------------------------------

Post 90:
We have a large project written in PHP. It almost exclusively uses imperative operations, as in example 1. Should we refactor our existing code to use functional operations? Do you think that the code in example 2 is easier to maintain? 
Example 1 - imperative 
 $cookieString = '';
 foreach($cookieArray as $cookieName => $cookieValue) {
   if($cookieString != '') {
     $cookieString .= '; ';
   }
   $cookieString .= $cookieName.'='.$cookieValue;
 }
 return $cookieString;

Example 2 - functional
 return KeyedStream::of($cookieArray)
                 ->mapEntriesToStream(function($cookieName, $cookieValue) {
                   return $cookieName.'='.$cookieValue;
                 })
                 ->joinToString('; ');
}



TF-IDF Scores:
code: 0.1863
easier: 0.1707
example: 0.4730
existing: 0.1790
function: 0.1576
functional: 0.3783
large: 0.1707
operations: 0.3414
php: 0.1707
project: 0.1322
return: 0.4911
think: 0.1322
use: 0.0990
uses: 0.1576
written: 0.1637

Termine con il punteggio TF-IDF più alto: return (0.4911)

----------------------------------------------------------------------------------------------------

Post 91:
In my new project, I decided to try with TDD. And in very beginning I encountered a problem. First thing that I want to do in my application is to give ability to read data from data source. For this purpose, I want to use repository pattern. 
And now:

If test are for real implementation of repository interface, I will be testing class that has access to database, and I know that I should avoid that. 
If test are for not real implementation of repository pattern, I Will be testing well... just mock. There will be no any piece of production code tested in those unit tests.

I'm thinking about this from two days and still cannot come up with any reasonable solution. What I should do?


TF-IDF Scores:
ability: 0.1697
access: 0.1532
application: 0.1697
avoid: 0.1697
class: 0.1131
code: 0.0836
come: 0.1414
data: 0.2568
database: 0.1469
implementation: 0.3212
interface: 0.1469
just: 0.1040
know: 0.0966
new: 0.1083
pattern: 0.3063
problem: 0.1249
project: 0.1186
purpose: 0.1697
read: 0.1469
reasonable: 0.1697
solution: 0.1414
source: 0.1532
test: 0.2829
testing: 0.3395
tests: 0.1469
thing: 0.1414
thinking: 0.1366
try: 0.1606
unit: 0.1606
use: 0.0888
want: 0.2122

Termine con il punteggio TF-IDF più alto: testing (0.3395)

----------------------------------------------------------------------------------------------------

Post 92:
I am developing a small project to sell and I have used several Java libraries, mostly with LGPL or Apache 2.
And I have one question, for example, I am using jasypt, wich is an Apache 2 license library, but this requires the commons collections library, also Apache 2. 
Do I need to put in my license form the common collections library?.
Apache 2.0 License
Used in  Apache Commons Codec version 1.10 , Joda-Time version 2.6 , Xerial Sqlite JDBC version 3.8.7 and Jasypt version 1.9.2

<LICENSE GOES HERE>

BSD License
Used in  MigLayout version Swing 4.2 and JDatePicker version 1.3.4

<LICENSE GOES HERE>

LGPL 2.1 LICENSE
Used in PortableRXTX and RXTX version 2.2-pre2

<LICENSE GOES HERE>

Also the LGPL and the Apache force me to put the source code and the modifications, but if I have used the binaries without compiling or modifiying anything, Do I need to include the source? If I need could I post a link to githubs repos with the latest version of the library?


TF-IDF Scores:
10: 0.1196
code: 0.0707
common: 0.1359
developing: 0.1242
example: 0.0898
form: 0.1436
include: 0.1359
java: 0.1056
library: 0.5743
need: 0.3259
post: 0.1296
project: 0.1003
question: 0.0936
requires: 0.1436
small: 0.1296
source: 0.2591
time: 0.0957
used: 0.5432
using: 0.0898

Termine con il punteggio TF-IDF più alto: library (0.5743)

----------------------------------------------------------------------------------------------------

Post 93:
I have recently joined a team in which the developers were able to work completely in live production to produce business intelligence products for customers.
Recently, management, at the advice of SAP, have moved the team to a 3 stage environment 

Develop
Test
Production

which require transports between each layer.  
The team have accepted this new constraint begrudgingly and no firm business case has been explained to them as to the benefits.  
Can anyone articulate the advantages of the 3 stage environment or point me to a white paper/case study they recommend?


TF-IDF Scores:
able: 0.1610
benefits: 0.1610
business: 0.3376
case: 0.2781
completely: 0.1688
develop: 0.1784
developers: 0.1688
environment: 0.3376
layer: 0.1784
management: 0.1610
new: 0.1138
point: 0.1688
products: 0.1784
recently: 0.3219
require: 0.1543
team: 0.5064
test: 0.1486
work: 0.1312

Termine con il punteggio TF-IDF più alto: team (0.5064)

----------------------------------------------------------------------------------------------------


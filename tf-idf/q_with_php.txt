Question 1620:
I am excited about the changes in PHP 6 previewed in PHP 5.3+. However, I wonder why it takes so long to release PHP 6? Books about it have been published since 2008, and announcements on it since 2007, but I am yet to hear about an alpha or a beta. Why does it take so long to release it? Or is that the way it goes with all languages when they transition to a major release where I guess it takes around 4-5 years to release?


TF-IDF Scores:
alpha: 0.1781
beta: 0.1781
books: 0.1437
changes: 0.1470
goes: 0.1591
guess: 0.1705
languages: 0.1158
long: 0.2315
major: 0.1643
php: 0.4222
published: 0.1781
release: 0.6364
takes: 0.2760
way: 0.0998
wonder: 0.1705
years: 0.1251

Termine con il punteggio TF-IDF pi첫 alto: release (0.6364)

Best Answer:
The release timetable is not unusual for languages, and it's not even that unusual for PHP: 5.0 was released in 2004, but 4.0 was released in 2000. 
Compare this to the last stable releases for C (2000), Fortran (2003), or C++ (2003).
One other thing to keep in mind is that 5.3 was a major release in all but name. It adds a lot of stuff that was originally destined for PHP 6. Due to development problems with unicode support (a major part of PHP 6), it was decided to release what was stable at the time as a 5.x branch.


TF-IDF Scores:
development: 0.1080
languages: 0.1188
lot: 0.1161
major: 0.3372
mind: 0.1750
originally: 0.1686
php: 0.4332
problems: 0.1444
release: 0.4896
released: 0.3655
stable: 0.3655
stuff: 0.1416
support: 0.1585
thing: 0.1366
time: 0.0939

Termine con il punteggio TF-IDF pi첫 alto: release (0.4896)

----------------------------------------------------------------------------------------------------

Question 2806:
There's around a zillion "PHP frameworks". And most of them bill themselves as following the MVC pattern. While it's welcome to overcome osCommerce coding style (processing logic heavily intermixed with SQL and HTML), there are certainly simpler and easier to follow approaches to get a maintainable application design.
The original MVC concept was targetted at GUI applications. And for Gtk/Python it seems feasible to follow it accordingly. But PHP web apps don't operate on live Views (GUI elements) and a persistent Controller runtime. It's quite certainly a misnomer if it just describes the used code + directory grouping or class naming.
"MVC" seems to be used like a buzzword for PHP frameworks. And I've actually seen one or two mature PHP frameworks admit it, but redefining the phrase anyway to match interna.
So is it generally snake oil? Why isn't better terminology used, and a more sensible concept for maintainable PHP propagated?
Some elaborative reasoning
Why I suspect that PHP implementations don't follow the real MVC pattern:
Models: in theory, Models should be fat and contain business logic, and controllers should be thin handlers (input->output). In reality the PHP frameworks advocate shallow Models. CI and Symfony for example equate Model == ORM. Even HTTP input is handled by the controller, isn't treated as model.
Views: workarounds with AJAX discounted, there can't be Views on web pages. PHP frameworks still pump out pages. The interface still effectively follows the ordinary HTTP model, there's no advantage over non-MVC applications. (And lastly, none of the widespread php frameworks can factually output to GUI Views instead of HTML. I've seen a PHP library that can operate Gtk/Console/Web, but the frameworks don't.)
Controller: I'm unsure. Controllers probably don't need to be long-running and persistently active in the MVC model. In PHP framework context, they're however mostly request handlers. Not really something to get argumentative about, but it just feels slightly buzzwordish.
Would there be better descriptors? I've seen acronyms like PMVC or HMVC thrown around. Though descriptions get more ambigous there, maybe these would describe the current web frameworks less hokey?


TF-IDF Scores:
actually: 0.0430
advocate: 0.0621
application: 0.0456
applications: 0.0981
approaches: 0.0573
apps: 0.0512
better: 0.0797
business: 0.0512
certainly: 0.1145
class: 0.0501
code: 0.0257
coding: 0.0408
concept: 0.1109
context: 0.0554
controller: 0.1862
current: 0.0525
design: 0.0399
directory: 0.0621
easier: 0.0538
effectively: 0.0573
elements: 0.0621
example: 0.0378
feels: 0.0594
follow: 0.1574
following: 0.0538
framework: 0.0472
frameworks: 0.4196
generally: 0.0512
gui: 0.1718
handled: 0.0621
html: 0.1145
http: 0.1109
input: 0.1145
instead: 0.0464
interface: 0.0621
library: 0.0501
like: 0.0516
live: 0.0573
logic: 0.1188
long: 0.0403
maintainable: 0.1188
match: 0.0594
maybe: 0.0525
model: 0.2098
need: 0.0354
non: 0.0436
ordinary: 0.0621
original: 0.0538
output: 0.1241
pattern: 0.1145
php: 0.5394
probably: 0.0456
python: 0.0501
quite: 0.0490
real: 0.0456
reality: 0.0621
really: 0.0357
reasoning: 0.0621
request: 0.0621
running: 0.0573
runtime: 0.0573
seen: 0.1347
simpler: 0.0621
sql: 0.0621
style: 0.0512
suspect: 0.0621
theory: 0.0594
thrown: 0.0621
used: 0.1043
views: 0.2483
web: 0.1769

Termine con il punteggio TF-IDF pi첫 alto: php (0.5394)

Best Answer:

But PHP web apps don't operate on live Views (GUI elements) and a persistent Controller runtime. 

No, they sure do!
Think of AJAX applications, then the view asks something to the controller and gets a partial view back,
this view or data is then filled in somewhere in the page and thus live updated.
The Controller is also persistent because you can use cookies/sessions.

"MVC" seems to be used like a buzzword for PHP frameworks.

MVC is a Software Architecture, some frameworks might use it as a buzz, but others do it properly...
See a list of some frameworks on Wikipedia.

is MVC just the SEO of php programming?

MVC and SEO are two things apart, but yes... MVC is getting more popular.


TF-IDF Scores:
apart: 0.1336
applications: 0.1103
apps: 0.1152
architecture: 0.1396
controller: 0.4188
data: 0.0967
elements: 0.1396
filled: 0.1396
frameworks: 0.3539
gets: 0.1211
getting: 0.1082
gui: 0.1288
like: 0.0581
list: 0.0980
live: 0.2576
page: 0.1336
php: 0.3309
popular: 0.1288
programming: 0.0678
properly: 0.1336
runtime: 0.1288
software: 0.0817
sure: 0.1043
things: 0.0763
think: 0.0728
updated: 0.1288
use: 0.1265
used: 0.0782
view: 0.4188
views: 0.1396
web: 0.0995
yes: 0.1043

Termine con il punteggio TF-IDF pi첫 alto: controller (0.4188)

----------------------------------------------------------------------------------------------------

